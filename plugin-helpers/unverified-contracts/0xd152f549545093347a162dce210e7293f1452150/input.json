{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "Disperse.sol": {
      "content": "pragma solidity ^0.4.25;\r\n\r\n\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\n\r\ncontract Disperse {\r\n    function disperseEther(address[] recipients, uint256[] values) external payable {\r\n        for (uint256 i = 0; i < recipients.length; i++)\r\n            recipients[i].transfer(values[i]);\r\n        uint256 balance = address(this).balance;\r\n        if (balance > 0)\r\n            msg.sender.transfer(balance);\r\n    }\r\n\r\n    function disperseToken(IERC20 token, address[] recipients, uint256[] values) external {\r\n        uint256 total = 0;\r\n        for (uint256 i = 0; i < recipients.length; i++)\r\n            total += values[i];\r\n        require(token.transferFrom(msg.sender, address(this), total));\r\n        for (i = 0; i < recipients.length; i++)\r\n            require(token.transfer(recipients[i], values[i]));\r\n    }\r\n\r\n    function disperseTokenSimple(IERC20 token, address[] recipients, uint256[] values) external {\r\n        for (uint256 i = 0; i < recipients.length; i++)\r\n            require(token.transferFrom(msg.sender, recipients[i], values[i]));\r\n    }\r\n}"
    }
  }
}