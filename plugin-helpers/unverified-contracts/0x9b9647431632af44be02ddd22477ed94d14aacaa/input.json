{
  "language": "Solidity",
  "settings": {
    "libraries": {},
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "*"
        ],
        "": [
          "*"
        ]
      }
    }
  },
  "sources": {
    "KOKContract.sol": {
      "content": "pragma solidity ^0.4.21;\r\n\r\n// smart contract for KOK coin \r\n\r\n// ownership contract\r\ncontract Owned {\r\n    address public owner;\r\n\r\n    event TransferOwnership(address oldaddr, address newaddr);\r\n\r\n    modifier onlyOwner() { if (msg.sender != owner) return; _; }\r\n\r\n    function Owned() public {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    function transferOwnership(address _new) onlyOwner public {\r\n        address oldaddr = owner;\r\n        owner = _new;\r\n        emit TransferOwnership(oldaddr, owner);\r\n    }\r\n}\r\n\r\n// erc20\r\ncontract ERC20Interface {\r\n\tuint256 public totalSupply;\r\n\tfunction balanceOf(address _owner) public constant returns (uint256 balance);\r\n\tfunction transfer(address _to, uint256 _value) public returns (bool success);\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n\tfunction approve(address _spender, uint256 _value) public returns (bool success);\r\n\tfunction allowance(address _owner, address _spender) public constant returns (uint256 remaining);\r\n\tevent Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract KOKContract is ERC20Interface, Owned {\r\n\tstring public constant symbol = \"KOK\";\r\n\tstring public constant name = \"KOK Coin\";\r\n\tuint8 public constant decimals = 18;\r\n\tuint256 public constant totalSupply = 5000000000000000000000000000;\r\n\r\n\tbool public stopped;\r\n\r\n\tmapping (address => int8) public blackList;\r\n\r\n\tmapping (address => uint256) public balances;\r\n\tmapping (address => mapping (address => uint256)) public allowed;\r\n\r\n\r\n    event Blacklisted(address indexed target);\r\n    event DeleteFromBlacklist(address indexed target);\r\n    event RejectedPaymentToBlacklistedAddr(address indexed from, address indexed to, uint256 value);\r\n    event RejectedPaymentFromBlacklistedAddr(address indexed from, address indexed to, uint256 value);\r\n\r\n\r\n\tmodifier notStopped {\r\n        require(!stopped);\r\n        _;\r\n    }\r\n\r\n// constructor\r\n\tfunction KOKContract() public {\r\n\t\tbalances[msg.sender] = totalSupply;\r\n\t}\r\n\t\r\n// function made for airdrop\r\n\tfunction airdrop(address[] _to, uint256[] _value) onlyOwner notStopped public {\r\n\t    for(uint256 i = 0; i < _to.length; i++){\r\n\t        if(balances[_to[i]] > 0){\r\n\t            continue;\r\n\t        }\r\n\t        transfer(_to[i], _value[i]);\r\n\t    }\r\n\t}\r\n\r\n// blacklist management\r\n    function blacklisting(address _addr) onlyOwner public {\r\n        blackList[_addr] = 1;\r\n        emit Blacklisted(_addr);\r\n    }\r\n    function deleteFromBlacklist(address _addr) onlyOwner public {\r\n        blackList[_addr] = -1;\r\n        emit DeleteFromBlacklist(_addr);\r\n    }\r\n\r\n// stop the contract\r\n\tfunction stop() onlyOwner {\r\n        stopped = true;\r\n    }\r\n    function start() onlyOwner {\r\n        stopped = false;\r\n    }\r\n\t\r\n// ERC20 functions\r\n\tfunction balanceOf(address _owner) public constant returns (uint256 balance){\r\n\t\treturn balances[_owner];\r\n\t}\r\n\tfunction transfer(address _to, uint256 _value) notStopped public returns (bool success){\r\n\t\trequire(balances[msg.sender] >= _value);\r\n\r\n\t\tif(blackList[msg.sender] > 0){\r\n\t\t\temit RejectedPaymentFromBlacklistedAddr(msg.sender, _to, _value);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif(blackList[_to] > 0){\r\n\t\t\temit RejectedPaymentToBlacklistedAddr(msg.sender, _to, _value);\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tbalances[msg.sender] -= _value;\r\n\t\tbalances[_to] += _value;\r\n\t\temit Transfer(msg.sender, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) notStopped public returns (bool success){\r\n\t\trequire(balances[_from] >= _value\r\n\t\t\t&& allowed[_from][msg.sender] >= _value);\r\n\r\n\t\tif(blackList[_from] > 0){\r\n\t\t\temit RejectedPaymentFromBlacklistedAddr(_from, _to, _value);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif(blackList[_to] > 0){\r\n\t\t\temit RejectedPaymentToBlacklistedAddr(_from, _to, _value);\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tbalances[_from] -= _value;\r\n\t\tallowed[_from][msg.sender] -= _value;\r\n\t\tbalances[_to] += _value;\r\n\t\temit Transfer(_from, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n\tfunction approve(address _spender, uint256 _value) notStopped public returns (bool success){\r\n\t\tallowed[msg.sender][_spender] = _value;\r\n\t\temit Approval(msg.sender, _spender, _value);\r\n\t\treturn true;\r\n\t}\r\n\tfunction allowance(address _owner, address _spender) public constant returns (uint256 remaining){\r\n\t\treturn allowed[_owner][_spender];\r\n\t}\r\n}"
    }
  }
}