{
  "language": "Solidity",
  "sources": {
    "contracts/Shackled.sol": {
      "content": "// // SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.0;\n\nimport \"./ShackledUtils.sol\";\nimport \"./ShackledStructs.sol\";\nimport \"./ShackledRenderer.sol\";\nimport \"./ShackledGenesis.sol\";\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\ncontract Shackled is ERC721Enumerable, Ownable {\n    /// minting parameters for the Genesis collection\n    bytes32 public mintState;\n    bytes32 public publicMintState = keccak256(abi.encodePacked(\"public_mint\"));\n    bytes32 public presaleMintState = keccak256(abi.encodePacked(\"presale\"));\n    uint256 public maxSupply = 1024;\n    uint256 public mintPrice = 0.15 ether;\n    uint256 public reservedTokens = 20;\n    uint256 public txnQtyLimit = 5;\n    mapping(uint256 => bytes32) public tokenSeedHashes;\n\n    /// rendering engine parameters\n    int256 public canvasDim = 128;\n    uint256 public outputHeight = 512;\n    uint256 public outputWidth = 512;\n    bool public returnSVG = true;\n\n    event Received(address, uint256);\n\n    constructor() ERC721(\"Shackled\", \"SHACKLED\") {}\n\n    /** @dev Mint allocated token IDs assigned to active Dawn Key holders.\n     * @param quantity The amount to mint\n     * @param allowlistMintIds The allocated ids to mint at mintPrice\n     * @param dawnKeyMintIds The allocated ids to mint free\n     * @param signature The signature to verify\n     */\n    function presaleMint(\n        uint256 quantity,\n        uint256[] calldata allowlistMintIds,\n        uint256[] calldata dawnKeyMintIds,\n        bytes calldata signature\n    ) public payable {\n        require(presaleMintState == mintState, \"Presale mint is not active\");\n\n        /// verify the signature to confirm valid paramaters have been sent\n        require(\n            checkSignature(signature, allowlistMintIds, dawnKeyMintIds),\n            \"Invalid signature\"\n        );\n\n        uint256 nMintableIds = allowlistMintIds.length + dawnKeyMintIds.length;\n\n        /// check that the current balance indicates tokens are still mintable\n        /// to raise an error and stop the transaction that wont lead to any mints\n        /// note that this doesnt guarantee tokens haven't been minted\n        /// as they may have been transfered out of the holder's wallet\n        require(\n            quantity + balanceOf(msg.sender) <= nMintableIds,\n            \"Quantity requested is too high\"\n        );\n\n        /// determine how many allowlistMints are being made\n        /// and that sufficient value has been sent to cover this\n        uint256 dawnKeyMintsRequested;\n        for (uint256 i = 0; i < dawnKeyMintIds.length; i++) {\n            if (!_exists(dawnKeyMintIds[i])) {\n                if (dawnKeyMintsRequested < quantity) {\n                    dawnKeyMintsRequested++;\n                } else {\n                    break;\n                }\n            }\n        }\n\n        uint256 allowListMintsRequested = quantity - dawnKeyMintsRequested;\n\n        require(\n            msg.value >= mintPrice * allowListMintsRequested,\n            \"Insufficient value to mint\"\n        );\n\n        /// iterate through all mintable ids (dawn key mints first)\n        /// and mint up to the requested quantity\n        uint16 numMinted;\n        for (uint256 i = 0; i < nMintableIds; ++i) {\n            if (numMinted == quantity) {\n                break;\n            }\n\n            bool dawnKeyMint = i < dawnKeyMintIds.length;\n\n            uint256 tokenId = dawnKeyMint\n                ? dawnKeyMintIds[i]\n                : allowlistMintIds[i - dawnKeyMintIds.length];\n\n            /// check that this specific token is mintable\n            /// prevents minting, transfering out of the wallet, and minting again\n            if (_exists(tokenId)) {\n                continue;\n            }\n\n            _safeMint(msg.sender, tokenId);\n            storeSeedHash(tokenId);\n            ++numMinted;\n        }\n        require(numMinted == quantity, \"Requested quantity not minted\");\n    }\n\n    /** @dev Mints a token during the public mint phase\n     * @param quantity The quantity of tokens to mint\n     */\n    function publicMint(uint256 quantity) public payable {\n        require(mintState == publicMintState, \"Public mint is not active\");\n        require(quantity <= txnQtyLimit, \"Quantity exceeds txn limit\");\n\n        // check the txn value\n        require(\n            msg.value >= mintPrice * quantity,\n            \"Insufficient value to mint\"\n        );\n\n        /// Disallow transactions that would exceed the maxSupply\n        require(\n            totalSupply() + quantity <= maxSupply,\n            \"Insufficient supply remaining\"\n        );\n\n        /// mint the requested quantity\n        /// go through the whole supply to find tokens\n        /// as some may not have been minted in presale\n        uint256 minted;\n        for (uint256 tokenId = 0; tokenId < maxSupply; tokenId++) {\n            if (!_exists(tokenId)) {\n                _safeMint(msg.sender, tokenId);\n                storeSeedHash(tokenId);\n                minted++;\n            }\n            if (minted == quantity) {\n                break;\n            }\n        }\n    }\n\n    /** @dev Store the seedhash for a tokenId */\n    function storeSeedHash(uint256 tokenId) internal {\n        require(_exists(tokenId), \"TokenId does not exist\");\n        require(tokenSeedHashes[tokenId] == 0, \"Seed hash already set\");\n        /// create a hash that will be used to seed each Genesis piece\n        /// use a range of parameters to reduce predictability and gamification\n        tokenSeedHashes[tokenId] = keccak256(\n            abi.encodePacked(\n                block.timestamp,\n                block.difficulty,\n                msg.sender,\n                tokenId\n            )\n        );\n    }\n\n    /** @dev Set the contract's mint state\n     */\n    function setMintState(string memory newMintState) public onlyOwner {\n        mintState = keccak256(abi.encodePacked(newMintState));\n    }\n\n    /** @dev validate a signature\n     */\n    function checkSignature(\n        bytes memory signature,\n        uint256[] calldata allowlistMintIds,\n        uint256[] calldata dawnKeyMintIds\n    ) public view returns (bool) {\n        bytes32 payloadHash = keccak256(\n            abi.encode(this, msg.sender, allowlistMintIds, dawnKeyMintIds)\n        );\n        address actualSigner = ECDSA.recover(\n            ECDSA.toEthSignedMessageHash(payloadHash),\n            signature\n        );\n        address owner = owner();\n        return (owner == actualSigner);\n    }\n\n    /**\n     * @dev Set some tokens aside for the team\n     */\n    function reserveTokens() public onlyOwner {\n        for (uint256 i = 0; i < reservedTokens; i++) {\n            uint256 tokenId = totalSupply();\n            _safeMint(msg.sender, tokenId);\n            storeSeedHash(tokenId);\n        }\n    }\n\n    /**\n     * @dev Withdraw ether to owner's wallet\n     */\n    function withdrawEth() public onlyOwner {\n        uint256 balance = address(this).balance;\n        (bool success, ) = payable(msg.sender).call{value: balance}(\"\");\n        require(success, \"Withdraw failed\");\n    }\n\n    /** @dev run the rendering engine on any given renderParams */\n    function render(\n        ShackledStructs.RenderParams memory renderParams,\n        int256 canvasDim_,\n        bool returnSVG\n    ) public view returns (string memory) {\n        return ShackledRenderer.render(renderParams, canvasDim_, returnSVG);\n    }\n\n    /** generate a genesis piece from a given tokenHash */\n    function generateGenesisPiece(bytes32 tokenHash)\n        public\n        view\n        returns (\n            ShackledStructs.RenderParams memory,\n            ShackledStructs.Metadata memory\n        )\n    {\n        return ShackledGenesis.generateGenesisPiece(tokenHash);\n    }\n\n    /** @dev render the art for a Shackled Genesis NFT and get the 'raw' metadata\n     */\n    function renderGenesis(uint256 tokenId, int256 canvasDim_)\n        public\n        view\n        returns (\n            string memory,\n            ShackledStructs.RenderParams memory,\n            ShackledStructs.Metadata memory\n        )\n    {\n        /// get the hash created when this token was minted\n        bytes32 tokenHash = tokenSeedHashes[tokenId];\n\n        /// generate the geometry and color of this genesis piece\n        (\n            ShackledStructs.RenderParams memory renderParams,\n            ShackledStructs.Metadata memory metadata\n        ) = ShackledGenesis.generateGenesisPiece(tokenHash);\n\n        // run the rendering engine and return an encoded image\n        string memory image = ShackledRenderer.render(\n            renderParams,\n            canvasDim_,\n            returnSVG\n        );\n\n        return (image, renderParams, metadata);\n    }\n\n    /** @dev run the rendering engine and return a token's final metadata\n     */\n    function tokenURI(uint256 tokenId)\n        public\n        view\n        virtual\n        override\n        returns (string memory)\n    {\n        require(\n            _exists(tokenId),\n            \"ERC721Metadata: URI query for nonexistent token\"\n        );\n\n        (\n            string memory image,\n            ShackledStructs.RenderParams memory renderParams,\n            ShackledStructs.Metadata memory metadata\n        ) = renderGenesis(tokenId, canvasDim);\n\n        // construct and encode the metadata json\n        return ShackledUtils.getEncodedMetadata(image, metadata, tokenId);\n    }\n\n    /** @dev change the canvas size to render on\n     */\n    function updateCanvasDim(int256 _canvasDim) public onlyOwner {\n        canvasDim = _canvasDim;\n    }\n\n    /** @dev change the desired output width to interpolate to in the svg container\n     */\n    function updateOutputWidth(uint256 _outputWidth) public onlyOwner {\n        outputWidth = _outputWidth;\n    }\n\n    /** @dev change the desired output height to interpolate to in the svg container\n     */\n    function updateOutputHeight(uint256 _outputHeight) public onlyOwner {\n        outputHeight = _outputHeight;\n    }\n\n    receive() external payable {\n        emit Received(msg.sender, msg.value);\n    }\n}\n"
    },
    "contracts/ShackledUtils.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.0;\n\nimport \"./ShackledStructs.sol\";\n\nlibrary ShackledUtils {\n    string internal constant TABLE =\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\n    /** @dev Flatten 3d tris array into 2d verts */\n    function flattenTris(int256[3][3][] memory tris)\n        internal\n        pure\n        returns (int256[3][] memory)\n    {\n        /// initialize a dynamic in-memory array\n        int256[3][] memory flattened = new int256[3][](3 * tris.length);\n\n        for (uint256 i = 0; i < tris.length; i++) {\n            /// tris.length == N\n            // add values to specific index, as cannot push to array in memory\n            flattened[(i * 3) + 0] = tris[i][0];\n            flattened[(i * 3) + 1] = tris[i][1];\n            flattened[(i * 3) + 2] = tris[i][2];\n        }\n        return flattened;\n    }\n\n    /** @dev Unflatten 2d verts array into 3d tries (inverse of flattenTris function) */\n    function unflattenVertsToTris(int256[3][] memory verts)\n        internal\n        pure\n        returns (int256[3][3][] memory)\n    {\n        /// initialize an array with length = 1/3 length of verts\n        int256[3][3][] memory tris = new int256[3][3][](verts.length / 3);\n\n        for (uint256 i = 0; i < verts.length; i += 3) {\n            tris[i / 3] = [verts[i], verts[i + 1], verts[i + 2]];\n        }\n        return tris;\n    }\n\n    /** @dev clip an array to a certain length (to trim empty tail slots) */\n    function clipArray12ToLength(int256[12][] memory arr, uint256 desiredLen)\n        internal\n        pure\n        returns (int256[12][] memory)\n    {\n        uint256 nToCull = arr.length - desiredLen;\n        assembly {\n            mstore(arr, sub(mload(arr), nToCull))\n        }\n        return arr;\n    }\n\n    /** @dev convert an unsigned int to a string */\n    function uint2str(uint256 _i)\n        internal\n        pure\n        returns (string memory _uintAsString)\n    {\n        if (_i == 0) {\n            return \"0\";\n        }\n        uint256 j = _i;\n        uint256 len;\n        while (j != 0) {\n            len++;\n            j /= 10;\n        }\n        bytes memory bstr = new bytes(len);\n        uint256 k = len;\n        while (_i != 0) {\n            k = k - 1;\n            uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\n            bytes1 b1 = bytes1(temp);\n            bstr[k] = b1;\n            _i /= 10;\n        }\n        return string(bstr);\n    }\n\n    /** @dev get the hex encoding of various powers of 2 (canvas size options) */\n    function getHex(uint256 _i) internal pure returns (bytes memory _hex) {\n        if (_i == 8) {\n            return hex\"08_00_00_00\";\n        } else if (_i == 16) {\n            return hex\"10_00_00_00\";\n        } else if (_i == 32) {\n            return hex\"20_00_00_00\";\n        } else if (_i == 64) {\n            return hex\"40_00_00_00\";\n        } else if (_i == 128) {\n            return hex\"80_00_00_00\";\n        } else if (_i == 256) {\n            return hex\"00_01_00_00\";\n        } else if (_i == 512) {\n            return hex\"00_02_00_00\";\n        }\n    }\n\n    /** @dev create an svg container for a bitmap (for display on svg-only platforms) */\n    function getSVGContainer(\n        string memory encodedBitmap,\n        int256 canvasDim,\n        uint256 outputHeight,\n        uint256 outputWidth\n    ) internal view returns (string memory) {\n        uint256 canvasDimUnsigned = uint256(canvasDim);\n        // construct some elements in memory prior to return string to avoid stack too deep\n        bytes memory imgSize = abi.encodePacked(\n            \"width='\",\n            ShackledUtils.uint2str(canvasDimUnsigned),\n            \"' height='\",\n            ShackledUtils.uint2str(canvasDimUnsigned),\n            \"'\"\n        );\n        bytes memory canvasSize = abi.encodePacked(\n            \"width='\",\n            ShackledUtils.uint2str(outputWidth),\n            \"' height='\",\n            ShackledUtils.uint2str(outputHeight),\n            \"'\"\n        );\n        bytes memory scaleStartTag = abi.encodePacked(\n            \"<g transform='scale(\",\n            ShackledUtils.uint2str(outputWidth / canvasDimUnsigned),\n            \")'>\"\n        );\n\n        return\n            string(\n                abi.encodePacked(\n                    \"data:image/svg+xml;base64,\",\n                    Base64.encode(\n                        abi.encodePacked(\n                            \"<svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' \",\n                            \"shape-rendering='crispEdges' \",\n                            canvasSize,\n                            \">\",\n                            scaleStartTag,\n                            \"<image \",\n                            imgSize,\n                            \" style='image-rendering: pixelated; image-rendering: crisp-edges;' \",\n                            \"href='\",\n                            encodedBitmap,\n                            \"'/></g></svg>\"\n                        )\n                    )\n                )\n            );\n    }\n\n    /** @dev converts raw metadata into */\n    function getAttributes(ShackledStructs.Metadata memory metadata)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return\n            abi.encodePacked(\n                \"{\",\n                '\"Structure\": \"',\n                metadata.geomSpec,\n                '\", \"Chroma\": \"',\n                metadata.colorScheme,\n                '\", \"Pseudosymmetry\": \"',\n                metadata.pseudoSymmetry,\n                '\", \"Wireframe\": \"',\n                metadata.wireframe,\n                '\", \"Inversion\": \"',\n                metadata.inversion,\n                '\", \"Prisms\": \"',\n                uint2str(metadata.nPrisms),\n                '\"}'\n            );\n    }\n\n    /** @dev create and encode the token's metadata */\n    function getEncodedMetadata(\n        string memory image,\n        ShackledStructs.Metadata memory metadata,\n        uint256 tokenId\n    ) internal view returns (string memory) {\n        /// get attributes and description here to avoid stack too deep\n        string\n            memory description = '\"description\": \"Shackled is the first general-purpose 3D renderer'\n            \" running on the Ethereum blockchain.\"\n            ' Each piece represents a leap forward in on-chain computer graphics, and the collection itself is an NFT first.\"';\n        return\n            string(\n                abi.encodePacked(\n                    \"data:application/json;base64,\",\n                    Base64.encode(\n                        bytes(\n                            string(\n                                abi.encodePacked(\n                                    '{\"name\": \"Shackled Genesis #',\n                                    uint2str(tokenId),\n                                    '\", ',\n                                    description,\n                                    ', \"attributes\":',\n                                    getAttributes(metadata),\n                                    ', \"image\":\"',\n                                    image,\n                                    '\"}'\n                                )\n                            )\n                        )\n                    )\n                )\n            );\n    }\n\n    // fragment =\n    // [ canvas_x, canvas_y, depth, col_x, col_y, col_z, normal_x, normal_y, normal_z, world_x, world_y, world_z ],\n    /** @dev get an encoded 2d bitmap by combining the object and background fragments */\n    function getEncodedBitmap(\n        int256[12][] memory fragments,\n        int256[5][] memory background,\n        int256 canvasDim,\n        bool invert\n    ) internal view returns (string memory) {\n        uint256 canvasDimUnsigned = uint256(canvasDim);\n        bytes memory fileHeader = abi.encodePacked(\n            hex\"42_4d\", // BM\n            hex\"36_04_00_00\", // size of the bitmap file in bytes (14 (file header) + 40 (info header) + size of raw data (1024))\n            hex\"00_00_00_00\", // 2x2 bytes reserved\n            hex\"36_00_00_00\" // offset of pixels in bytes\n        );\n        bytes memory infoHeader = abi.encodePacked(\n            hex\"28_00_00_00\", // size of the header in bytes (40)\n            getHex(canvasDimUnsigned), // width in pixels 32\n            getHex(canvasDimUnsigned), // height in pixels 32\n            hex\"01_00\", // number of color plans (must be 1)\n            hex\"18_00\", // number of bits per pixel (24)\n            hex\"00_00_00_00\", // type of compression (none)\n            hex\"00_04_00_00\", // size of the raw bitmap data (1024)\n            hex\"C4_0E_00_00\", // horizontal resolution\n            hex\"C4_0E_00_00\", // vertical resolution\n            hex\"00_00_00_00\", // number of used colours\n            hex\"05_00_00_00\" // number of important colours\n        );\n        bytes memory headers = abi.encodePacked(fileHeader, infoHeader);\n\n        /// create a container for the bitmap's bytes\n        bytes memory bytesArray = new bytes(3 * canvasDimUnsigned**2);\n\n        /// write the background first so it is behind the fragments\n        bytesArray = writeBackgroundToBytesArray(\n            background,\n            bytesArray,\n            canvasDimUnsigned,\n            invert\n        );\n        bytesArray = writeFragmentsToBytesArray(\n            fragments,\n            bytesArray,\n            canvasDimUnsigned,\n            invert\n        );\n\n        return\n            string(\n                abi.encodePacked(\n                    \"data:image/bmp;base64,\",\n                    Base64.encode(BytesUtils.MergeBytes(headers, bytesArray))\n                )\n            );\n    }\n\n    /** @dev write the fragments to the bytes array */\n    function writeFragmentsToBytesArray(\n        int256[12][] memory fragments,\n        bytes memory bytesArray,\n        uint256 canvasDimUnsigned,\n        bool invert\n    ) internal pure returns (bytes memory) {\n        /// loop through each fragment\n        /// and write it's color into bytesArray in its canvas equivelant position\n        for (uint256 i = 0; i < fragments.length; i++) {\n            /// check if x and y are both greater than 0\n            if (\n                uint256(fragments[i][0]) >= 0 && uint256(fragments[i][1]) >= 0\n            ) {\n                /// calculating the starting bytesArray ix for this fragment's colors\n                uint256 flatIx = ((canvasDimUnsigned -\n                    uint256(fragments[i][1]) -\n                    1) *\n                    canvasDimUnsigned +\n                    (canvasDimUnsigned - uint256(fragments[i][0]) - 1)) * 3;\n\n                /// red\n                uint256 r = fragments[i][3] > 255\n                    ? 255\n                    : uint256(fragments[i][3]);\n\n                /// green\n                uint256 g = fragments[i][4] > 255\n                    ? 255\n                    : uint256(fragments[i][4]);\n\n                /// blue\n                uint256 b = fragments[i][5] > 255\n                    ? 255\n                    : uint256(fragments[i][5]);\n\n                if (invert) {\n                    r = 255 - r;\n                    g = 255 - g;\n                    b = 255 - b;\n                }\n\n                bytesArray[flatIx + 0] = bytes1(uint8(b));\n                bytesArray[flatIx + 1] = bytes1(uint8(g));\n                bytesArray[flatIx + 2] = bytes1(uint8(r));\n            }\n        }\n        return bytesArray;\n    }\n\n    /** @dev write the fragments to the bytes array \n    using a separate function from above to account for variable input size\n    */\n    function writeBackgroundToBytesArray(\n        int256[5][] memory background,\n        bytes memory bytesArray,\n        uint256 canvasDimUnsigned,\n        bool invert\n    ) internal pure returns (bytes memory) {\n        /// loop through each fragment\n        /// and write it's color into bytesArray in its canvas equivelant position\n        for (uint256 i = 0; i < background.length; i++) {\n            /// check if x and y are both greater than 0\n            if (\n                uint256(background[i][0]) >= 0 && uint256(background[i][1]) >= 0\n            ) {\n                /// calculating the starting bytesArray ix for this fragment's colors\n                uint256 flatIx = (uint256(background[i][1]) *\n                    canvasDimUnsigned +\n                    uint256(background[i][0])) * 3;\n\n                // red\n                uint256 r = background[i][2] > 255\n                    ? 255\n                    : uint256(background[i][2]);\n\n                /// green\n                uint256 g = background[i][3] > 255\n                    ? 255\n                    : uint256(background[i][3]);\n\n                // blue\n                uint256 b = background[i][4] > 255\n                    ? 255\n                    : uint256(background[i][4]);\n\n                if (invert) {\n                    r = 255 - r;\n                    g = 255 - g;\n                    b = 255 - b;\n                }\n\n                bytesArray[flatIx + 0] = bytes1(uint8(b));\n                bytesArray[flatIx + 1] = bytes1(uint8(g));\n                bytesArray[flatIx + 2] = bytes1(uint8(r));\n            }\n        }\n        return bytesArray;\n    }\n}\n\n/// [MIT License]\n/// @title Base64\n/// @notice Provides a function for encoding some bytes in base64\n/// @author Brecht Devos <brecht@loopring.org>\nlibrary Base64 {\n    bytes internal constant TABLE =\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\n    /// @notice Encodes some bytes to the base64 representation\n    function encode(bytes memory data) internal view returns (string memory) {\n        uint256 len = data.length;\n        if (len == 0) return \"\";\n\n        // multiply by 4/3 rounded up\n        uint256 encodedLen = 4 * ((len + 2) / 3);\n\n        // Add some extra buffer at the end\n        bytes memory result = new bytes(encodedLen + 32);\n\n        bytes memory table = TABLE;\n\n        assembly {\n            let tablePtr := add(table, 1)\n            let resultPtr := add(result, 32)\n\n            for {\n                let i := 0\n            } lt(i, len) {\n\n            } {\n                i := add(i, 3)\n                let input := and(mload(add(data, i)), 0xffffff)\n\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\n                out := shl(8, out)\n                out := add(\n                    out,\n                    and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF)\n                )\n                out := shl(8, out)\n                out := add(\n                    out,\n                    and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF)\n                )\n                out := shl(8, out)\n                out := add(\n                    out,\n                    and(mload(add(tablePtr, and(input, 0x3F))), 0xFF)\n                )\n                out := shl(224, out)\n\n                mstore(resultPtr, out)\n\n                resultPtr := add(resultPtr, 4)\n            }\n\n            switch mod(len, 3)\n            case 1 {\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\n            }\n            case 2 {\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\n            }\n\n            mstore(result, encodedLen)\n        }\n\n        return string(result);\n    }\n}\n\nlibrary BytesUtils {\n    function char(bytes1 b) internal view returns (bytes1 c) {\n        if (uint8(b) < 10) return bytes1(uint8(b) + 0x30);\n        else return bytes1(uint8(b) + 0x57);\n    }\n\n    function bytes32string(bytes32 b32)\n        internal\n        view\n        returns (string memory out)\n    {\n        bytes memory s = new bytes(64);\n        for (uint32 i = 0; i < 32; i++) {\n            bytes1 b = bytes1(b32[i]);\n            bytes1 hi = bytes1(uint8(b) / 16);\n            bytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\n            s[i * 2] = char(hi);\n            s[i * 2 + 1] = char(lo);\n        }\n        out = string(s);\n    }\n\n    function hach(string memory value) internal view returns (string memory) {\n        return bytes32string(sha256(abi.encodePacked(value)));\n    }\n\n    function MergeBytes(bytes memory a, bytes memory b)\n        internal\n        pure\n        returns (bytes memory c)\n    {\n        // Store the length of the first array\n        uint256 alen = a.length;\n        // Store the length of BOTH arrays\n        uint256 totallen = alen + b.length;\n        // Count the loops required for array a (sets of 32 bytes)\n        uint256 loopsa = (a.length + 31) / 32;\n        // Count the loops required for array b (sets of 32 bytes)\n        uint256 loopsb = (b.length + 31) / 32;\n        assembly {\n            let m := mload(0x40)\n            // Load the length of both arrays to the head of the new bytes array\n            mstore(m, totallen)\n            // Add the contents of a to the array\n            for {\n                let i := 0\n            } lt(i, loopsa) {\n                i := add(1, i)\n            } {\n                mstore(\n                    add(m, mul(32, add(1, i))),\n                    mload(add(a, mul(32, add(1, i))))\n                )\n            }\n            // Add the contents of b to the array\n            for {\n                let i := 0\n            } lt(i, loopsb) {\n                i := add(1, i)\n            } {\n                mstore(\n                    add(m, add(mul(32, add(1, i)), alen)),\n                    mload(add(b, mul(32, add(1, i))))\n                )\n            }\n            mstore(0x40, add(m, add(32, totallen)))\n            c := m\n        }\n    }\n}\n"
    },
    "contracts/ShackledStructs.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\n\npragma solidity ^0.8.0;\n\nlibrary ShackledStructs {\n    struct Metadata {\n        string colorScheme; /// name of the color scheme\n        string geomSpec; /// name of the geometry specification\n        uint256 nPrisms; /// number of prisms made\n        string pseudoSymmetry; /// horizontal, vertical, diagonal\n        string wireframe; /// enabled or disabled\n        string inversion; /// enabled or disabled\n    }\n\n    struct RenderParams {\n        uint256[3][] faces; /// index of verts and colorss used for each face (triangle)\n        int256[3][] verts; /// x, y, z coordinates used in the geometry\n        int256[3][] cols; /// colors of each vert\n        int256[3] objPosition; /// position to place the object\n        int256 objScale; /// scalar for the object\n        int256[3][2] backgroundColor; /// color of the background (gradient)\n        LightingParams lightingParams; /// parameters for the lighting\n        bool perspCamera; /// true = perspective camera, false = orthographic\n        bool backfaceCulling; /// whether to implement backface culling (saves gas!)\n        bool invert; /// whether to invert colors in the final encoding stage\n        bool wireframe; /// whether to only render edges\n    }\n\n    /// struct for testing lighting\n    struct LightingParams {\n        bool applyLighting; /// true = apply lighting, false = don't apply lighting\n        int256 lightAmbiPower; /// power of the ambient light\n        int256 lightDiffPower; /// power of the diffuse light\n        int256 lightSpecPower; /// power of the specular light\n        uint256 inverseShininess; /// shininess of the material\n        int256[3] lightPos; /// position of the light\n        int256[3] lightColSpec; /// color of the specular light\n        int256[3] lightColDiff; /// color of the diffuse light\n        int256[3] lightColAmbi; /// color of the ambient light\n    }\n}\n"
    },
    "contracts/ShackledRenderer.sol": {
      "content": "// // SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.0;\n\nimport \"./ShackledCoords.sol\";\nimport \"./ShackledRasteriser.sol\";\nimport \"./ShackledUtils.sol\";\nimport \"./ShackledStructs.sol\";\n\nlibrary ShackledRenderer {\n    uint256 constant outputHeight = 512;\n    uint256 constant outputWidth = 512;\n\n    /** @dev take any geometry, render it, and return a bitmap image inside an SVG \n    this can be called to render the Shackled art collection (the output of ShackledGenesis.sol)\n    or any other custom made geometry\n\n    */\n    function render(\n        ShackledStructs.RenderParams memory renderParams,\n        int256 canvasDim,\n        bool returnSVG\n    ) public view returns (string memory) {\n        /// prepare the fragments\n        int256[12][3][] memory trisFragments = prepareGeometryForRender(\n            renderParams,\n            canvasDim\n        );\n\n        /// run Bresenham's line algorithm to rasterize the fragments\n        int256[12][] memory fragments = ShackledRasteriser.rasterise(\n            trisFragments,\n            canvasDim,\n            renderParams.wireframe\n        );\n\n        fragments = ShackledRasteriser.depthTesting(fragments, canvasDim);\n\n        if (renderParams.lightingParams.applyLighting) {\n            /// apply lighting (Blinn phong)\n            fragments = ShackledRasteriser.lightScene(\n                fragments,\n                renderParams.lightingParams\n            );\n        }\n\n        /// get the background\n        int256[5][] memory background = ShackledRasteriser.getBackground(\n            canvasDim,\n            renderParams.backgroundColor\n        );\n\n        /// place each fragment in an encoded bitmap\n        string memory encodedBitmap = ShackledUtils.getEncodedBitmap(\n            fragments,\n            background,\n            canvasDim,\n            renderParams.invert\n        );\n\n        if (returnSVG) {\n            /// insert the bitmap into an encoded svg (to be accepted by OpenSea)\n            return\n                ShackledUtils.getSVGContainer(\n                    encodedBitmap,\n                    canvasDim,\n                    outputHeight,\n                    outputWidth\n                );\n        } else {\n            return encodedBitmap;\n        }\n    }\n\n    /** @dev prepare the triangles and colors for rasterization\n     */\n    function prepareGeometryForRender(\n        ShackledStructs.RenderParams memory renderParams,\n        int256 canvasDim\n    ) internal view returns (int256[12][3][] memory) {\n        /// convert geometry and colors from PLY standard into Shackled format\n        /// create the final triangles and colors that will be rendered\n        /// by pulling the numbers out of the faces array\n        /// and using them to index into the verts and colors arrays\n        /// make copies of each coordinate and color\n        int256[3][3][] memory tris = new int256[3][3][](\n            renderParams.faces.length\n        );\n        int256[3][3][] memory trisCols = new int256[3][3][](\n            renderParams.faces.length\n        );\n\n        for (uint256 i = 0; i < renderParams.faces.length; i++) {\n            for (uint256 j = 0; j < 3; j++) {\n                for (uint256 k = 0; k < 3; k++) {\n                    /// copy the values from verts and cols arrays\n                    /// using the faces lookup array to index into them\n                    tris[i][j][k] = renderParams.verts[\n                        renderParams.faces[i][j]\n                    ][k];\n                    trisCols[i][j][k] = renderParams.cols[\n                        renderParams.faces[i][j]\n                    ][k];\n                }\n            }\n        }\n\n        /// convert the fragments from model to world space\n        int256[3][] memory vertsWorldSpace = ShackledCoords\n            .convertToWorldSpaceWithModelTransform(\n                tris,\n                renderParams.objScale,\n                renderParams.objPosition\n            );\n\n        /// convert the vertices back to triangles in world space\n        int256[3][3][] memory trisWorldSpace = ShackledUtils\n            .unflattenVertsToTris(vertsWorldSpace);\n\n        /// implement backface culling\n        if (renderParams.backfaceCulling) {\n            (trisWorldSpace, trisCols) = ShackledCoords.backfaceCulling(\n                trisWorldSpace,\n                trisCols\n            );\n        }\n\n        /// update vertsWorldSpace\n        vertsWorldSpace = ShackledUtils.flattenTris(trisWorldSpace);\n\n        /// convert the fragments from world to camera space\n        int256[3][] memory vertsCameraSpace = ShackledCoords\n            .convertToCameraSpaceViaVertexShader(\n                vertsWorldSpace,\n                canvasDim,\n                renderParams.perspCamera\n            );\n\n        /// convert the vertices back to triangles in camera space\n        int256[3][3][] memory trisCameraSpace = ShackledUtils\n            .unflattenVertsToTris(vertsCameraSpace);\n\n        int256[12][3][] memory trisFragments = ShackledRasteriser\n            .initialiseFragments(\n                trisCameraSpace,\n                trisWorldSpace,\n                trisCols,\n                canvasDim\n            );\n\n        return trisFragments;\n    }\n}\n"
    },
    "contracts/ShackledGenesis.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.0;\n\nimport \"./ShackledStructs.sol\";\nimport \"./ShackledMath.sol\";\nimport \"./Trigonometry.sol\";\n\n/* \ndir codes:\n    0: right-left\n    1: left-right\n    2: up-down\n    3: down-up\n\n sel codes:\n    0: random\n    1: biggest-first\n    2: smallest-first\n*/\n\nlibrary ShackledGenesis {\n    uint256 constant MAX_N_ATTEMPTS = 150; // max number of attempts to find a valid triangle\n    int256 constant ROT_XY_MAX = 12; // max amount of rotation in xy plane\n    int256 constant MAX_CANVAS_SIZE = 32000; // max size of canvas\n\n    /// a struct to hold vars in makeFacesVertsCols() to prevent StackTooDeep\n    struct FacesVertsCols {\n        uint256[3][] faces;\n        int256[3][] verts;\n        int256[3][] cols;\n        uint256 nextColIdx;\n        uint256 nextVertIdx;\n        uint256 nextFaceIdx;\n    }\n\n    /** @dev generate all parameters required for the shackled renderer from a seed hash\n    @param tokenHash a hash of the tokenId to be used in 'random' number generation\n    */\n    function generateGenesisPiece(bytes32 tokenHash)\n        external\n        view\n        returns (\n            ShackledStructs.RenderParams memory renderParams,\n            ShackledStructs.Metadata memory metadata\n        )\n    {\n        /// initial model paramaters\n        renderParams.objScale = 1;\n        renderParams.objPosition = [int256(0), 0, -2500];\n\n        /// generate the geometry and colors\n        (\n            FacesVertsCols memory vars,\n            ColorUtils.ColScheme memory colScheme,\n            GeomUtils.GeomSpec memory geomSpec,\n            GeomUtils.GeomVars memory geomVars\n        ) = generateGeometryAndColors(tokenHash, renderParams.objPosition);\n\n        renderParams.faces = vars.faces;\n        renderParams.verts = vars.verts;\n        renderParams.cols = vars.cols;\n\n        /// use a perspective camera\n        renderParams.perspCamera = true;\n\n        if (geomSpec.id == 3) {\n            renderParams.wireframe = false;\n            renderParams.backfaceCulling = true;\n        } else {\n            /// determine wireframe trait (5% chance)\n            if (GeomUtils.randN(tokenHash, \"wireframe\", 1, 100) > 95) {\n                renderParams.wireframe = true;\n                renderParams.backfaceCulling = false;\n            } else {\n                renderParams.wireframe = false;\n                renderParams.backfaceCulling = true;\n            }\n        }\n\n        if (\n            colScheme.id == 2 ||\n            colScheme.id == 3 ||\n            colScheme.id == 7 ||\n            colScheme.id == 8\n        ) {\n            renderParams.invert = false;\n        } else {\n            /// inversion (40% chance)\n            renderParams.invert =\n                GeomUtils.randN(tokenHash, \"invert\", 1, 10) > 6;\n        }\n\n        /// background colors\n        renderParams.backgroundColor = [\n            colScheme.bgColTop,\n            colScheme.bgColBottom\n        ];\n\n        /// lighting parameters\n        renderParams.lightingParams = ShackledStructs.LightingParams({\n            applyLighting: true,\n            lightAmbiPower: 0,\n            lightDiffPower: 2000,\n            lightSpecPower: 3000,\n            inverseShininess: 10,\n            lightColSpec: colScheme.lightCol,\n            lightColDiff: colScheme.lightCol,\n            lightColAmbi: colScheme.lightCol,\n            lightPos: [int256(-50), 0, 0]\n        });\n\n        /// create the metadata\n        metadata.colorScheme = colScheme.name;\n        metadata.geomSpec = geomSpec.name;\n        metadata.nPrisms = geomVars.nPrisms;\n\n        if (geomSpec.isSymmetricX) {\n            if (geomSpec.isSymmetricY) {\n                metadata.pseudoSymmetry = \"Diagonal\";\n            } else {\n                metadata.pseudoSymmetry = \"Horizontal\";\n            }\n        } else if (geomSpec.isSymmetricY) {\n            metadata.pseudoSymmetry = \"Vertical\";\n        } else {\n            metadata.pseudoSymmetry = \"Scattered\";\n        }\n\n        if (renderParams.wireframe) {\n            metadata.wireframe = \"Enabled\";\n        } else {\n            metadata.wireframe = \"Disabled\";\n        }\n\n        if (renderParams.invert) {\n            metadata.inversion = \"Enabled\";\n        } else {\n            metadata.inversion = \"Disabled\";\n        }\n    }\n\n    /** @dev run a generative algorithm to create 3d geometries (prisms) and colors to render with Shackled\n    also returns the faces and verts, which can be used to build a .obj file for in-browser rendering\n     */\n    function generateGeometryAndColors(\n        bytes32 tokenHash,\n        int256[3] memory objPosition\n    )\n        internal\n        view\n        returns (\n            FacesVertsCols memory vars,\n            ColorUtils.ColScheme memory colScheme,\n            GeomUtils.GeomSpec memory geomSpec,\n            GeomUtils.GeomVars memory geomVars\n        )\n    {\n        /// get this geom's spec\n        geomSpec = GeomUtils.generateSpec(tokenHash);\n\n        /// create the triangles\n        (\n            int256[3][3][] memory tris,\n            int256[] memory zFronts,\n            int256[] memory zBacks\n        ) = create2dTris(tokenHash, geomSpec);\n\n        /// prismify\n        geomVars = prismify(tokenHash, tris, zFronts, zBacks);\n\n        /// generate colored faces\n        /// get a color scheme\n        colScheme = ColorUtils.getScheme(tokenHash, tris);\n\n        /// get faces, verts and colors\n        vars = makeFacesVertsCols(\n            tokenHash,\n            tris,\n            geomVars,\n            colScheme,\n            objPosition\n        );\n    }\n\n    /** @dev 'randomly' create an array of 2d triangles that will define each eventual 3d prism  */\n    function create2dTris(bytes32 tokenHash, GeomUtils.GeomSpec memory geomSpec)\n        internal\n        view\n        returns (\n            int256[3][3][] memory, /// tris\n            int256[] memory, /// zFronts\n            int256[] memory /// zBacks\n        )\n    {\n        /// initiate vars that will be used to store the triangle info\n        GeomUtils.TriVars memory triVars;\n        triVars.tris = new int256[3][3][]((geomSpec.maxPrisms + 5) * 2);\n        triVars.zFronts = new int256[]((geomSpec.maxPrisms + 5) * 2);\n        triVars.zBacks = new int256[]((geomSpec.maxPrisms + 5) * 2);\n\n        /// 'randomly' initiate the starting radius\n        int256 initialSize;\n\n        if (geomSpec.forceInitialSize == 0) {\n            initialSize = GeomUtils.randN(\n                tokenHash,\n                \"size\",\n                geomSpec.minTriRad,\n                geomSpec.maxTriRad\n            );\n        } else {\n            initialSize = geomSpec.forceInitialSize;\n        }\n\n        /// 50% chance of 30deg rotation, 50% chance of 210deg rotation\n        int256 initialRot = GeomUtils.randN(tokenHash, \"rot\", 0, 1) == 0\n            ? int256(30)\n            : int256(210);\n\n        /// create the first triangle\n        int256[3][3] memory currentTri = GeomUtils.makeTri(\n            [int256(0), 0, 0],\n            initialSize,\n            initialRot\n        );\n\n        /// save it\n        triVars.tris[0] = currentTri;\n\n        /// calculate the first triangle's zs\n        triVars.zBacks[0] = GeomUtils.calculateZ(\n            currentTri,\n            tokenHash,\n            triVars.nextTriIdx,\n            geomSpec,\n            false\n        );\n        triVars.zFronts[0] = GeomUtils.calculateZ(\n            currentTri,\n            tokenHash,\n            triVars.nextTriIdx,\n            geomSpec,\n            true\n        );\n\n        /// get the position to add the next triangle\n\n        if (geomSpec.isSymmetricY) {\n            /// override the first tri, since it is not symmetrical\n            /// but temporarily save it as its needed as a reference tri\n            triVars.nextTriIdx = 0;\n        } else {\n            triVars.nextTriIdx = 1;\n        }\n\n        /// make new triangles\n        for (uint256 i = 0; i < MAX_N_ATTEMPTS; i++) {\n            /// get a reference to a previous triangle\n            uint256 refIdx = uint256(\n                GeomUtils.randN(\n                    tokenHash,\n                    string(abi.encodePacked(\"refIdx\", i)),\n                    0,\n                    int256(triVars.nextTriIdx) - 1\n                )\n            );\n\n            /// ensure that the 'random' number generated is different in each while loop\n            /// by incorporating the nAttempts and nextTriIdx into the seed modifier\n            if (\n                GeomUtils.randN(\n                    tokenHash,\n                    string(abi.encodePacked(\"adj\", i, triVars.nextTriIdx)),\n                    0,\n                    100\n                ) <= geomSpec.probVertOpp\n            ) {\n                /// attempt to recursively add vertically opposite triangles\n                triVars = GeomUtils.makeVerticallyOppositeTriangles(\n                    tokenHash,\n                    i, // attemptNum (to create unique random seeds)\n                    refIdx,\n                    triVars,\n                    geomSpec,\n                    -1,\n                    -1,\n                    0 // depth (to create unique random seeds within recursion)\n                );\n            } else {\n                /// attempt to recursively add adjacent triangles\n                triVars = GeomUtils.makeAdjacentTriangles(\n                    tokenHash,\n                    i, // attemptNum (to create unique random seeds)\n                    refIdx,\n                    triVars,\n                    geomSpec,\n                    -1,\n                    -1,\n                    0 // depth (to create unique random seeds within recursion)\n                );\n            }\n\n            /// can't have this many triangles\n            if (triVars.nextTriIdx >= geomSpec.maxPrisms) {\n                break;\n            }\n        }\n\n        /// clip all the arrays to the actual number of triangles\n        triVars.tris = GeomUtils.clipTrisToLength(\n            triVars.tris,\n            triVars.nextTriIdx\n        );\n        triVars.zBacks = GeomUtils.clipZsToLength(\n            triVars.zBacks,\n            triVars.nextTriIdx\n        );\n        triVars.zFronts = GeomUtils.clipZsToLength(\n            triVars.zFronts,\n            triVars.nextTriIdx\n        );\n\n        return (triVars.tris, triVars.zBacks, triVars.zFronts);\n    }\n\n    /** @dev prismify the initial 2d triangles output */\n    function prismify(\n        bytes32 tokenHash,\n        int256[3][3][] memory tris,\n        int256[] memory zFronts,\n        int256[] memory zBacks\n    ) internal view returns (GeomUtils.GeomVars memory) {\n        /// initialise a struct to hold the vars we need\n        GeomUtils.GeomVars memory geomVars;\n\n        /// record the num of prisms\n        geomVars.nPrisms = uint256(tris.length);\n\n        /// figure out what point to put in the middle\n        geomVars.extents = GeomUtils.getExtents(tris); // mins[3], maxs[3]\n\n        /// scale the tris to fit in the canvas\n        geomVars.width = geomVars.extents[1][0] - geomVars.extents[0][0];\n        geomVars.height = geomVars.extents[1][1] - geomVars.extents[0][1];\n        geomVars.extent = ShackledMath.max(geomVars.width, geomVars.height);\n        geomVars.scaleNum = 2000;\n\n        /// multiple all tris by the scale, then divide by the extent\n        for (uint256 i = 0; i < tris.length; i++) {\n            tris[i] = [\n                ShackledMath.vector3DivScalar(\n                    ShackledMath.vector3MulScalar(\n                        tris[i][0],\n                        geomVars.scaleNum\n                    ),\n                    geomVars.extent\n                ),\n                ShackledMath.vector3DivScalar(\n                    ShackledMath.vector3MulScalar(\n                        tris[i][1],\n                        geomVars.scaleNum\n                    ),\n                    geomVars.extent\n                ),\n                ShackledMath.vector3DivScalar(\n                    ShackledMath.vector3MulScalar(\n                        tris[i][2],\n                        geomVars.scaleNum\n                    ),\n                    geomVars.extent\n                )\n            ];\n        }\n\n        /// we may like to do some rotation, this means we get the shapes in the middle\n        /// arrow up, down, left, right\n\n        // 50% chance of x, y rotation being positive or negative\n        geomVars.rotX = (GeomUtils.randN(tokenHash, \"rotX\", 0, 1) == 0)\n            ? ROT_XY_MAX\n            : -ROT_XY_MAX;\n\n        geomVars.rotY = (GeomUtils.randN(tokenHash, \"rotY\", 0, 1) == 0)\n            ? ROT_XY_MAX\n            : -ROT_XY_MAX;\n\n        // 50% chance to z rotation being 0 or 30\n        geomVars.rotZ = (GeomUtils.randN(tokenHash, \"rotZ\", 0, 1) == 0)\n            ? int256(0)\n            : int256(30);\n\n        /// rotate all tris around facing (z) axis\n        for (uint256 i = 0; i < tris.length; i++) {\n            tris[i] = GeomUtils.triRotHelp(2, tris[i], geomVars.rotZ);\n        }\n\n        geomVars.trisBack = GeomUtils.copyTris(tris);\n        geomVars.trisFront = GeomUtils.copyTris(tris);\n\n        /// front triangles need to come forward, back triangles need to go back\n        for (uint256 i = 0; i < tris.length; i++) {\n            for (uint256 j = 0; j < 3; j++) {\n                for (uint256 k = 0; k < 3; k++) {\n                    if (k == 2) {\n                        /// get the z values (make sure the scale is applied)\n                        geomVars.trisFront[i][j][k] = zFronts[i];\n                        geomVars.trisBack[i][j][k] = zBacks[i];\n                    } else {\n                        /// copy the x and y values\n                        geomVars.trisFront[i][j][k] = tris[i][j][k];\n                        geomVars.trisBack[i][j][k] = tris[i][j][k];\n                    }\n                }\n            }\n        }\n\n        /// rotate - order is import here (must come after prism splitting, and is dependant on z rotation)\n        if (geomVars.rotZ == 0) {\n            /// x then y\n            (geomVars.trisBack, geomVars.trisFront) = GeomUtils.triBfHelp(\n                0,\n                geomVars.trisBack,\n                geomVars.trisFront,\n                geomVars.rotX\n            );\n            (geomVars.trisBack, geomVars.trisFront) = GeomUtils.triBfHelp(\n                1,\n                geomVars.trisBack,\n                geomVars.trisFront,\n                geomVars.rotY\n            );\n        } else {\n            /// y then x\n            (geomVars.trisBack, geomVars.trisFront) = GeomUtils.triBfHelp(\n                1,\n                geomVars.trisBack,\n                geomVars.trisFront,\n                geomVars.rotY\n            );\n            (geomVars.trisBack, geomVars.trisFront) = GeomUtils.triBfHelp(\n                0,\n                geomVars.trisBack,\n                geomVars.trisFront,\n                geomVars.rotX\n            );\n        }\n\n        return geomVars;\n    }\n\n    /** @dev create verts and faces out of the geom and get their colors */\n    function makeFacesVertsCols(\n        bytes32 tokenHash,\n        int256[3][3][] memory tris,\n        GeomUtils.GeomVars memory geomVars,\n        ColorUtils.ColScheme memory scheme,\n        int256[3] memory objPosition\n    ) internal view returns (FacesVertsCols memory vars) {\n        /// the tris defined thus far are those at the front of each prism\n        /// we need to calculate how many tris will then be in the final prisms (3 sides have 2 tris each, plus the front tri, = 7)\n        uint256 numTrisPrisms = tris.length * 7; /// 7 tris per 3D prism (not inc. back)\n\n        vars.faces = new uint256[3][](numTrisPrisms); /// array that holds indexes of verts needed to make each final triangle\n        vars.verts = new int256[3][](tris.length * 6); /// the vertices for all final triangles\n        vars.cols = new int256[3][](tris.length * 6); /// 1 col per final tri\n        vars.nextColIdx = 0;\n        vars.nextVertIdx = 0;\n        vars.nextFaceIdx = 0;\n\n        /// get some number of highlight triangles\n        geomVars.hltPrismIdx = ColorUtils.getHighlightPrismIdxs(\n            tris,\n            tokenHash,\n            scheme.hltNum,\n            scheme.hltVarCode,\n            scheme.hltSelCode\n        );\n\n        int256[3][2] memory frontExtents = GeomUtils.getExtents(\n            geomVars.trisFront\n        ); // mins[3], maxs[3]\n        int256[3][2] memory backExtents = GeomUtils.getExtents(\n            geomVars.trisBack\n        ); // mins[3], maxs[3]\n        int256[3][2] memory meanExtents = [\n            [\n                (frontExtents[0][0] + backExtents[0][0]) / 2,\n                (frontExtents[0][1] + backExtents[0][1]) / 2,\n                (frontExtents[0][2] + backExtents[0][2]) / 2\n            ],\n            [\n                (frontExtents[1][0] + backExtents[1][0]) / 2,\n                (frontExtents[1][1] + backExtents[1][1]) / 2,\n                (frontExtents[1][2] + backExtents[1][2]) / 2\n            ]\n        ];\n\n        /// apply translations such that we're at the center\n        geomVars.center = ShackledMath.vector3DivScalar(\n            ShackledMath.vector3Add(meanExtents[0], meanExtents[1]),\n            2\n        );\n\n        geomVars.center[2] = 0;\n\n        for (uint256 i = 0; i < tris.length; i++) {\n            int256[3][6] memory prismCols;\n            ColorUtils.SubScheme memory subScheme = ColorUtils.inArray(\n                geomVars.hltPrismIdx,\n                i\n            )\n                ? scheme.hlt\n                : scheme.pri;\n\n            /// get the colors for the prism\n            prismCols = ColorUtils.getColForPrism(\n                tokenHash,\n                geomVars.trisFront[i],\n                subScheme,\n                meanExtents\n            );\n\n            /// save the colors (6 per prism)\n            for (uint256 j = 0; j < 6; j++) {\n                vars.cols[vars.nextColIdx] = prismCols[j];\n                vars.nextColIdx++;\n            }\n\n            /// add 3 points (back)\n            for (uint256 j = 0; j < 3; j++) {\n                vars.verts[vars.nextVertIdx] = [\n                    geomVars.trisBack[i][j][0],\n                    geomVars.trisBack[i][j][1],\n                    -geomVars.trisBack[i][j][2] /// flip the Z\n                ];\n                vars.nextVertIdx += 1;\n            }\n\n            /// add 3 points (front)\n            for (uint256 j = 0; j < 3; j++) {\n                vars.verts[vars.nextVertIdx] = [\n                    geomVars.trisFront[i][j][0],\n                    geomVars.trisFront[i][j][1],\n                    -geomVars.trisFront[i][j][2] /// flip the Z\n                ];\n                vars.nextVertIdx += 1;\n            }\n\n            /// create the faces\n            uint256 ii = i * 6;\n\n            /// the orders are all important here (back is not visible)\n\n            /// front\n            vars.faces[vars.nextFaceIdx] = [ii + 3, ii + 4, ii + 5];\n\n            /// side 1 flat\n            vars.faces[vars.nextFaceIdx + 1] = [ii + 4, ii + 3, ii + 0];\n            vars.faces[vars.nextFaceIdx + 2] = [ii + 0, ii + 1, ii + 4];\n\n            /// side 2 rhs\n            vars.faces[vars.nextFaceIdx + 3] = [ii + 5, ii + 4, ii + 1];\n            vars.faces[vars.nextFaceIdx + 4] = [ii + 1, ii + 2, ii + 5];\n\n            /// side 3 lhs\n            vars.faces[vars.nextFaceIdx + 5] = [ii + 2, ii + 0, ii + 3];\n            vars.faces[vars.nextFaceIdx + 6] = [ii + 3, ii + 5, ii + 2];\n\n            vars.nextFaceIdx += 7;\n        }\n\n        for (uint256 i = 0; i < vars.verts.length; i++) {\n            vars.verts[i] = ShackledMath.vector3Sub(\n                vars.verts[i],\n                geomVars.center\n            );\n        }\n    }\n}\n\n/** Hold some functions useful for coloring in the prisms  */\nlibrary ColorUtils {\n    /// a struct to hold vars within the main color scheme\n    /// which can be used for both highlight (hlt) an primar (pri) colors\n    struct SubScheme {\n        int256[3] colA; // either the entire solid color, or one side of the gradient\n        int256[3] colB; // either the same as A (solid), or different (gradient)\n        bool isInnerGradient; // whether the gradient spans the triangle (true) or canvas (false)\n        int256 dirCode; // which direction should the gradient be interpolated\n        int256[3] jiggle; // how much to randomly jiffle the color space\n        bool isJiggleInner; // does each inner vertiex get a jiggle, or is it triangle wide\n        int256[3] backShift; // how much to take off the back face colors\n    }\n\n    /// a struct for each piece's color scheme\n    struct ColScheme {\n        string name;\n        uint256 id;\n        /// the primary color\n        SubScheme pri;\n        /// the highlight color\n        SubScheme hlt;\n        /// remaining parameters (not common to hlt and pri)\n        uint256 hltNum;\n        int256 hltSelCode;\n        int256 hltVarCode;\n        /// other scene colors\n        int256[3] lightCol;\n        int256[3] bgColTop;\n        int256[3] bgColBottom;\n    }\n\n    /** @dev calculate the color of a prism\n    returns an array of 6 colors (for each vertex of a prism) \n     */\n    function getColForPrism(\n        bytes32 tokenHash,\n        int256[3][3] memory triFront,\n        SubScheme memory subScheme,\n        int256[3][2] memory extents\n    ) external view returns (int256[3][6] memory cols) {\n        if (\n            subScheme.colA[0] == subScheme.colB[0] &&\n            subScheme.colA[1] == subScheme.colB[1] &&\n            subScheme.colA[2] == subScheme.colB[2]\n        ) {\n            /// just use color A (as B is the same, so there's no gradient)\n            for (uint256 i = 0; i < 6; i++) {\n                cols[i] = copyColor(subScheme.colA);\n            }\n        } else {\n            /// get the colors according to the direction code\n            int256[3][3] memory triFrontCopy = GeomUtils.copyTri(triFront);\n            int256[3][3] memory frontTriCols = applyDirHelp(\n                triFrontCopy,\n                subScheme.colA,\n                subScheme.colB,\n                subScheme.dirCode,\n                subScheme.isInnerGradient,\n                extents\n            );\n\n            /// write in the same front colors as the back colors\n            for (uint256 i = 0; i < 3; i++) {\n                cols[i] = copyColor(frontTriCols[i]);\n                cols[i + 3] = copyColor(frontTriCols[i]);\n            }\n        }\n\n        /// perform the jiggling\n        int256[3] memory jiggle;\n\n        if (!subScheme.isJiggleInner) {\n            /// get one set of jiggle values to use for all colors created\n            jiggle = getJiggle(subScheme.jiggle, tokenHash, 0);\n        }\n\n        for (uint256 i = 0; i < 6; i++) {\n            if (subScheme.isJiggleInner) {\n                // jiggle again per col to create\n                // use the last jiggle res in the random seed to get diff jiggles for each prism\n                jiggle = getJiggle(subScheme.jiggle, tokenHash, jiggle[0]);\n            }\n\n            /// convert to hsv prior to jiggle\n            int256[3] memory colHsv = rgb2hsv(\n                cols[i][0],\n                cols[i][1],\n                cols[i][2]\n            );\n\n            /// add the jiggle to the colors in hsv space\n            colHsv[0] = colHsv[0] + jiggle[0];\n            colHsv[1] = colHsv[1] + jiggle[1];\n            colHsv[2] = colHsv[2] + jiggle[2];\n\n            /// convert back to rgb\n            int256[3] memory colRgb = hsv2rgb(colHsv[0], colHsv[1], colHsv[2]);\n            cols[i][0] = colRgb[0];\n            cols[i][1] = colRgb[1];\n            cols[i][2] = colRgb[2];\n        }\n\n        /// perform back shifting\n        for (uint256 i = 0; i < 3; i++) {\n            cols[i][0] -= subScheme.backShift[0];\n            cols[i][1] -= subScheme.backShift[1];\n            cols[i][2] -= subScheme.backShift[2];\n        }\n\n        /// ensure that we're in 255 range\n        for (uint256 i = 0; i < 6; i++) {\n            cols[i][0] = ShackledMath.max(0, ShackledMath.min(255, cols[i][0]));\n            cols[i][1] = ShackledMath.max(0, ShackledMath.min(255, cols[i][1]));\n            cols[i][2] = ShackledMath.max(0, ShackledMath.min(255, cols[i][2]));\n        }\n\n        return cols;\n    }\n\n    /** @dev roll a schemeId given a list of weightings */\n    function getSchemeId(bytes32 tokenHash, int256[2][10] memory weightings)\n        internal\n        view\n        returns (uint256)\n    {\n        int256 n = GeomUtils.randN(\n            tokenHash,\n            \"schemedId\",\n            weightings[0][0],\n            weightings[weightings.length - 1][1]\n        );\n        for (uint256 i = 0; i < weightings.length; i++) {\n            if (weightings[i][0] <= n && n <= weightings[i][1]) {\n                return i;\n            }\n        }\n    }\n\n    /** @dev make a copy of a color */\n    function copyColor(int256[3] memory c)\n        internal\n        view\n        returns (int256[3] memory)\n    {\n        return [c[0], c[1], c[2]];\n    }\n\n    /** @dev get a color scheme */\n    function getScheme(bytes32 tokenHash, int256[3][3][] memory tris)\n        external\n        view\n        returns (ColScheme memory colScheme)\n    {\n        /// 'randomly' select 1 of the 9 schemes\n        uint256 schemeId = getSchemeId(\n            tokenHash,\n            [\n                [int256(0), 1500],\n                [int256(1500), 2500],\n                [int256(2500), 3000],\n                [int256(3000), 3100],\n                [int256(3100), 5500],\n                [int256(5500), 6000],\n                [int256(6000), 6500],\n                [int256(6500), 8000],\n                [int256(8000), 9500],\n                [int256(9500), 10000]\n            ]\n        );\n\n        // int256 schemeId = GeomUtils.randN(tokenHash, \"schemeID\", 1, 9);\n\n        /// define the color scheme to use for this piece\n        /// all arrays are on the order of 1000 to remain accurate as integers\n        /// will require division by 1000 later when in use\n\n        if (schemeId == 0) {\n            /// plain / beigey with a highlight, and a matching background colour\n            colScheme = ColScheme({\n                name: \"Accentuated\",\n                id: schemeId,\n                pri: SubScheme({\n                    colA: [int256(60), 30, 25],\n                    colB: [int256(205), 205, 205],\n                    isInnerGradient: false,\n                    dirCode: 0,\n                    jiggle: [int256(13), 13, 13],\n                    isJiggleInner: false,\n                    backShift: [int256(205), 205, 205]\n                }),\n                hlt: SubScheme({\n                    colA: [int256(255), 0, 0],\n                    colB: [int256(255), 50, 0],\n                    isInnerGradient: true,\n                    dirCode: GeomUtils.randN(tokenHash, \"hltDir\", 0, 3), /// get a 'random' dir code\n                    jiggle: [int256(50), 50, 50],\n                    isJiggleInner: false,\n                    backShift: [int256(205), 205, 205]\n                }),\n                hltNum: uint256(GeomUtils.randN(tokenHash, \"hltNum\", 3, 5)), /// get a 'random' number of highlights between 3 and 5\n                hltSelCode: 1, /// 'biggest' selection code\n                hltVarCode: 0,\n                lightCol: [int256(255), 255, 255],\n                bgColTop: [int256(0), 0, 0],\n                bgColBottom: [int256(1), 1, 1]\n            });\n        } else if (schemeId == 1) {\n            /// neutral overall\n            colScheme = ColScheme({\n                name: \"Emergent\",\n                id: schemeId,\n                pri: SubScheme({\n                    colA: [int256(0), 77, 255],\n                    colB: [int256(0), 255, 25],\n                    isInnerGradient: true,\n                    dirCode: GeomUtils.randN(tokenHash, \"priDir\", 2, 3), /// get a 'random' dir code (2 or 3)\n                    jiggle: [int256(60), 60, 60],\n                    isJiggleInner: false,\n                    backShift: [int256(-255), -255, -255]\n                }),\n                hlt: SubScheme({\n                    colA: [int256(0), 77, 255],\n                    colB: [int256(0), 255, 25],\n                    isInnerGradient: true,\n                    dirCode: 3,\n                    jiggle: [int256(60), 60, 60],\n                    isJiggleInner: false,\n                    backShift: [int256(-255), -255, -255]\n                }),\n                hltNum: uint256(GeomUtils.randN(tokenHash, \"hltNum\", 4, 6)), /// get a 'random' number of highlights between 4 and 6\n                hltSelCode: 2, /// smallest-first\n                hltVarCode: 0,\n                lightCol: [int256(255), 255, 255],\n                bgColTop: [int256(255), 255, 255],\n                bgColBottom: [int256(255), 255, 255]\n            });\n        } else if (schemeId == 2) {\n            /// vaporwave\n            int256 maxHighlights = ShackledMath.max(0, int256(tris.length) - 8);\n            int256 minHighlights = ShackledMath.max(\n                0,\n                int256(maxHighlights) - 2\n            );\n            colScheme = ColScheme({\n                name: \"Sunset\",\n                id: schemeId,\n                pri: SubScheme({\n                    colA: [int256(179), 0, 179],\n                    colB: [int256(0), 0, 255],\n                    isInnerGradient: false,\n                    dirCode: 2, /// up-down\n                    jiggle: [int256(25), 25, 25],\n                    isJiggleInner: true,\n                    backShift: [int256(127), 127, 127]\n                }),\n                hlt: SubScheme({\n                    colA: [int256(0), 0, 0],\n                    colB: [int256(0), 0, 0],\n                    isInnerGradient: true,\n                    dirCode: 3, /// down-up\n                    jiggle: [int256(15), 0, 15],\n                    isJiggleInner: true,\n                    backShift: [int256(0), 0, 0]\n                }),\n                hltNum: uint256(\n                    GeomUtils.randN(\n                        tokenHash,\n                        \"hltNum\",\n                        minHighlights,\n                        maxHighlights\n                    )\n                ), /// get a 'random' number of highlights between minHighlights and maxHighlights\n                hltSelCode: 2, /// smallest-first\n                hltVarCode: 0,\n                lightCol: [int256(255), 255, 255],\n                bgColTop: [int256(250), 103, 247],\n                bgColBottom: [int256(157), 104, 250]\n            });\n        } else if (schemeId == 3) {\n            /// gold\n            int256 priDirCode = GeomUtils.randN(tokenHash, \"pirDir\", 0, 1); /// get a 'random' dir code (0 or 1)\n            colScheme = ColScheme({\n                name: \"Stone & Gold\",\n                id: schemeId,\n                pri: SubScheme({\n                    colA: [int256(50), 50, 50],\n                    colB: [int256(100), 100, 100],\n                    isInnerGradient: true,\n                    dirCode: priDirCode,\n                    jiggle: [int256(10), 10, 10],\n                    isJiggleInner: true,\n                    backShift: [int256(128), 128, 128]\n                }),\n                hlt: SubScheme({\n                    colA: [int256(255), 197, 0],\n                    colB: [int256(255), 126, 0],\n                    isInnerGradient: true,\n                    dirCode: priDirCode,\n                    jiggle: [int256(0), 0, 0],\n                    isJiggleInner: false,\n                    backShift: [int256(64), 64, 64]\n                }),\n                hltNum: 1,\n                hltSelCode: 1, /// biggest-first\n                hltVarCode: 0,\n                lightCol: [int256(255), 255, 255],\n                bgColTop: [int256(0), 0, 0],\n                bgColBottom: [int256(0), 0, 0]\n            });\n        } else if (schemeId == 4) {\n            /// random pastel colors (sometimes black)\n            /// for primary colors,\n            /// follow the pattern of making a new and unique seedHash for each variable\n            /// so they are independant\n            /// seed modifiers = pri/hlt + a/b + /r/g/b\n            colScheme = ColScheme({\n                name: \"Denatured\",\n                id: schemeId,\n                pri: SubScheme({\n                    colA: [\n                        GeomUtils.randN(tokenHash, \"PAR\", 25, 255),\n                        GeomUtils.randN(tokenHash, \"PAG\", 25, 255),\n                        GeomUtils.randN(tokenHash, \"PAB\", 25, 255)\n                    ],\n                    colB: [\n                        GeomUtils.randN(tokenHash, \"PBR\", 25, 255),\n                        GeomUtils.randN(tokenHash, \"PBG\", 25, 255),\n                        GeomUtils.randN(tokenHash, \"PBB\", 25, 255)\n                    ],\n                    isInnerGradient: false,\n                    dirCode: GeomUtils.randN(tokenHash, \"pri\", 0, 1), /// get a 'random' dir code (0 or 1)\n                    jiggle: [int256(0), 0, 0],\n                    isJiggleInner: false,\n                    backShift: [int256(127), 127, 127]\n                }),\n                hlt: SubScheme({\n                    colA: [\n                        GeomUtils.randN(tokenHash, \"HAR\", 25, 255),\n                        GeomUtils.randN(tokenHash, \"HAG\", 25, 255),\n                        GeomUtils.randN(tokenHash, \"HAB\", 25, 255)\n                    ],\n                    colB: [\n                        GeomUtils.randN(tokenHash, \"HBR\", 25, 255),\n                        GeomUtils.randN(tokenHash, \"HBG\", 25, 255),\n                        GeomUtils.randN(tokenHash, \"HBB\", 25, 255)\n                    ],\n                    isInnerGradient: false,\n                    dirCode: GeomUtils.randN(tokenHash, \"hlt\", 0, 1), /// get a 'random' dir code (0 or 1)\n                    jiggle: [int256(0), 0, 0],\n                    isJiggleInner: false,\n                    backShift: [int256(127), 127, 127]\n                }),\n                hltNum: tris.length / 2,\n                hltSelCode: 2, /// smallest-first\n                hltVarCode: 0,\n                lightCol: [int256(255), 255, 255],\n                bgColTop: [int256(3), 3, 3],\n                bgColBottom: [int256(0), 0, 0]\n            });\n        } else if (schemeId == 5) {\n            /// inter triangle random colors ('chameleonic')\n\n            /// pri dir code is anything (0, 1, 2, 3)\n            /// hlt dir code is oppose to pri dir code (rl <-> lr, up <-> du)\n            int256 priDirCode = GeomUtils.randN(tokenHash, \"pri\", 0, 3); /// get a 'random' dir code (0 or 1)\n            int256 hltDirCode;\n            if (priDirCode == 0 || priDirCode == 1) {\n                hltDirCode = priDirCode == 0 ? int256(1) : int256(0);\n            } else {\n                hltDirCode = priDirCode == 2 ? int256(3) : int256(2);\n            }\n            /// for primary colors,\n            /// follow the pattern of making a new and unique seedHash for each variable\n            /// so they are independant\n            /// seed modifiers = pri/hlt + a/b + /r/g/b\n            colScheme = ColScheme({\n                name: \"Chameleonic\",\n                id: schemeId,\n                pri: SubScheme({\n                    colA: [\n                        GeomUtils.randN(tokenHash, \"PAR\", 25, 255),\n                        GeomUtils.randN(tokenHash, \"PAG\", 25, 255),\n                        GeomUtils.randN(tokenHash, \"PAB\", 25, 255)\n                    ],\n                    colB: [\n                        GeomUtils.randN(tokenHash, \"PBR\", 25, 255),\n                        GeomUtils.randN(tokenHash, \"PBG\", 25, 255),\n                        GeomUtils.randN(tokenHash, \"PBB\", 25, 255)\n                    ],\n                    isInnerGradient: true,\n                    dirCode: priDirCode,\n                    jiggle: [int256(25), 25, 25],\n                    isJiggleInner: true,\n                    backShift: [int256(0), 0, 0]\n                }),\n                hlt: SubScheme({\n                    colA: [\n                        GeomUtils.randN(tokenHash, \"HAR\", 25, 255),\n                        GeomUtils.randN(tokenHash, \"HAG\", 25, 255),\n                        GeomUtils.randN(tokenHash, \"HAB\", 25, 255)\n                    ],\n                    colB: [\n                        GeomUtils.randN(tokenHash, \"HBR\", 25, 255),\n                        GeomUtils.randN(tokenHash, \"HBG\", 25, 255),\n                        GeomUtils.randN(tokenHash, \"HBB\", 25, 255)\n                    ],\n                    isInnerGradient: true,\n                    dirCode: hltDirCode,\n                    jiggle: [int256(255), 255, 255],\n                    isJiggleInner: true,\n                    backShift: [int256(205), 205, 205]\n                }),\n                hltNum: 12,\n                hltSelCode: 2, /// smallest-first\n                hltVarCode: 0,\n                lightCol: [int256(255), 255, 255],\n                bgColTop: [int256(3), 3, 3],\n                bgColBottom: [int256(0), 0, 0]\n            });\n        } else if (schemeId == 6) {\n            /// each prism is a different colour with some randomisation\n\n            /// pri dir code is anything (0, 1, 2, 3)\n            /// hlt dir code is oppose to pri dir code (rl <-> lr, up <-> du)\n            int256 priDirCode = GeomUtils.randN(tokenHash, \"pri\", 0, 1); /// get a 'random' dir code (0 or 1)\n            int256 hltDirCode;\n            if (priDirCode == 0 || priDirCode == 1) {\n                hltDirCode = priDirCode == 0 ? int256(1) : int256(0);\n            } else {\n                hltDirCode = priDirCode == 2 ? int256(3) : int256(2);\n            }\n            /// for primary colors,\n            /// follow the pattern of making a new and unique seedHash for each variable\n            /// so they are independant\n            /// seed modifiers = pri/hlt + a/b + /r/g/b\n            colScheme = ColScheme({\n                name: \"Gradiated\",\n                id: schemeId,\n                pri: SubScheme({\n                    colA: [\n                        GeomUtils.randN(tokenHash, \"PAR\", 25, 255),\n                        GeomUtils.randN(tokenHash, \"PAG\", 25, 255),\n                        GeomUtils.randN(tokenHash, \"PAB\", 25, 255)\n                    ],\n                    colB: [\n                        GeomUtils.randN(tokenHash, \"PBR\", 25, 255),\n                        GeomUtils.randN(tokenHash, \"PBG\", 25, 255),\n                        GeomUtils.randN(tokenHash, \"PBB\", 25, 255)\n                    ],\n                    isInnerGradient: false,\n                    dirCode: priDirCode,\n                    jiggle: [int256(127), 127, 127],\n                    isJiggleInner: false,\n                    backShift: [int256(205), 205, 205]\n                }),\n                hlt: SubScheme({\n                    colA: [\n                        GeomUtils.randN(tokenHash, \"HAR\", 25, 255),\n                        GeomUtils.randN(tokenHash, \"HAG\", 25, 255),\n                        GeomUtils.randN(tokenHash, \"HAB\", 25, 255)\n                    ],\n                    colB: [\n                        GeomUtils.randN(tokenHash, \"HBR\", 25, 255),\n                        GeomUtils.randN(tokenHash, \"HBG\", 25, 255),\n                        GeomUtils.randN(tokenHash, \"HBB\", 25, 255)\n                    ],\n                    isInnerGradient: false,\n                    dirCode: hltDirCode,\n                    jiggle: [int256(127), 127, 127],\n                    isJiggleInner: false,\n                    backShift: [int256(205), 205, 205]\n                }),\n                hltNum: 12, /// get a 'random' number of highlights between 4 and 6\n                hltSelCode: 2, /// smallest-first\n                hltVarCode: 0,\n                lightCol: [int256(255), 255, 255],\n                bgColTop: [int256(3), 3, 3],\n                bgColBottom: [int256(0), 0, 0]\n            });\n        } else if (schemeId == 7) {\n            /// feature colour on white primary, with feature colour background\n            /// calculate the feature color in hsv\n            int256[3] memory hsv = [\n                GeomUtils.randN(tokenHash, \"hsv\", 0, 255),\n                230,\n                255\n            ];\n            int256[3] memory hltColA = hsv2rgb(hsv[0], hsv[1], hsv[2]);\n\n            colScheme = ColScheme({\n                name: \"Vivid Alabaster\",\n                id: schemeId,\n                pri: SubScheme({\n                    colA: [int256(255), 255, 255],\n                    colB: [int256(255), 255, 255],\n                    isInnerGradient: true,\n                    dirCode: GeomUtils.randN(tokenHash, \"pri\", 0, 3), /// get a 'random' dir code (0 or 1)\n                    jiggle: [int256(25), 25, 25],\n                    isJiggleInner: true,\n                    backShift: [int256(127), 127, 127]\n                }),\n                hlt: SubScheme({\n                    colA: hltColA,\n                    colB: copyColor(hltColA), /// same as A\n                    isInnerGradient: true,\n                    dirCode: GeomUtils.randN(tokenHash, \"pri\", 0, 3), /// same as priDirCode\n                    jiggle: [int256(25), 50, 50],\n                    isJiggleInner: true,\n                    backShift: [int256(180), 180, 180]\n                }),\n                hltNum: tris.length % 2 == 1\n                    ? (tris.length / 2) + 1\n                    : tris.length / 2,\n                hltSelCode: GeomUtils.randN(tokenHash, \"hltSel\", 0, 2),\n                hltVarCode: 0,\n                lightCol: [int256(255), 255, 255],\n                bgColTop: hsv2rgb(\n                    ShackledMath.mod((hsv[0] - 9), 255),\n                    105,\n                    255\n                ),\n                bgColBottom: hsv2rgb(\n                    ShackledMath.mod((hsv[0] + 9), 255),\n                    105,\n                    255\n                )\n            });\n        } else if (schemeId == 8) {\n            /// feature colour on black primary, with feature colour background\n            /// calculate the feature color in hsv\n            int256[3] memory hsv = [\n                GeomUtils.randN(tokenHash, \"hsv\", 0, 255),\n                245,\n                190\n            ];\n\n            int256[3] memory hltColA = hsv2rgb(hsv[0], hsv[1], hsv[2]);\n\n            colScheme = ColScheme({\n                name: \"Vivid Ink\",\n                id: schemeId,\n                pri: SubScheme({\n                    colA: [int256(0), 0, 0],\n                    colB: [int256(0), 0, 0],\n                    isInnerGradient: true,\n                    dirCode: GeomUtils.randN(tokenHash, \"pri\", 0, 3), /// get a 'random' dir code (0 or 1)\n                    jiggle: [int256(25), 25, 25],\n                    isJiggleInner: false,\n                    backShift: [int256(-60), -60, -60]\n                }),\n                hlt: SubScheme({\n                    colA: hltColA,\n                    colB: copyColor(hltColA), /// same as A\n                    isInnerGradient: true,\n                    dirCode: GeomUtils.randN(tokenHash, \"pri\", 0, 3), /// same as priDirCode\n                    jiggle: [int256(0), 0, 0],\n                    isJiggleInner: false,\n                    backShift: [int256(-60), -60, -60]\n                }),\n                hltNum: tris.length % 2 == 1\n                    ? (tris.length / 2) + 1\n                    : tris.length / 2,\n                hltSelCode: GeomUtils.randN(tokenHash, \"hltSel\", 0, 2),\n                hltVarCode: GeomUtils.randN(tokenHash, \"hltVar\", 0, 2),\n                lightCol: [int256(255), 255, 255],\n                bgColTop: hsv2rgb(\n                    ShackledMath.mod((hsv[0] - 9), 255),\n                    105,\n                    255\n                ),\n                bgColBottom: hsv2rgb(\n                    ShackledMath.mod((hsv[0] + 9), 255),\n                    105,\n                    255\n                )\n            });\n        } else if (schemeId == 9) {\n            colScheme = ColScheme({\n                name: \"Pigmented\",\n                id: schemeId,\n                pri: SubScheme({\n                    colA: [int256(50), 30, 25],\n                    colB: [int256(205), 205, 205],\n                    isInnerGradient: false,\n                    dirCode: 0,\n                    jiggle: [int256(13), 13, 13],\n                    isJiggleInner: false,\n                    backShift: [int256(205), 205, 205]\n                }),\n                hlt: SubScheme({\n                    colA: [int256(255), 0, 0],\n                    colB: [int256(255), 50, 0],\n                    isInnerGradient: true,\n                    dirCode: GeomUtils.randN(tokenHash, \"hltDir\", 0, 3), /// get a 'random' dir code\n                    jiggle: [int256(255), 50, 50],\n                    isJiggleInner: false,\n                    backShift: [int256(205), 205, 205]\n                }),\n                hltNum: tris.length / 3,\n                hltSelCode: 1, /// 'biggest' selection code\n                hltVarCode: 0,\n                lightCol: [int256(255), 255, 255],\n                bgColTop: [int256(0), 0, 0],\n                bgColBottom: [int256(7), 7, 7]\n            });\n        } else {\n            revert(\"invalid scheme id\");\n        }\n\n        return colScheme;\n    }\n\n    /** @dev convert hsv to rgb color\n    assume h, s and v and in range [0, 255]\n    outputs rgb in range [0, 255]\n     */\n    function hsv2rgb(\n        int256 h,\n        int256 s,\n        int256 v\n    ) internal view returns (int256[3] memory res) {\n        /// ensure range 0, 255\n        h = ShackledMath.max(0, ShackledMath.min(255, h));\n        s = ShackledMath.max(0, ShackledMath.min(255, s));\n        v = ShackledMath.max(0, ShackledMath.min(255, v));\n\n        int256 h2 = (((h % 255) * 1e3) / 255) * 360; /// convert to degress\n        int256 v2 = (v * 1e3) / 255;\n        int256 s2 = (s * 1e3) / 255;\n\n        /// calculate c, x and m while scaling all by 1e3\n        /// otherwise x will be too small and round to 0\n        int256 c = (v2 * s2) / 1e3;\n\n        int256 x = (c *\n            (1 * 1e3 - ShackledMath.abs(((h2 / 60) % (2 * 1e3)) - (1 * 1e3))));\n\n        x = x / 1e3;\n\n        int256 m = v2 - c;\n\n        if (0 <= h2 && h2 < 60000) {\n            res = [c + m, x + m, m];\n        } else if (60000 <= h2 && h2 < 120000) {\n            res = [x + m, c + m, m];\n        } else if (120000 < h2 && h2 < 180000) {\n            res = [m, c + m, x + m];\n        } else if (180000 < h2 && h2 < 240000) {\n            res = [m, x + m, c + m];\n        } else if (240000 < h2 && h2 < 300000) {\n            res = [x + m, m, c + m];\n        } else if (300000 < h2 && h2 < 360000) {\n            res = [c + m, m, x + m];\n        } else {\n            res = [int256(0), 0, 0];\n        }\n\n        /// scale into correct range\n        return [\n            (res[0] * 255) / 1e3,\n            (res[1] * 255) / 1e3,\n            (res[2] * 255) / 1e3\n        ];\n    }\n\n    /** @dev convert rgb to hsv \n        expects rgb to be in range [0, 255]\n        outputs hsv in range [0, 255]\n    */\n    function rgb2hsv(\n        int256 r,\n        int256 g,\n        int256 b\n    ) internal view returns (int256[3] memory) {\n        int256 r2 = (r * 1e3) / 255;\n        int256 g2 = (g * 1e3) / 255;\n        int256 b2 = (b * 1e3) / 255;\n        int256 max = ShackledMath.max(ShackledMath.max(r2, g2), b2);\n        int256 min = ShackledMath.min(ShackledMath.min(r2, g2), b2);\n        int256 delta = max - min;\n\n        /// calculate hue\n        int256 h;\n        if (delta != 0) {\n            if (max == r2) {\n                int256 _h = ((g2 - b2) * 1e3) / delta;\n                h = 60 * ShackledMath.mod(_h, 6000);\n            } else if (max == g2) {\n                h = 60 * (((b2 - r2) * 1e3) / delta + (2000));\n            } else if (max == b2) {\n                h = 60 * (((r2 - g2) * 1e3) / delta + (4000));\n            }\n        }\n\n        h = (h % (360 * 1e3)) / 360;\n\n        /// calculate saturation\n        int256 s;\n        if (max != 0) {\n            s = (delta * 1e3) / max;\n        }\n\n        /// calculate value\n        int256 v = max;\n\n        return [(h * 255) / 1e3, (s * 255) / 1e3, (v * 255) / 1e3];\n    }\n\n    /** @dev get vector of three numbers that can be used to jiggle a color */\n    function getJiggle(\n        int256[3] memory jiggle,\n        bytes32 randomSeed,\n        int256 seedModifier\n    ) internal view returns (int256[3] memory) {\n        return [\n            jiggle[0] +\n                GeomUtils.randN(\n                    randomSeed,\n                    string(abi.encodePacked(\"0\", seedModifier)),\n                    -jiggle[0],\n                    jiggle[0]\n                ),\n            jiggle[1] +\n                GeomUtils.randN(\n                    randomSeed,\n                    string(abi.encodePacked(\"1\", seedModifier)),\n                    -jiggle[1],\n                    jiggle[1]\n                ),\n            jiggle[2] +\n                GeomUtils.randN(\n                    randomSeed,\n                    string(abi.encodePacked(\"2\", seedModifier)),\n                    -jiggle[2],\n                    jiggle[2]\n                )\n        ];\n    }\n\n    /** @dev check if a uint is in an array */\n    function inArray(uint256[] memory array, uint256 value)\n        external\n        view\n        returns (bool)\n    {\n        for (uint256 i = 0; i < array.length; i++) {\n            if (array[i] == value) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /** @dev a helper function to apply the direction code in interpolation */\n    function applyDirHelp(\n        int256[3][3] memory triFront,\n        int256[3] memory colA,\n        int256[3] memory colB,\n        int256 dirCode,\n        bool isInnerGradient,\n        int256[3][2] memory extents\n    ) internal view returns (int256[3][3] memory triCols) {\n        uint256[3] memory order;\n        if (isInnerGradient) {\n            /// perform the simple 3 sort - always color by the front\n            order = getOrderedPointIdxsInDir(triFront, dirCode);\n        } else {\n            /// order irrelevant in other case\n            order = [uint256(0), 1, 2];\n        }\n\n        /// axis is 0 (horizontal) if dir code is left-right or right-left\n        /// 1 (vertical) otherwise\n        uint256 axis = (dirCode == 0 || dirCode == 1) ? 0 : 1;\n\n        int256 length;\n        if (axis == 0) {\n            length = extents[1][0] - extents[0][0];\n        } else {\n            length = extents[1][1] - extents[0][1];\n        }\n\n        /// if we're interpolating across the triangle (inner)\n        /// then do so by calculating the color at each point in the triangle\n        for (uint256 i = 0; i < 3; i++) {\n            triCols[order[i]] = interpColHelp(\n                colA,\n                colB,\n                (isInnerGradient)\n                    ? triFront[order[0]][axis]\n                    : int256(-length / 2),\n                (isInnerGradient)\n                    ? triFront[order[2]][axis]\n                    : int256(length / 2),\n                triFront[order[i]][axis]\n            );\n        }\n    }\n\n    /** @dev a helper function to order points by index in a desired direction\n     */\n    function getOrderedPointIdxsInDir(int256[3][3] memory tri, int256 dirCode)\n        internal\n        view\n        returns (uint256[3] memory)\n    {\n        // flip if dir is left-right or down-up\n        bool flip = (dirCode == 1 || dirCode == 3) ? true : false;\n\n        // axis is 0 if horizontal (left-right or right-left), 1 otherwise (vertical)\n        uint256 axis = (dirCode == 0 || dirCode == 1) ? 0 : 1;\n\n        /// get the values of each point in the tri (flipped as required)\n        int256 f = (flip) ? int256(-1) : int256(1);\n        int256 a = f * tri[0][axis];\n        int256 b = f * tri[1][axis];\n        int256 c = f * tri[2][axis];\n\n        /// get the ordered indices\n        uint256[3] memory ixOrd = [uint256(0), 1, 2];\n\n        /// simplest way to sort 3 numbers\n        if (a > b) {\n            (a, b) = (b, a);\n            (ixOrd[0], ixOrd[1]) = (ixOrd[1], ixOrd[0]);\n        }\n        if (a > c) {\n            (a, c) = (c, a);\n            (ixOrd[0], ixOrd[2]) = (ixOrd[2], ixOrd[0]);\n        }\n        if (b > c) {\n            (b, c) = (c, b);\n            (ixOrd[1], ixOrd[2]) = (ixOrd[2], ixOrd[1]);\n        }\n        return ixOrd;\n    }\n\n    /** @dev a helper function for linear interpolation betweet two colors*/\n    function interpColHelp(\n        int256[3] memory colA,\n        int256[3] memory colB,\n        int256 low,\n        int256 high,\n        int256 val\n    ) internal view returns (int256[3] memory result) {\n        int256 ir;\n        int256 lerpScaleFactor = 1e3;\n        if (high - low == 0) {\n            ir = 1;\n        } else {\n            ir = ((val - low) * lerpScaleFactor) / (high - low);\n        }\n\n        for (uint256 i = 0; i < 3; i++) {\n            /// dont allow interpolation to go below 0\n            result[i] = ShackledMath.max(\n                0,\n                colA[i] + ((colB[i] - colA[i]) * ir) / lerpScaleFactor\n            );\n        }\n    }\n\n    /** @dev get indexes of the prisms to use highlight coloring*/\n    function getHighlightPrismIdxs(\n        int256[3][3][] memory tris,\n        bytes32 tokenHash,\n        uint256 nHighlights,\n        int256 varCode,\n        int256 selCode\n    ) internal view returns (uint256[] memory idxs) {\n        nHighlights = nHighlights < tris.length ? nHighlights : tris.length;\n\n        ///if we just want random triangles then there's no need to sort\n        if (selCode == 0) {\n            idxs = ShackledMath.randomIdx(\n                tokenHash,\n                uint256(nHighlights),\n                tris.length - 1\n            );\n        } else {\n            idxs = getSortedTrisIdxs(tris, nHighlights, varCode, selCode);\n        }\n    }\n\n    /** @dev return the index of the tris sorted by sel code\n    @param selCode will be 1 (biggest first) or 2 (smallest first)\n    */\n    function getSortedTrisIdxs(\n        int256[3][3][] memory tris,\n        uint256 nHighlights,\n        int256 varCode,\n        int256 selCode\n    ) internal view returns (uint256[] memory) {\n        // determine the sort order\n        int256 orderFactor = (selCode == 2) ? int256(1) : int256(-1);\n        /// get the list of triangle sizes\n        int256[] memory sizes = new int256[](tris.length);\n        for (uint256 i = 0; i < tris.length; i++) {\n            if (varCode == 0) {\n                // use size\n                sizes[i] = GeomUtils.getRadiusLen(tris[i]) * orderFactor;\n            } else if (varCode == 1) {\n                // use x\n                sizes[i] = GeomUtils.getCenterVec(tris[i])[0] * orderFactor;\n            } else if (varCode == 2) {\n                // use y\n                sizes[i] = GeomUtils.getCenterVec(tris[i])[1] * orderFactor;\n            }\n        }\n        /// initialise the index array\n        uint256[] memory idxs = new uint256[](tris.length);\n        for (uint256 i = 0; i < tris.length; i++) {\n            idxs[i] = i;\n        }\n        /// run a boilerplate insertion sort over the index array\n        for (uint256 i = 1; i < tris.length; i++) {\n            int256 key = sizes[i];\n            uint256 j = i - 1;\n            while (j > 0 && key < sizes[j]) {\n                sizes[j + 1] = sizes[j];\n                idxs[j + 1] = idxs[j];\n                j--;\n            }\n            sizes[j + 1] = key;\n            idxs[j + 1] = i;\n        }\n\n        uint256 nToCull = tris.length - nHighlights;\n        assembly {\n            mstore(idxs, sub(mload(idxs), nToCull))\n        }\n\n        return idxs;\n    }\n}\n\n/**\nHold some functions externally to reduce contract size for mainnet deployment\n */\nlibrary GeomUtils {\n    /// misc constants\n    int256 constant MIN_INT = type(int256).min;\n    int256 constant MAX_INT = type(int256).max;\n\n    /// constants for doing trig\n    int256 constant PI = 3141592653589793238; // pi as an 18 decimal value (wad)\n\n    /// parameters that control geometry creation\n    struct GeomSpec {\n        string name;\n        int256 id;\n        int256 forceInitialSize;\n        uint256 maxPrisms;\n        int256 minTriRad;\n        int256 maxTriRad;\n        bool varySize;\n        int256 depthMultiplier;\n        bool isSymmetricX;\n        bool isSymmetricY;\n        int256 probVertOpp;\n        int256 probAdjRec;\n        int256 probVertOppRec;\n    }\n\n    /// variables uses when creating the initial 2d triangles\n    struct TriVars {\n        uint256 nextTriIdx;\n        int256[3][3][] tris;\n        int256[3][3] tri;\n        int256 zBackRef;\n        int256 zFrontRef;\n        int256[] zFronts;\n        int256[] zBacks;\n        bool recursiveAttempt;\n    }\n\n    /// variables used when creating 3d prisms\n    struct GeomVars {\n        int256 rotX;\n        int256 rotY;\n        int256 rotZ;\n        int256[3][2] extents;\n        int256[3] center;\n        int256 width;\n        int256 height;\n        int256 extent;\n        int256 scaleNum;\n        uint256[] hltPrismIdx;\n        int256[3][3][] trisBack;\n        int256[3][3][] trisFront;\n        uint256 nPrisms;\n    }\n\n    /** @dev generate parameters that will control how the geometry is built */\n    function generateSpec(bytes32 tokenHash)\n        external\n        view\n        returns (GeomSpec memory spec)\n    {\n        //  'randomly' select 1 of possible geometry specifications\n        uint256 specId = getSpecId(\n            tokenHash,\n            [\n                [int256(0), 1000],\n                [int256(1000), 3000],\n                [int256(3000), 3500],\n                [int256(3500), 4500],\n                [int256(4500), 5000],\n                [int256(5000), 6000],\n                [int256(6000), 8000]\n            ]\n        );\n\n        bool isSymmetricX = GeomUtils.randN(tokenHash, \"symmX\", 0, 2) > 0;\n        bool isSymmetricY = GeomUtils.randN(tokenHash, \"symmY\", 0, 2) > 0;\n\n        int256 defaultDepthMultiplier = randN(tokenHash, \"depthMult\", 80, 120);\n        int256 defaultMinTriRad = 4800;\n        int256 defaultMaxTriRad = defaultMinTriRad * 3;\n        uint256 defaultMaxPrisms = uint256(\n            randN(tokenHash, \"maxPrisms\", 8, 16)\n        );\n\n        if (specId == 0) {\n            /// all vertically opposite\n            spec = GeomSpec({\n                id: 0,\n                name: \"Verticalized\",\n                forceInitialSize: (defaultMinTriRad * 5) / 2,\n                maxPrisms: defaultMaxPrisms,\n                minTriRad: defaultMinTriRad,\n                maxTriRad: defaultMaxTriRad,\n                varySize: true,\n                depthMultiplier: defaultDepthMultiplier,\n                probVertOpp: 100,\n                probVertOppRec: 100,\n                probAdjRec: 0,\n                isSymmetricX: isSymmetricX,\n                isSymmetricY: isSymmetricY\n            });\n        } else if (specId == 1) {\n            /// fully adjacent\n            spec = GeomSpec({\n                id: 1,\n                name: \"Adjoint\",\n                forceInitialSize: (defaultMinTriRad * 5) / 2,\n                maxPrisms: defaultMaxPrisms,\n                minTriRad: defaultMinTriRad,\n                maxTriRad: defaultMaxTriRad,\n                varySize: true,\n                depthMultiplier: defaultDepthMultiplier,\n                probVertOpp: 0,\n                probVertOppRec: 0,\n                probAdjRec: 100,\n                isSymmetricX: isSymmetricX,\n                isSymmetricY: isSymmetricY\n            });\n        } else if (specId == 2) {\n            /// few but big\n            spec = GeomSpec({\n                id: 2,\n                name: \"Cetacean\",\n                forceInitialSize: 0,\n                maxPrisms: 8,\n                minTriRad: defaultMinTriRad * 3,\n                maxTriRad: defaultMinTriRad * 4,\n                varySize: true,\n                depthMultiplier: defaultDepthMultiplier,\n                probVertOpp: 50,\n                probVertOppRec: 50,\n                probAdjRec: 50,\n                isSymmetricX: isSymmetricX,\n                isSymmetricY: isSymmetricY\n            });\n        } else if (specId == 3) {\n            /// lots but small\n            spec = GeomSpec({\n                id: 3,\n                name: \"Swarm\",\n                forceInitialSize: 0,\n                maxPrisms: 16,\n                minTriRad: defaultMinTriRad,\n                maxTriRad: defaultMinTriRad * 2,\n                varySize: true,\n                depthMultiplier: defaultDepthMultiplier,\n                probVertOpp: 50,\n                probVertOppRec: 0,\n                probAdjRec: 0,\n                isSymmetricX: isSymmetricX,\n                isSymmetricY: isSymmetricY\n            });\n        } else if (specId == 4) {\n            /// all same size\n            spec = GeomSpec({\n                id: 4,\n                name: \"Isomorphic\",\n                forceInitialSize: 0,\n                maxPrisms: defaultMaxPrisms,\n                minTriRad: defaultMinTriRad,\n                maxTriRad: defaultMaxTriRad,\n                varySize: false,\n                depthMultiplier: defaultDepthMultiplier,\n                probVertOpp: 50,\n                probVertOppRec: 50,\n                probAdjRec: 50,\n                isSymmetricX: isSymmetricX,\n                isSymmetricY: isSymmetricY\n            });\n        } else if (specId == 5) {\n            /// trains\n            spec = GeomSpec({\n                id: 5,\n                name: \"Extruded\",\n                forceInitialSize: 0,\n                maxPrisms: 10,\n                minTriRad: defaultMinTriRad,\n                maxTriRad: defaultMaxTriRad,\n                varySize: true,\n                depthMultiplier: defaultDepthMultiplier,\n                probVertOpp: 50,\n                probVertOppRec: 50,\n                probAdjRec: 50,\n                isSymmetricX: isSymmetricX,\n                isSymmetricY: isSymmetricY\n            });\n        } else if (specId == 6) {\n            /// flatpack\n            spec = GeomSpec({\n                id: 6,\n                name: \"Uniform\",\n                forceInitialSize: 0,\n                maxPrisms: 12,\n                minTriRad: defaultMinTriRad,\n                maxTriRad: defaultMaxTriRad,\n                varySize: true,\n                depthMultiplier: defaultDepthMultiplier,\n                probVertOpp: 50,\n                probVertOppRec: 50,\n                probAdjRec: 50,\n                isSymmetricX: isSymmetricX,\n                isSymmetricY: isSymmetricY\n            });\n        } else {\n            revert(\"invalid specId\");\n        }\n    }\n\n    /** @dev make triangles to the side of a reference triangle */\n    function makeAdjacentTriangles(\n        bytes32 tokenHash,\n        uint256 attemptNum,\n        uint256 refIdx,\n        TriVars memory triVars,\n        GeomSpec memory geomSpec,\n        int256 overrideSideIdx,\n        int256 overrideScale,\n        int256 depth\n    ) public view returns (TriVars memory) {\n        /// get the side index (0, 1 or 2)\n        int256 sideIdx;\n        if (overrideSideIdx == -1) {\n            sideIdx = randN(\n                tokenHash,\n                string(abi.encodePacked(\"sideIdx\", attemptNum, depth)),\n                0,\n                2\n            );\n        } else {\n            sideIdx = overrideSideIdx;\n        }\n\n        /// get the scale\n        /// this value is scaled up by 1e3 (desired range is 0.333 to 0.8)\n        /// the scale will be divided out when used\n        int256 scale;\n        if (geomSpec.varySize) {\n            if (overrideScale == -1) {\n                scale = randN(\n                    tokenHash,\n                    string(abi.encodePacked(\"scaleAdj\", attemptNum, depth)),\n                    333,\n                    800\n                );\n            } else {\n                scale = overrideScale;\n            }\n        } else {\n            scale = 1e3;\n        }\n\n        /// make a new triangle\n        int256[3][3] memory newTri = makeTriAdjacent(\n            tokenHash,\n            geomSpec,\n            attemptNum,\n            triVars.tris[refIdx],\n            sideIdx,\n            scale,\n            depth\n        );\n\n        /// set the zbackref and frontbackref\n        triVars.zBackRef = -1; /// calculate a new z back\n        triVars.zFrontRef = -1; /// calculate a new z ftont\n\n        // try to add the triangle, and use the reference z height\n        triVars.recursiveAttempt = false;\n        bool wasAdded = attemptToAddTri(newTri, tokenHash, triVars, geomSpec);\n\n        if (wasAdded) {\n            // run again\n            if (\n                randN(\n                    tokenHash,\n                    string(\n                        abi.encodePacked(\"addAdjRecursive\", attemptNum, depth)\n                    ),\n                    0,\n                    100\n                ) <= geomSpec.probAdjRec\n            ) {\n                triVars = makeAdjacentTriangles(\n                    tokenHash,\n                    attemptNum,\n                    triVars.nextTriIdx - 1,\n                    triVars,\n                    geomSpec,\n                    sideIdx,\n                    666, /// always make the next one 2/3 scale\n                    depth + 1\n                );\n            }\n        }\n        return triVars;\n    }\n\n    /** @dev make triangles vertically opposite a reference triangle */\n    function makeVerticallyOppositeTriangles(\n        bytes32 tokenHash,\n        uint256 attemptNum,\n        uint256 refIdx,\n        TriVars memory triVars,\n        GeomSpec memory geomSpec,\n        int256 overrideSideIdx,\n        int256 overrideScale,\n        int256 depth\n    ) public view returns (TriVars memory) {\n        /// get the side index (0, 1 or 2)\n        int256 sideIdx;\n        if (overrideSideIdx == -1) {\n            sideIdx = randN(\n                tokenHash,\n                string(abi.encodePacked(\"vertOppSideIdx\", attemptNum, depth)),\n                0,\n                2\n            );\n        } else {\n            sideIdx = overrideSideIdx;\n        }\n\n        /// get the scale\n        /// this value is scaled up by 1e3\n        /// use attemptNum in seedModifier to ensure unique values each attempt\n        int256 scale;\n        if (geomSpec.varySize) {\n            if (overrideScale == -1) {\n                if (\n                    // prettier-ignore\n                    randN(\n                        tokenHash,\n                        string(abi.encodePacked(\"vertOppScale1\", attemptNum, depth)),\n                        0,\n                        100\n                    ) > 33\n                ) {\n                    // prettier-ignore\n                    if (\n                        randN(\n                            tokenHash,\n                            string(abi.encodePacked(\"vertOppScale2\", attemptNum, depth)  ),\n                            0,\n                            100\n                        ) > 50\n                    ) {\n                        scale = 1000; /// desired = 1 (same scale)\n                    } else {\n                        scale = 500; /// desired = 0.5 (half scale)\n                    }\n                } else {\n                    scale = 2000; /// desired = 2 (double scale)\n                }\n            } else {\n                scale = overrideScale;\n            }\n        } else {\n            scale = 1e3;\n        }\n\n        /// make a new triangle\n        int256[3][3] memory newTri = makeTriVertOpp(\n            triVars.tris[refIdx],\n            geomSpec,\n            sideIdx,\n            scale\n        );\n\n        /// set the zbackref and frontbackref\n        triVars.zBackRef = -1; /// calculate a new z back\n        triVars.zFrontRef = triVars.zFronts[refIdx];\n\n        // try to add the triangle, and use the reference z height\n        triVars.recursiveAttempt = false;\n        bool wasAdded = attemptToAddTri(newTri, tokenHash, triVars, geomSpec);\n\n        if (wasAdded) {\n            /// run again\n            if (\n                randN(\n                    tokenHash,\n                    string(\n                        abi.encodePacked(\"recursiveVertOpp\", attemptNum, depth)\n                    ),\n                    0,\n                    100\n                ) <= geomSpec.probVertOppRec\n            ) {\n                triVars = makeVerticallyOppositeTriangles(\n                    tokenHash,\n                    attemptNum,\n                    refIdx,\n                    triVars,\n                    geomSpec,\n                    sideIdx,\n                    666, /// always make the next one 2/3 scale\n                    depth + 1\n                );\n            }\n        }\n\n        return triVars;\n    }\n\n    /** @dev place a triangle vertically opposite over the given point \n    @param refTri the reference triangle to base the new triangle on\n    */\n    function makeTriVertOpp(\n        int256[3][3] memory refTri,\n        GeomSpec memory geomSpec,\n        int256 sideIdx,\n        int256 scale\n    ) internal view returns (int256[3][3] memory) {\n        /// calculate the center of the reference triangle\n        /// add and then divide by 1e3 (the factor by which scale is scaled up)\n        int256 centerDist = (getRadiusLen(refTri) * (1e3 + scale)) / 1e3;\n\n        /// get the new triangle's direction\n        int256 newAngle = sideIdx *\n            120 +\n            60 +\n            (isTriPointingUp(refTri) ? int256(60) : int256(0));\n\n        int256 spacing = 64;\n\n        /// calculate the true offset\n        int256[3] memory offset = vector3RotateZ(\n            [int256(0), centerDist + spacing, 0],\n            newAngle\n        );\n\n        int256[3] memory centerVec = getCenterVec(refTri);\n        int256[3] memory newCentre = ShackledMath.vector3Add(centerVec, offset);\n        /// return the new triangle (div by 1e3 to account for scale)\n        int256 newRadius = (scale * getRadiusLen(refTri)) / 1e3;\n        newRadius = ShackledMath.min(geomSpec.maxTriRad, newRadius);\n        newAngle -= 210;\n        return makeTri(newCentre, newRadius, newAngle);\n    }\n\n    /** @dev make a new adjacent triangle\n     */\n    function makeTriAdjacent(\n        bytes32 tokenHash,\n        GeomSpec memory geomSpec,\n        uint256 attemptNum,\n        int256[3][3] memory refTri,\n        int256 sideIdx,\n        int256 scale,\n        int256 depth\n    ) internal view returns (int256[3][3] memory) {\n        /// calculate the center of the new triangle\n        /// add and then divide by 1e3 (the factor by which scale is scaled up)\n\n        int256 centerDist = (getPerpLen(refTri) * (1e3 + scale)) / 1e3;\n\n        /// get the new triangle's direction\n        int256 newAngle = sideIdx *\n            120 +\n            (isTriPointingUp(refTri) ? int256(60) : int256(0));\n\n        /// determine the direction of the offset offset\n        /// get a unique random seed each attempt to ensure variation\n\n        // prettier-ignore\n        int256 offsetDirection = randN(\n            tokenHash,\n            string(abi.encodePacked(\"lateralOffset\", attemptNum, depth)),\n            0, \n            1\n        ) \n        * 2 - 1;\n\n        /// put if off to one side of the triangle if it's smaller\n        /// scale is on order of 1e3\n        int256 lateralOffset = (offsetDirection *\n            (1e3 - scale) *\n            getSideLen(refTri)) / 1e3;\n\n        /// make a gap between the triangles\n        int256 spacing = 6000;\n\n        /// calculate the true offset\n        int256[3] memory offset = vector3RotateZ(\n            [lateralOffset, centerDist + spacing, 0],\n            newAngle\n        );\n\n        int256[3] memory newCentre = ShackledMath.vector3Add(\n            getCenterVec(refTri),\n            offset\n        );\n\n        /// return the new triangle (div by 1e3 to account for scale)\n        int256 newRadius = (scale * getRadiusLen(refTri)) / 1e3;\n        newRadius = ShackledMath.min(geomSpec.maxTriRad, newRadius);\n        newAngle -= 30;\n        return makeTri(newCentre, newRadius, newAngle);\n    }\n\n    /** @dev  \n    create a triangle centered at centre, \n    with length from centre to point of radius\n    */\n    function makeTri(\n        int256[3] memory centre,\n        int256 radius,\n        int256 angle\n    ) internal view returns (int256[3][3] memory tri) {\n        /// create a vector to rotate around 3 times\n        int256[3] memory offset = [radius, 0, 0];\n\n        /// make 3 points of the tri\n        for (uint256 i = 0; i < 3; i++) {\n            int256 armAngle = 120 * int256(i);\n            int256[3] memory offsetVec = vector3RotateZ(\n                offset,\n                armAngle + angle\n            );\n\n            tri[i] = ShackledMath.vector3Add(centre, offsetVec);\n        }\n    }\n\n    /** @dev rotate a vector around x */\n    function vector3RotateX(int256[3] memory v, int256 deg)\n        internal\n        view\n        returns (int256[3] memory)\n    {\n        /// get the cos and sin of the angle\n        (int256 cos, int256 sin) = trigHelper(deg);\n\n        /// calculate new y and z (scaling down to account for trig scaling)\n        int256 y = ((v[1] * cos) - (v[2] * sin)) / 1e18;\n        int256 z = ((v[1] * sin) + (v[2] * cos)) / 1e18;\n        return [v[0], y, z];\n    }\n\n    /** @dev rotate a vector around y */\n    function vector3RotateY(int256[3] memory v, int256 deg)\n        internal\n        view\n        returns (int256[3] memory)\n    {\n        /// get the cos and sin of the angle\n        (int256 cos, int256 sin) = trigHelper(deg);\n\n        /// calculate new x and z (scaling down to account for trig scaling)\n        int256 x = ((v[0] * cos) - (v[2] * sin)) / 1e18;\n        int256 z = ((v[0] * sin) + (v[2] * cos)) / 1e18;\n        return [x, v[1], z];\n    }\n\n    /** @dev rotate a vector around z */\n    function vector3RotateZ(int256[3] memory v, int256 deg)\n        internal\n        view\n        returns (int256[3] memory)\n    {\n        /// get the cos and sin of the angle\n        (int256 cos, int256 sin) = trigHelper(deg);\n\n        /// calculate new x and y (scaling down to account for trig scaling)\n        int256 x = ((v[0] * cos) - (v[1] * sin)) / 1e18;\n        int256 y = ((v[0] * sin) + (v[1] * cos)) / 1e18;\n        return [x, y, v[2]];\n    }\n\n    /** @dev calculate sin and cos of an angle */\n    function trigHelper(int256 deg)\n        internal\n        view\n        returns (int256 cos, int256 sin)\n    {\n        /// deal with negative degrees here, since Trigonometry.sol can't\n        int256 n360 = (ShackledMath.abs(deg) / 360) + 1;\n        deg = (deg + (360 * n360)) % 360;\n        uint256 rads = uint256((deg * PI) / 180);\n        /// calculate radians (in 1e18 space)\n        cos = Trigonometry.cos(rads);\n        sin = Trigonometry.sin(rads);\n    }\n\n    /** @dev Get the 3d vector at the center of a triangle */\n    function getCenterVec(int256[3][3] memory tri)\n        internal\n        view\n        returns (int256[3] memory)\n    {\n        return\n            ShackledMath.vector3DivScalar(\n                ShackledMath.vector3Add(\n                    ShackledMath.vector3Add(tri[0], tri[1]),\n                    tri[2]\n                ),\n                3\n            );\n    }\n\n    /** @dev Get the length from the center of a triangle to point*/\n    function getRadiusLen(int256[3][3] memory tri)\n        internal\n        view\n        returns (int256)\n    {\n        return\n            ShackledMath.vector3Len(\n                ShackledMath.vector3Sub(getCenterVec(tri), tri[0])\n            );\n    }\n\n    /** @dev Get the length from any point on triangle to other point (equilateral)*/\n    function getSideLen(int256[3][3] memory tri)\n        internal\n        view\n        returns (int256)\n    {\n        // len * 0.886\n        return (getRadiusLen(tri) * 8660) / 10000;\n    }\n\n    /** @dev Get the shortes length from center of triangle to side */\n    function getPerpLen(int256[3][3] memory tri)\n        internal\n        view\n        returns (int256)\n    {\n        return getRadiusLen(tri) / 2;\n    }\n\n    /** @dev Determine if a triangle is pointing up*/\n    function isTriPointingUp(int256[3][3] memory tri)\n        internal\n        view\n        returns (bool)\n    {\n        int256 centerY = getCenterVec(tri)[1];\n        /// count how many verts are above this y value\n        int256 nAbove = 0;\n        for (uint256 i = 0; i < 3; i++) {\n            if (tri[i][1] > centerY) {\n                nAbove++;\n            }\n        }\n        return nAbove == 1;\n    }\n\n    /** @dev check if two triangles are close */\n    function areTrisClose(int256[3][3] memory tri1, int256[3][3] memory tri2)\n        internal\n        view\n        returns (bool)\n    {\n        int256 lenBetweenCenters = ShackledMath.vector3Len(\n            ShackledMath.vector3Sub(getCenterVec(tri1), getCenterVec(tri2))\n        );\n        return lenBetweenCenters < (getPerpLen(tri1) + getPerpLen(tri2));\n    }\n\n    /** @dev check if two triangles have overlapping points*/\n    function areTrisPointsOverlapping(\n        int256[3][3] memory tri1,\n        int256[3][3] memory tri2\n    ) internal view returns (bool) {\n        /// check triangle a against b\n        if (\n            isPointInTri(tri1, tri2[0]) ||\n            isPointInTri(tri1, tri2[1]) ||\n            isPointInTri(tri1, tri2[2])\n        ) {\n            return true;\n        }\n\n        /// check triangle b against a\n        if (\n            isPointInTri(tri2, tri1[0]) ||\n            isPointInTri(tri2, tri1[1]) ||\n            isPointInTri(tri2, tri1[2])\n        ) {\n            return true;\n        }\n\n        /// otherwise they mustn't be overlapping\n        return false;\n    }\n\n    /** @dev calculate if a point is in a tri*/\n    function isPointInTri(int256[3][3] memory tri, int256[3] memory p)\n        internal\n        view\n        returns (bool)\n    {\n        int256[3] memory p1 = tri[0];\n        int256[3] memory p2 = tri[1];\n        int256[3] memory p3 = tri[2];\n        int256 alphaNum = (p2[1] - p3[1]) *\n            (p[0] - p3[0]) +\n            (p3[0] - p2[0]) *\n            (p[1] - p3[1]);\n\n        int256 alphaDenom = (p2[1] - p3[1]) *\n            (p1[0] - p3[0]) +\n            (p3[0] - p2[0]) *\n            (p1[1] - p3[1]);\n\n        int256 betaNum = (p3[1] - p1[1]) *\n            (p[0] - p3[0]) +\n            (p1[0] - p3[0]) *\n            (p[1] - p3[1]);\n\n        int256 betaDenom = (p2[1] - p3[1]) *\n            (p1[0] - p3[0]) +\n            (p3[0] - p2[0]) *\n            (p1[1] - p3[1]);\n\n        if (alphaDenom == 0 || betaDenom == 0) {\n            return false;\n        } else {\n            int256 alpha = (alphaNum * 1e6) / alphaDenom;\n            int256 beta = (betaNum * 1e6) / betaDenom;\n\n            int256 gamma = 1e6 - alpha - beta;\n            return alpha > 0 && beta > 0 && gamma > 0;\n        }\n    }\n\n    /** @dev check all points of the tri to see if it overlaps with any other tris\n     */\n    function isTriOverlappingWithTris(\n        int256[3][3] memory tri,\n        int256[3][3][] memory tris,\n        uint256 nextTriIdx\n    ) internal view returns (bool) {\n        /// check against all other tris added thus fat\n        for (uint256 i = 0; i < nextTriIdx; i++) {\n            if (\n                areTrisClose(tri, tris[i]) ||\n                areTrisPointsOverlapping(tri, tris[i])\n            ) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function isPointCloseToLine(\n        int256[3] memory p,\n        int256[3] memory l1,\n        int256[3] memory l2\n    ) internal view returns (bool) {\n        int256 x0 = p[0];\n        int256 y0 = p[1];\n        int256 x1 = l1[0];\n        int256 y1 = l1[1];\n        int256 x2 = l2[0];\n        int256 y2 = l2[1];\n        int256 distanceNum = ShackledMath.abs(\n            (x2 - x1) * (y1 - y0) - (x1 - x0) * (y2 - y1)\n        );\n        int256 distanceDenom = ShackledMath.hypot((x2 - x1), (y2 - y1));\n        int256 distance = distanceNum / distanceDenom;\n        if (distance < 8) {\n            return true;\n        }\n    }\n\n    /** compare a triangles points against the lines of other tris */\n    function isTrisPointsCloseToLines(\n        int256[3][3] memory tri,\n        int256[3][3][] memory tris,\n        uint256 nextTriIdx\n    ) internal view returns (bool) {\n        for (uint256 i = 0; i < nextTriIdx; i++) {\n            for (uint256 p = 0; p < 3; p++) {\n                if (isPointCloseToLine(tri[p], tris[i][0], tris[i][1])) {\n                    return true;\n                }\n                if (isPointCloseToLine(tri[p], tris[i][1], tris[i][2])) {\n                    return true;\n                }\n                if (isPointCloseToLine(tri[p], tris[i][2], tris[i][0])) {\n                    return true;\n                }\n            }\n        }\n    }\n\n    /** @dev check if tri to add meets certain criteria */\n    function isTriLegal(\n        int256[3][3] memory tri,\n        int256[3][3][] memory tris,\n        uint256 nextTriIdx,\n        int256 minTriRad\n    ) internal view returns (bool) {\n        // check radius first as point checks will fail\n        // if the radius is too small\n        if (getRadiusLen(tri) < minTriRad) {\n            return false;\n        }\n        return (!isTriOverlappingWithTris(tri, tris, nextTriIdx) &&\n            !isTrisPointsCloseToLines(tri, tris, nextTriIdx));\n    }\n\n    /** @dev helper function to add triangles */\n    function attemptToAddTri(\n        int256[3][3] memory tri,\n        bytes32 tokenHash,\n        TriVars memory triVars,\n        GeomSpec memory geomSpec\n    ) internal view returns (bool added) {\n        bool isLegal = isTriLegal(\n            tri,\n            triVars.tris,\n            triVars.nextTriIdx,\n            geomSpec.minTriRad\n        );\n        if (isLegal && triVars.nextTriIdx < geomSpec.maxPrisms) {\n            // add the triangle\n            triVars.tris[triVars.nextTriIdx] = tri;\n            added = true;\n\n            // add the new zs\n            if (triVars.zBackRef == -1) {\n                /// z back ref is not provided, calculate it\n                triVars.zBacks[triVars.nextTriIdx] = calculateZ(\n                    tri,\n                    tokenHash,\n                    triVars.nextTriIdx,\n                    geomSpec,\n                    false\n                );\n            } else {\n                /// use the provided z back (from the ref)\n                triVars.zBacks[triVars.nextTriIdx] = triVars.zBackRef;\n            }\n            if (triVars.zFrontRef == -1) {\n                /// z front ref is not provided, calculate it\n                triVars.zFronts[triVars.nextTriIdx] = calculateZ(\n                    tri,\n                    tokenHash,\n                    triVars.nextTriIdx,\n                    geomSpec,\n                    true\n                );\n            } else {\n                /// use the provided z front (from the ref)\n                triVars.zFronts[triVars.nextTriIdx] = triVars.zFrontRef;\n            }\n\n            // increment the tris counter\n            triVars.nextTriIdx += 1;\n\n            // if we're using any type of symmetry then attempt to add a symmetric triangle\n            // only do this recursively once\n            if (\n                (geomSpec.isSymmetricX || geomSpec.isSymmetricY) &&\n                (!triVars.recursiveAttempt)\n            ) {\n                int256[3][3] memory symTri = copyTri(tri);\n\n                if (geomSpec.isSymmetricX) {\n                    symTri[0][0] = -symTri[0][0];\n                    symTri[1][0] = -symTri[1][0];\n                    symTri[2][0] = -symTri[2][0];\n                    // symCenter[0] = -symCenter[0];\n                }\n\n                if (geomSpec.isSymmetricY) {\n                    symTri[0][1] = -symTri[0][1];\n                    symTri[1][1] = -symTri[1][1];\n                    symTri[2][1] = -symTri[2][1];\n                    // symCenter[1] = -symCenter[1];\n                }\n\n                if (\n                    (geomSpec.isSymmetricX || geomSpec.isSymmetricY) &&\n                    !(geomSpec.isSymmetricX && geomSpec.isSymmetricY)\n                ) {\n                    symTri = [symTri[2], symTri[1], symTri[0]];\n                }\n\n                triVars.recursiveAttempt = true;\n                triVars.zBackRef = triVars.zBacks[triVars.nextTriIdx - 1];\n                triVars.zFrontRef = triVars.zFronts[triVars.nextTriIdx - 1];\n                attemptToAddTri(symTri, tokenHash, triVars, geomSpec);\n            }\n        }\n    }\n\n    /** @dev rotate a triangle by x, y, or z \n    @param axis 0 = x, 1 = y, 2 = z\n    */\n    function triRotHelp(\n        int256 axis,\n        int256[3][3] memory tri,\n        int256 rot\n    ) internal view returns (int256[3][3] memory) {\n        if (axis == 0) {\n            return [\n                vector3RotateX(tri[0], rot),\n                vector3RotateX(tri[1], rot),\n                vector3RotateX(tri[2], rot)\n            ];\n        } else if (axis == 1) {\n            return [\n                vector3RotateY(tri[0], rot),\n                vector3RotateY(tri[1], rot),\n                vector3RotateY(tri[2], rot)\n            ];\n        } else if (axis == 2) {\n            return [\n                vector3RotateZ(tri[0], rot),\n                vector3RotateZ(tri[1], rot),\n                vector3RotateZ(tri[2], rot)\n            ];\n        }\n    }\n\n    /** @dev a helper to run rotation functions on back/front triangles */\n    function triBfHelp(\n        int256 axis,\n        int256[3][3][] memory trisBack,\n        int256[3][3][] memory trisFront,\n        int256 rot\n    ) internal view returns (int256[3][3][] memory, int256[3][3][] memory) {\n        int256[3][3][] memory trisBackNew = new int256[3][3][](trisBack.length);\n        int256[3][3][] memory trisFrontNew = new int256[3][3][](\n            trisFront.length\n        );\n\n        for (uint256 i = 0; i < trisBack.length; i++) {\n            trisBackNew[i] = triRotHelp(axis, trisBack[i], rot);\n            trisFrontNew[i] = triRotHelp(axis, trisFront[i], rot);\n        }\n\n        return (trisBackNew, trisFrontNew);\n    }\n\n    /** @dev get the maximum extent of the geometry (vertical or horizontal) */\n    function getExtents(int256[3][3][] memory tris)\n        internal\n        view\n        returns (int256[3][2] memory)\n    {\n        int256 minX = MAX_INT;\n        int256 maxX = MIN_INT;\n        int256 minY = MAX_INT;\n        int256 maxY = MIN_INT;\n        int256 minZ = MAX_INT;\n        int256 maxZ = MIN_INT;\n\n        for (uint256 i = 0; i < tris.length; i++) {\n            for (uint256 j = 0; j < tris[i].length; j++) {\n                minX = ShackledMath.min(minX, tris[i][j][0]);\n                maxX = ShackledMath.max(maxX, tris[i][j][0]);\n                minY = ShackledMath.min(minY, tris[i][j][1]);\n                maxY = ShackledMath.max(maxY, tris[i][j][1]);\n                minZ = ShackledMath.min(minZ, tris[i][j][2]);\n                maxZ = ShackledMath.max(maxZ, tris[i][j][2]);\n            }\n        }\n        return [[minX, minY, minZ], [maxX, maxY, maxZ]];\n    }\n\n    /** @dev go through each triangle and apply a 'height' */\n    function calculateZ(\n        int256[3][3] memory tri,\n        bytes32 tokenHash,\n        uint256 nextTriIdx,\n        GeomSpec memory geomSpec,\n        bool front\n    ) internal view returns (int256) {\n        int256 h;\n        string memory seedMod = string(abi.encodePacked(\"calcZ\", nextTriIdx));\n        if (front) {\n            if (geomSpec.id == 6) {\n                h = 1;\n            } else {\n                if (randN(tokenHash, seedMod, 0, 10) > 9) {\n                    if (randN(tokenHash, seedMod, 0, 10) > 3) {\n                        h = 10;\n                    } else {\n                        h = 22;\n                    }\n                } else {\n                    if (randN(tokenHash, seedMod, 0, 10) > 5) {\n                        h = 8;\n                    } else {\n                        h = 1;\n                    }\n                }\n            }\n        } else {\n            if (geomSpec.id == 6) {\n                h = -1;\n            } else {\n                if (geomSpec.id == 5) {\n                    h = -randN(tokenHash, seedMod, 2, 20);\n                } else {\n                    h = -2;\n                }\n            }\n        }\n        if (geomSpec.id == 5) {\n            h += 10;\n        }\n        return h * geomSpec.depthMultiplier;\n    }\n\n    /** @dev roll a specId given a list of weightings */\n    function getSpecId(bytes32 tokenHash, int256[2][7] memory weightings)\n        internal\n        view\n        returns (uint256)\n    {\n        int256 n = GeomUtils.randN(\n            tokenHash,\n            \"specId\",\n            weightings[0][0],\n            weightings[weightings.length - 1][1]\n        );\n        for (uint256 i = 0; i < weightings.length; i++) {\n            if (weightings[i][0] <= n && n <= weightings[i][1]) {\n                return i;\n            }\n        }\n    }\n\n    /** @dev get a random number between two numbers\n    with a uniform probability distribution\n    @param randomSeed a hash that we can use to 'randomly' get a number \n    @param seedModifier some string to make the result unique for this tokenHash\n    @param min the minimum number (inclusive)\n    @param max the maximum number (inclusive)\n\n    examples:\n        to get binary output (0 or 1), set min as 0 and max as 1\n        \n     */\n    function randN(\n        bytes32 randomSeed,\n        string memory seedModifier,\n        int256 min,\n        int256 max\n    ) internal view returns (int256) {\n        /// use max() to ensure modulo != 0\n        return\n            int256(\n                uint256(keccak256(abi.encodePacked(randomSeed, seedModifier))) %\n                    uint256(ShackledMath.max(1, (max + 1 - min)))\n            ) + min;\n    }\n\n    /** @dev clip an array of tris to a certain length (to trim empty tail slots) */\n    function clipTrisToLength(int256[3][3][] memory arr, uint256 desiredLen)\n        internal\n        view\n        returns (int256[3][3][] memory)\n    {\n        uint256 n = arr.length - desiredLen;\n        assembly {\n            mstore(arr, sub(mload(arr), n))\n        }\n        return arr;\n    }\n\n    /** @dev clip an array of Z values to a certain length (to trim empty tail slots) */\n    function clipZsToLength(int256[] memory arr, uint256 desiredLen)\n        internal\n        view\n        returns (int256[] memory)\n    {\n        uint256 n = arr.length - desiredLen;\n        assembly {\n            mstore(arr, sub(mload(arr), n))\n        }\n        return arr;\n    }\n\n    /** @dev make a copy of a triangle */\n    function copyTri(int256[3][3] memory tri)\n        internal\n        view\n        returns (int256[3][3] memory)\n    {\n        return [\n            [tri[0][0], tri[0][1], tri[0][2]],\n            [tri[1][0], tri[1][1], tri[1][2]],\n            [tri[2][0], tri[2][1], tri[2][2]]\n        ];\n    }\n\n    /** @dev make a copy of an array of triangles */\n    function copyTris(int256[3][3][] memory tris)\n        internal\n        view\n        returns (int256[3][3][] memory)\n    {\n        int256[3][3][] memory newTris = new int256[3][3][](tris.length);\n        for (uint256 i = 0; i < tris.length; i++) {\n            newTris[i] = copyTri(tris[i]);\n        }\n        return newTris;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"./IERC721Enumerable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s;\n        uint8 v;\n        assembly {\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n            v := add(shr(255, vs), 27)\n        }\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "contracts/ShackledCoords.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.0;\n\nimport \"./ShackledUtils.sol\";\nimport \"./ShackledMath.sol\";\n\nlibrary ShackledCoords {\n    /** @dev scale and translate the verts\n    this can be effectively disabled with a scale of 1 and translate of [0, 0, 0]\n     */\n    function convertToWorldSpaceWithModelTransform(\n        int256[3][3][] memory tris,\n        int256 scale,\n        int256[3] memory position\n    ) external view returns (int256[3][] memory) {\n        int256[3][] memory verts = ShackledUtils.flattenTris(tris);\n\n        // Scale model matrices are easy, just multiply through by the scale value\n        int256[3][] memory scaledVerts = new int256[3][](verts.length);\n\n        for (uint256 i = 0; i < verts.length; i++) {\n            scaledVerts[i][0] = verts[i][0] * scale + position[0];\n            scaledVerts[i][1] = verts[i][1] * scale + position[1];\n            scaledVerts[i][2] = verts[i][2] * scale + position[2];\n        }\n        return scaledVerts;\n    }\n\n    /** @dev run backfaceCulling to save future operations on faces that aren't seen by the camera*/\n    function backfaceCulling(\n        int256[3][3][] memory trisWorldSpace,\n        int256[3][3][] memory trisCols\n    )\n        external\n        view\n        returns (\n            int256[3][3][] memory culledTrisWorldSpace,\n            int256[3][3][] memory culledTrisCols\n        )\n    {\n        culledTrisWorldSpace = new int256[3][3][](trisWorldSpace.length);\n        culledTrisCols = new int256[3][3][](trisCols.length);\n\n        uint256 nextIx;\n\n        for (uint256 i = 0; i < trisWorldSpace.length; i++) {\n            int256[3] memory v1 = trisWorldSpace[i][0];\n            int256[3] memory v2 = trisWorldSpace[i][1];\n            int256[3] memory v3 = trisWorldSpace[i][2];\n            int256[3] memory norm = ShackledMath.crossProduct(\n                ShackledMath.vector3Sub(v1, v2),\n                ShackledMath.vector3Sub(v2, v3)\n            );\n            /// since shackled has a static positioned camera at the origin,\n            /// the points are already in view space, relaxing the backfaceCullingCond\n            int256 backfaceCullingCond = ShackledMath.vector3Dot(v1, norm);\n            if (backfaceCullingCond < 0) {\n                culledTrisWorldSpace[nextIx] = trisWorldSpace[i];\n                culledTrisCols[nextIx] = trisCols[i];\n                nextIx++;\n            }\n        }\n        /// remove any empty slots\n        uint256 nToCull = culledTrisWorldSpace.length - nextIx;\n        /// cull uneeded tris\n        assembly {\n            mstore(\n                culledTrisWorldSpace,\n                sub(mload(culledTrisWorldSpace), nToCull)\n            )\n        }\n        /// cull uneeded cols\n        assembly {\n            mstore(culledTrisCols, sub(mload(culledTrisCols), nToCull))\n        }\n    }\n\n    /**@dev calculate verts in camera space */\n    function convertToCameraSpaceViaVertexShader(\n        int256[3][] memory vertsWorldSpace,\n        int256 canvasDim,\n        bool perspCamera\n    ) external view returns (int256[3][] memory) {\n        // get the camera matrix as a numerator and denominator\n        int256[4][4][2] memory cameraMatrix;\n        if (perspCamera) {\n            cameraMatrix = getCameraMatrixPersp();\n        } else {\n            cameraMatrix = getCameraMatrixOrth(canvasDim);\n        }\n\n        int256[4][4] memory nM = cameraMatrix[0]; // camera matrix numerator\n        int256[4][4] memory dM = cameraMatrix[1]; // camera matrix denominator\n\n        int256[3][] memory verticesCameraSpace = new int256[3][](\n            vertsWorldSpace.length\n        );\n\n        for (uint256 i = 0; i < vertsWorldSpace.length; i++) {\n            // Convert from 3D to 4D homogenous coordinate system\n            int256[3] memory vert = vertsWorldSpace[i];\n\n            // Make a copy of vert (\"homoVertex\")\n            int256[] memory hv = new int256[](vert.length + 1);\n\n            for (uint256 j = 0; j < vert.length; j++) {\n                hv[j] = vert[j];\n            }\n\n            // Insert 1 at final position in copy of vert\n            hv[hv.length - 1] = 1;\n\n            int256 x = ((hv[0] * nM[0][0]) / dM[0][0]) +\n                ((hv[1] * nM[0][1]) / dM[0][1]) +\n                ((hv[2] * nM[0][2]) / dM[0][2]) +\n                (nM[0][3] / dM[0][3]);\n\n            int256 y = ((hv[0] * nM[1][0]) / dM[1][0]) +\n                ((hv[1] * nM[1][1]) / dM[1][1]) +\n                ((hv[2] * nM[1][2]) / dM[1][2]) +\n                (nM[1][3] / dM[1][0]);\n\n            int256 z = ((hv[0] * nM[2][0]) / dM[2][0]) +\n                ((hv[1] * nM[2][1]) / dM[2][1]) +\n                ((hv[2] * nM[2][2]) / dM[2][2]) +\n                (nM[2][3] / dM[2][3]);\n\n            int256 w = ((hv[0] * nM[3][0]) / dM[3][0]) +\n                ((hv[1] * nM[3][1]) / dM[3][1]) +\n                ((hv[2] * nM[3][2]) / dM[3][2]) +\n                (nM[3][3] / dM[3][3]);\n\n            if (w != 1) {\n                x = (x * 1e3) / w;\n                y = (y * 1e3) / w;\n                z = (z * 1e3) / w;\n            }\n\n            // Turn it back into a 3-vector\n            // Add it to the ordered list\n            verticesCameraSpace[i] = [x, y, z];\n        }\n\n        return verticesCameraSpace;\n    }\n\n    /** @dev generate an orthographic camera matrix */\n    function getCameraMatrixOrth(int256 canvasDim)\n        internal\n        pure\n        returns (int256[4][4][2] memory)\n    {\n        int256 canvasHalf = canvasDim / 2;\n\n        // Left, right, top, bottom\n        int256 r = ShackledMath.abs(canvasHalf);\n        int256 l = -canvasHalf;\n        int256 t = ShackledMath.abs(canvasHalf);\n        int256 b = -canvasHalf;\n\n        // Z settings (near and far)\n        /// multiplied by 1e3\n        int256 n = 1;\n        int256 f = 1024;\n\n        // Get the orthographic transform matrix\n        // as a numerator and denominator\n\n        int256[4][4] memory cameraMatrixNum = [\n            [int256(2), 0, 0, -(r + l)],\n            [int256(0), 2, 0, -(t + b)],\n            [int256(0), 0, -2, -(f + n)],\n            [int256(0), 0, 0, 1]\n        ];\n\n        int256[4][4] memory cameraMatrixDen = [\n            [int256(r - l), 1, 1, (r - l)],\n            [int256(1), (t - b), 1, (t - b)],\n            [int256(1), 1, (f - n), (f - n)],\n            [int256(1), 1, 1, 1]\n        ];\n\n        int256[4][4][2] memory cameraMatrix = [\n            cameraMatrixNum,\n            cameraMatrixDen\n        ];\n\n        return cameraMatrix;\n    }\n\n    /** @dev generate a perspective camera matrix */\n    function getCameraMatrixPersp()\n        internal\n        pure\n        returns (int256[4][4][2] memory)\n    {\n        // Z settings (near and far)\n        /// multiplied by 1e3\n        int256 n = 500;\n        int256 f = 501;\n\n        // Get the perspective transform matrix\n        // as a numerator and denominator\n\n        // parameter = 1 / tan(fov in degrees / 2)\n        // 0.1763 = 1 / tan(160 / 2)\n        // 1.428 = 1 / tan(70 / 2)\n        // 1.732 = 1 / tan(60 / 2)\n        // 2.145 = 1 / tan(50 / 2)\n\n        int256[4][4] memory cameraMatrixNum = [\n            [int256(2145), 0, 0, 0],\n            [int256(0), 2145, 0, 0],\n            [int256(0), 0, f, -f * n],\n            [int256(0), 0, 1, 0]\n        ];\n\n        int256[4][4] memory cameraMatrixDen = [\n            [int256(1000), 1, 1, 1],\n            [int256(1), 1000, 1, 1],\n            [int256(1), 1, f - n, f - n],\n            [int256(1), 1, 1, 1]\n        ];\n\n        int256[4][4][2] memory cameraMatrix = [\n            cameraMatrixNum,\n            cameraMatrixDen\n        ];\n\n        return cameraMatrix;\n    }\n}\n"
    },
    "contracts/ShackledRasteriser.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.0;\n\nimport \"./ShackledUtils.sol\";\nimport \"./ShackledMath.sol\";\nimport \"./ShackledStructs.sol\";\n\nlibrary ShackledRasteriser {\n    /// define some constant lighting parameters\n    int256 constant fidelity = int256(100); /// an extra paramater to improve numeric resolution\n    int256 constant lightAmbiPower = int256(1); // Base light colour // was 0.5\n    int256 constant lightDiffPower = int256(3e9); // Diffused light on surface relative strength\n    int256 constant lightSpecPower = int256(1e7); // Specular reflection on surface relative strength\n    uint256 constant inverseShininess = 10; // 'sharpness' of specular light on surface\n\n    /// define a scale factor to use in lerp to avoid rounding errors\n    int256 constant lerpScaleFactor = 1e3;\n\n    /// storing variables used in the fragment lighting\n    struct LightingVars {\n        int256[3] fragCol;\n        int256[3] fragNorm;\n        int256[3] fragPos;\n        int256[3] V;\n        int256 vMag;\n        int256[3] N;\n        int256 nMag;\n        int256[3] L;\n        int256 lMag;\n        int256 falloff;\n        int256 lnDot;\n        int256 lambertian;\n    }\n\n    /// store variables used in Bresenham's line algorithm\n    struct BresenhamsVars {\n        int256 x;\n        int256 y;\n        int256 dx;\n        int256 dy;\n        int256 sx;\n        int256 sy;\n        int256 err;\n        int256 e2;\n    }\n\n    /// store variables used when running the scanline algorithm\n    struct ScanlineVars {\n        int256 left;\n        int256 right;\n        int256[12] leftFrag;\n        int256[12] rightFrag;\n        int256 dx;\n        int256 ir;\n        int256 newFragRow;\n        int256 newFragCol;\n    }\n\n    /** @dev initialise the fragments\n        fragments are defined as:\n        [\n            canvas_x, canvas_y, depth,\n            col_x, col_y, col_z,\n            normal_x, normal_y, normal_z,\n            world_x, world_y, world_z\n        ]\n        \n     */\n    function initialiseFragments(\n        int256[3][3][] memory trisCameraSpace,\n        int256[3][3][] memory trisWorldSpace,\n        int256[3][3][] memory trisCols,\n        int256 canvasDim\n    ) external view returns (int256[12][3][] memory) {\n        /// make an array containing the fragments of each triangle (groups of 3 frags)\n        int256[12][3][] memory trisFragments = new int256[12][3][](\n            trisCameraSpace.length\n        );\n\n        // First convert from camera space to screen space within each triangle\n        for (uint256 t = 0; t < trisCameraSpace.length; t++) {\n            int256[3][3] memory tri = trisCameraSpace[t];\n\n            /// initialise an array for three fragments, each of len 9\n            int256[12][3] memory triFragments;\n\n            // First calculate the fragments that belong to defined vertices\n            for (uint256 v = 0; v < 3; v++) {\n                int256[12] memory fragment;\n\n                // first convert to screen space\n                // mapping from -1e3 -> 1e3 to account for the original geom being on order of 1e3\n                fragment[0] = ShackledMath.mapRangeToRange(\n                    tri[v][0],\n                    -1e3,\n                    1e3,\n                    0,\n                    canvasDim\n                );\n                fragment[1] = ShackledMath.mapRangeToRange(\n                    tri[v][1],\n                    -1e3,\n                    1e3,\n                    0,\n                    canvasDim\n                );\n\n                fragment[2] = tri[v][2];\n\n                // Now calculate the normal using the cross product of the edge vectors. This needs to be\n                // done in world space coordinates\n                int256[3] memory thisV = trisWorldSpace[t][(v + 0) % 3];\n                int256[3] memory nextV = trisWorldSpace[t][(v + 1) % 3];\n                int256[3] memory prevV = trisWorldSpace[t][(v + 2) % 3];\n\n                int256[3] memory norm = ShackledMath.crossProduct(\n                    ShackledMath.vector3Sub(prevV, thisV),\n                    ShackledMath.vector3Sub(thisV, nextV)\n                );\n\n                // Now attach the colour (in 0 -> 255 space)\n                fragment[3] = (trisCols[t][v][0]);\n                fragment[4] = (trisCols[t][v][1]);\n                fragment[5] = (trisCols[t][v][2]);\n\n                // And the normal (inverted)\n                fragment[6] = -norm[0];\n                fragment[7] = -norm[1];\n                fragment[8] = -norm[2];\n\n                // And the world position of this vertex to the frag\n                fragment[9] = thisV[0];\n                fragment[10] = thisV[1];\n                fragment[11] = thisV[2];\n\n                // These are just the fragments attached to\n                // the given vertices\n                triFragments[v] = fragment;\n            }\n\n            trisFragments[t] = triFragments;\n        }\n\n        return trisFragments;\n    }\n\n    /** @dev rasterize fragments onto a canvas\n     */\n    function rasterise(\n        int256[12][3][] memory trisFragments,\n        int256 canvasDim,\n        bool wireframe\n    ) external view returns (int256[12][] memory) {\n        /// determine the upper limits of the inner Bresenham's result\n        uint256 canvasHypot = uint256(ShackledMath.hypot(canvasDim, canvasDim));\n\n        /// initialise a new array\n        /// for each trisFragments we will get 3 results from bresenhams\n        /// maximum of 1 per pixel (canvasDim**2)\n        int256[12][] memory fragments = new int256[12][](\n            3 * uint256(canvasDim)**2\n        );\n        uint256 nextFragmentsIx = 0;\n\n        for (uint256 t = 0; t < trisFragments.length; t++) {\n            // prepare the variables required\n            int256[12] memory fa;\n            int256[12] memory fb;\n            uint256 nextBresTriFragmentIx = 0;\n\n            /// create an array to hold the bresenham results\n            /// this may cause an out of bounds error if there are a very large number of fragments\n            /// (e.g. many that are 'off screen')\n            int256[12][] memory bresTriFragments = new int256[12][](\n                canvasHypot * 10\n            );\n\n            // for each pair of fragments, run bresenhams and extend bresTriFragments with the output\n            // this replaces the three push(...modified_bresenhams_algorhtm) statements in JS\n            for (uint256 i = 0; i < 3; i++) {\n                if (i == 0) {\n                    fa = trisFragments[t][0];\n                    fb = trisFragments[t][1];\n                } else if (i == 1) {\n                    fa = trisFragments[t][1];\n                    fb = trisFragments[t][2];\n                } else {\n                    fa = trisFragments[t][2];\n                    fb = trisFragments[t][0];\n                }\n\n                // run the bresenhams algorithm\n                (\n                    bresTriFragments,\n                    nextBresTriFragmentIx\n                ) = runBresenhamsAlgorithm(\n                    fa,\n                    fb,\n                    canvasDim,\n                    bresTriFragments,\n                    nextBresTriFragmentIx\n                );\n            }\n\n            bresTriFragments = ShackledUtils.clipArray12ToLength(\n                bresTriFragments,\n                nextBresTriFragmentIx\n            );\n\n            if (wireframe) {\n                /// only store the edges\n                for (uint256 j = 0; j < bresTriFragments.length; j++) {\n                    fragments[nextFragmentsIx] = bresTriFragments[j];\n                    nextFragmentsIx++;\n                }\n            } else {\n                /// fill the triangle\n                (fragments, nextFragmentsIx) = runScanline(\n                    bresTriFragments,\n                    fragments,\n                    nextFragmentsIx,\n                    canvasDim\n                );\n            }\n        }\n\n        fragments = ShackledUtils.clipArray12ToLength(\n            fragments,\n            nextFragmentsIx\n        );\n\n        return fragments;\n    }\n\n    /** @dev run Bresenham's line algorithm on a pair of fragments\n     */\n    function runBresenhamsAlgorithm(\n        int256[12] memory f1,\n        int256[12] memory f2,\n        int256 canvasDim,\n        int256[12][] memory bresTriFragments,\n        uint256 nextBresTriFragmentIx\n    ) internal view returns (int256[12][] memory, uint256) {\n        /// initiate a new set of vars\n        BresenhamsVars memory vars;\n\n        int256[12] memory fa;\n        int256[12] memory fb;\n\n        /// determine which fragment has a greater magnitude\n        /// and set it as the destination (always order a given pair of edges the same)\n        if (\n            (f1[0]**2 + f1[1]**2 + f1[2]**2) < (f2[0]**2 + f2[1]**2 + f2[2]**2)\n        ) {\n            fa = f1;\n            fb = f2;\n        } else {\n            fa = f2;\n            fb = f1;\n        }\n\n        vars.x = fa[0];\n        vars.y = fa[1];\n\n        vars.dx = ShackledMath.abs(fb[0] - fa[0]);\n        vars.dy = -ShackledMath.abs(fb[1] - fa[1]);\n        int256 mag = ShackledMath.hypot(vars.dx, -vars.dy);\n\n        if (fa[0] < fb[0]) {\n            vars.sx = 1;\n        } else {\n            vars.sx = -1;\n        }\n\n        if (fa[1] < fb[1]) {\n            vars.sy = 1;\n        } else {\n            vars.sy = -1;\n        }\n\n        vars.err = vars.dx + vars.dy;\n        vars.e2 = 0;\n\n        // get the bresenhams output for this fragment pair (fa & fb)\n\n        if (mag == 0) {\n            bresTriFragments[nextBresTriFragmentIx] = fa;\n            bresTriFragments[nextBresTriFragmentIx + 1] = fb;\n            nextBresTriFragmentIx += 2;\n        } else {\n            // when mag is not 0,\n            // the length of the result will be max of upperLimitInner\n            // but will be clipped to remove any empty slots\n            (bresTriFragments, nextBresTriFragmentIx) = bresenhamsInner(\n                vars,\n                mag,\n                fa,\n                fb,\n                canvasDim,\n                bresTriFragments,\n                nextBresTriFragmentIx\n            );\n        }\n        return (bresTriFragments, nextBresTriFragmentIx);\n    }\n\n    /** @dev run the inner loop of Bresenham's line algorithm on a pair of fragments\n     * (preventing stack too deep)\n     */\n    function bresenhamsInner(\n        BresenhamsVars memory vars,\n        int256 mag,\n        int256[12] memory fa,\n        int256[12] memory fb,\n        int256 canvasDim,\n        int256[12][] memory bresTriFragments,\n        uint256 nextBresTriFragmentIx\n    ) internal view returns (int256[12][] memory, uint256) {\n        // define variables to be used in the inner loop\n        int256 ir;\n        int256 h;\n\n        /// loop through all fragments\n        while (!(vars.x == fb[0] && vars.y == fb[1])) {\n            /// get hypotenuse length of fragment a\n            h = ShackledMath.hypot(fa[0] - vars.x, fa[1] - vars.y);\n            assembly {\n                ir := div(mul(lerpScaleFactor, h), mag)\n            }\n\n            // only add the fragment if it falls within the canvas\n\n            /// create a new fragment by linear interpolation between a and b\n            int256[12] memory newFragment = ShackledMath.vector12Lerp(\n                fa,\n                fb,\n                ir,\n                lerpScaleFactor\n            );\n            newFragment[0] = vars.x;\n            newFragment[1] = vars.y;\n\n            /// save this fragment\n            bresTriFragments[nextBresTriFragmentIx] = newFragment;\n            ++nextBresTriFragmentIx;\n\n            /// update variables to use in next iteration\n            vars.e2 = 2 * vars.err;\n            if (vars.e2 >= vars.dy) {\n                vars.err += vars.dy;\n                vars.x += vars.sx;\n            }\n            if (vars.e2 <= vars.dx) {\n                vars.err += vars.dx;\n                vars.y += vars.sy;\n            }\n        }\n\n        /// save fragment 2\n        bresTriFragments[nextBresTriFragmentIx] = fb;\n        ++nextBresTriFragmentIx;\n\n        return (bresTriFragments, nextBresTriFragmentIx);\n    }\n\n    /** @dev run the scan line algorithm to fill the raster\n     */\n    function runScanline(\n        int256[12][] memory bresTriFragments,\n        int256[12][] memory fragments,\n        uint256 nextFragmentsIx,\n        int256 canvasDim\n    ) internal view returns (int256[12][] memory, uint256) {\n        /// make a 2d array with length = num of output rows\n\n        (\n            int256[][] memory rowFragIndices,\n            uint256[] memory nextIxFragRows\n        ) = getRowFragIndices(bresTriFragments, canvasDim);\n\n        /// initialise a struct to hold the scanline vars\n        ScanlineVars memory slVars;\n\n        // Now iterate through the list of fragments that live in a single row\n        for (uint256 i = 0; i < rowFragIndices.length; i++) {\n            /// Get the left most fragment\n            slVars.left = 4096;\n\n            /// Get the right most fragment\n            slVars.right = -4096;\n\n            /// loop through the fragments in this row\n            /// and check that a fragment was written to this row\n            for (uint256 j = 0; j < nextIxFragRows[i]; j++) {\n                /// What's the current fragment that we're looking at\n                int256 fragX = bresTriFragments[uint256(rowFragIndices[i][j])][\n                    0\n                ];\n\n                // if it's lefter than our current most left frag then its the new left frag\n                if (fragX < slVars.left) {\n                    slVars.left = fragX;\n                    slVars.leftFrag = bresTriFragments[\n                        uint256(rowFragIndices[i][j])\n                    ];\n                }\n                // if it's righter than our current most right frag then its the new right frag\n                if (fragX > slVars.right) {\n                    slVars.right = fragX;\n                    slVars.rightFrag = bresTriFragments[\n                        uint256(rowFragIndices[i][j])\n                    ];\n                }\n            }\n\n            /// now we need to scan from the left to the right fragment\n            /// and interpolate as we go\n            slVars.dx = slVars.right - slVars.left + 1;\n\n            /// get the row that we're on\n            slVars.newFragRow = slVars.leftFrag[1];\n\n            /// check that the new frag's row will be in the canvas bounds\n            if (slVars.newFragRow >= 0 && slVars.newFragRow < canvasDim) {\n                if (slVars.dx > int256(0)) {\n                    for (int256 j = 0; j < slVars.dx; j++) {\n                        /// calculate the column of the new fragment (its position in the scan)\n                        slVars.newFragCol = slVars.leftFrag[0] + j;\n\n                        /// check that the new frag's column will be in the canvas bounds\n                        if (\n                            slVars.newFragCol >= 0 &&\n                            slVars.newFragCol < canvasDim\n                        ) {\n                            slVars.ir = (j * lerpScaleFactor) / slVars.dx;\n\n                            /// make a new fragment by linear interpolation between left and right frags\n                            fragments[nextFragmentsIx] = ShackledMath\n                                .vector12Lerp(\n                                    slVars.leftFrag,\n                                    slVars.rightFrag,\n                                    slVars.ir,\n                                    lerpScaleFactor\n                                );\n                            /// update its position\n                            fragments[nextFragmentsIx][0] = slVars.newFragCol;\n                            fragments[nextFragmentsIx][1] = slVars.newFragRow;\n                            nextFragmentsIx++;\n                        }\n                    }\n                }\n            }\n        }\n\n        return (fragments, nextFragmentsIx);\n    }\n\n    /** @dev get the row indices of each fragment in preparation for the scanline alg\n     */\n    function getRowFragIndices(\n        int256[12][] memory bresTriFragments,\n        int256 canvasDim\n    )\n        internal\n        view\n        returns (int256[][] memory, uint256[] memory nextIxFragRows)\n    {\n        uint256 canvasDimUnsigned = uint256(canvasDim);\n\n        // define the length of each outer array so we can push items into it using nextIxFragRows\n        int256[][] memory rowFragIndices = new int256[][](canvasDimUnsigned);\n\n        // the inner rows can't be longer than bresTriFragments\n        for (uint256 i = 0; i < canvasDimUnsigned; i++) {\n            rowFragIndices[i] = new int256[](bresTriFragments.length);\n        }\n\n        // make an array the tracks for each row how many items have been pushed into it\n        uint256[] memory nextIxFragRows = new uint256[](canvasDimUnsigned);\n\n        for (uint256 f = 0; f < bresTriFragments.length; f++) {\n            // get the row index\n            uint256 rowIx = uint256(bresTriFragments[f][1]); // canvas_y\n\n            if (rowIx >= 0 && rowIx < canvasDimUnsigned) {\n                // get the ix of the next item to be added to the row\n\n                rowFragIndices[rowIx][nextIxFragRows[rowIx]] = int256(f);\n                ++nextIxFragRows[rowIx];\n            }\n        }\n        return (rowFragIndices, nextIxFragRows);\n    }\n\n    /** @dev run depth-testing on all fragments\n     */\n    function depthTesting(int256[12][] memory fragments, int256 canvasDim)\n        external\n        view\n        returns (int256[12][] memory)\n    {\n        uint256 canvasDimUnsigned = uint256(canvasDim);\n        /// create a 2d array to hold the zValues of the fragments\n        int256[][] memory zValues = ShackledMath.get2dArray(\n            canvasDimUnsigned,\n            canvasDimUnsigned,\n            0\n        );\n\n        /// create a 2d array to hold the fragIndex of the fragments\n        /// as their depth is compared\n        int256[][] memory fragIndex = ShackledMath.get2dArray(\n            canvasDimUnsigned,\n            canvasDimUnsigned,\n            -1 /// -1 so we can check if a fragment was written to this location\n        );\n\n        int256[12][] memory culledFrags = new int256[12][](fragments.length);\n        uint256 nextFragIx = 0;\n\n        /// iterate through all fragments\n        /// and store the index of the fragment with the largest z value\n        /// at each x, y coordinate\n\n        for (uint256 i = 0; i < fragments.length; i++) {\n            int256[12] memory frag = fragments[i];\n\n            /// x and y must be uint for indexing\n            uint256 fragX = uint256(frag[0]);\n            uint256 fragY = uint256(frag[1]);\n\n            // console.log(\"checking frag\", i, \"z:\");\n            // console.logInt(frag[2]);\n\n            if (\n                (fragX < canvasDimUnsigned) &&\n                (fragY < canvasDimUnsigned) &&\n                fragX >= 0 &&\n                fragY >= 0\n            ) {\n                // if this is the first fragment seen at (fragX, fragY), ie if fragIndex == 0, add it\n                // or if this frag is closer (lower z value) than the current frag at (fragX, fragY), add it\n                if (\n                    fragIndex[fragX][fragY] == -1 ||\n                    frag[2] >= zValues[fragX][fragY]\n                ) {\n                    zValues[fragX][fragY] = frag[2];\n                    fragIndex[fragX][fragY] = int256(i);\n                }\n            }\n        }\n\n        /// save only the fragments with prefered z values\n        for (uint256 x = 0; x < canvasDimUnsigned; x++) {\n            for (uint256 y = 0; y < canvasDimUnsigned; y++) {\n                int256 fragIx = fragIndex[x][y];\n                /// ensure we have a valid index\n                if (fragIndex[x][y] != -1) {\n                    culledFrags[nextFragIx] = fragments[uint256(fragIx)];\n                    nextFragIx++;\n                }\n            }\n        }\n\n        return ShackledUtils.clipArray12ToLength(culledFrags, nextFragIx);\n    }\n\n    /** @dev apply lighting to the scene and update fragments accordingly\n     */\n    function lightScene(\n        int256[12][] memory fragments,\n        ShackledStructs.LightingParams memory lp\n    ) external view returns (int256[12][] memory) {\n        /// create a struct for the variables to prevent stack too deep\n        LightingVars memory lv;\n\n        // calculate a constant lighting vector and its magniture\n        lv.L = lp.lightPos;\n        lv.lMag = ShackledMath.vector3Len(lv.L);\n\n        for (uint256 f = 0; f < fragments.length; f++) {\n            /// get the fragment's color, norm and position\n            lv.fragCol = [fragments[f][3], fragments[f][4], fragments[f][5]];\n            lv.fragNorm = [fragments[f][6], fragments[f][7], fragments[f][8]];\n            lv.fragPos = [fragments[f][9], fragments[f][10], fragments[f][11]];\n\n            /// calculate the direction to camera / viewer and its magnitude\n            lv.V = ShackledMath.vector3MulScalar(lv.fragPos, -1);\n            lv.vMag = ShackledMath.vector3Len(lv.V);\n\n            /// calculate the direction of the fragment normaland its magnitude\n            lv.N = lv.fragNorm;\n            lv.nMag = ShackledMath.vector3Len(lv.N);\n\n            /// calculate the light vector per-fragment\n            // lv.L = ShackledMath.vector3Sub(lp.lightPos, lv.fragPos);\n            // lv.lMag = ShackledMath.vector3Len(lv.L);\n            lv.falloff = lv.lMag**2; /// lighting intensity fall over the scene\n            lv.lnDot = ShackledMath.vector3Dot(lv.L, lv.N);\n\n            /// implement double-side rendering to account for flipped normals\n            lv.lambertian = ShackledMath.abs(lv.lnDot);\n\n            int256 specular;\n\n            if (lv.lambertian > 0) {\n                int256[3] memory normedL = ShackledMath.vector3NormX(\n                    lv.L,\n                    fidelity\n                );\n                int256[3] memory normedV = ShackledMath.vector3NormX(\n                    lv.V,\n                    fidelity\n                );\n\n                int256[3] memory H = ShackledMath.vector3Add(normedL, normedV);\n\n                int256 hnDot = int256(\n                    ShackledMath.vector3Dot(\n                        ShackledMath.vector3NormX(H, fidelity),\n                        ShackledMath.vector3NormX(lv.N, fidelity)\n                    )\n                );\n\n                specular = calculateSpecular(\n                    lp.lightSpecPower,\n                    hnDot,\n                    fidelity,\n                    lp.inverseShininess\n                );\n            }\n\n            // Calculate the colour and write it into the fragment\n            int256[3] memory colAmbi = ShackledMath.vector3Add(\n                lv.fragCol,\n                ShackledMath.vector3MulScalar(\n                    lp.lightColAmbi,\n                    lp.lightAmbiPower\n                )\n            );\n\n            /// finalise and color the diffuse lighting\n            int256[3] memory colDiff = ShackledMath.vector3MulScalar(\n                lp.lightColDiff,\n                ((lp.lightDiffPower * lv.lambertian) / (lv.lMag * lv.nMag)) /\n                    lv.falloff\n            );\n\n            /// finalise and color the specular lighting\n            int256[3] memory colSpec = ShackledMath.vector3DivScalar(\n                ShackledMath.vector3MulScalar(lp.lightColSpec, specular),\n                lv.falloff\n            );\n\n            // add up the colour components\n            int256[3] memory col = ShackledMath.vector3Add(\n                ShackledMath.vector3Add(colAmbi, colDiff),\n                colSpec\n            );\n\n            /// update the fragment's colour in place\n            fragments[f][3] = col[0];\n            fragments[f][4] = col[1];\n            fragments[f][5] = col[2];\n        }\n        return fragments;\n    }\n\n    /** @dev calculate the specular lighting parameter */\n    function calculateSpecular(\n        int256 lightSpecPower,\n        int256 hnDot,\n        int256 fidelity,\n        uint256 inverseShininess\n    ) internal pure returns (int256 specular) {\n        int256 specAngle = hnDot > int256(0) ? hnDot : int256(0);\n        assembly {\n            specular := sdiv(\n                mul(lightSpecPower, exp(specAngle, inverseShininess)),\n                exp(fidelity, mul(inverseShininess, 2))\n            )\n        }\n    }\n\n    /** @dev get background gradient that fills the canvas */\n    function getBackground(\n        int256 canvasDim,\n        int256[3][2] memory backgroundColor\n    ) external view returns (int256[5][] memory) {\n        int256[5][] memory background = new int256[5][](uint256(canvasDim**2));\n\n        int256 w = canvasDim;\n        uint256 nextIx = 0;\n\n        for (int256 i = 0; i < canvasDim; i++) {\n            for (int256 j = 0; j < canvasDim; j++) {\n                // / write coordinates of background pixel\n                background[nextIx][0] = j; /// x\n                background[nextIx][1] = i; /// y\n\n                // / write colours of background pixel\n                // / get weighted average of top and bottom color according to row (i)\n                background[nextIx][2] = /// r\n                    ((backgroundColor[0][0] * i) +\n                        (backgroundColor[1][0] * (w - i))) /\n                    w;\n\n                background[nextIx][3] = /// g\n                    ((backgroundColor[0][1] * i) +\n                        (backgroundColor[1][1] * (w - i))) /\n                    w;\n\n                background[nextIx][4] = /// b\n                    ((backgroundColor[0][2] * i) +\n                        (backgroundColor[1][2] * (w - i))) /\n                    w;\n\n                ++nextIx;\n            }\n        }\n        return background;\n    }\n}\n"
    },
    "contracts/ShackledMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.0;\n\nlibrary ShackledMath {\n    /** @dev Get the minimum of two numbers */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /** @dev Get the maximum of two numbers */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /** @dev perform a modulo operation, with support for negative numbers */\n    function mod(int256 n, int256 m) internal pure returns (int256) {\n        if (n < 0) {\n            return ((n % m) + m) % m;\n        } else {\n            return n % m;\n        }\n    }\n\n    /** @dev 'randomly' select n numbers between 0 and m \n    (useful for getting a randomly sampled index)\n    */\n    function randomIdx(\n        bytes32 seedModifier,\n        uint256 n, // number of elements to select\n        uint256 m // max value of elements\n    ) internal pure returns (uint256[] memory) {\n        uint256[] memory result = new uint256[](n);\n        for (uint256 i = 0; i < n; i++) {\n            result[i] =\n                uint256(keccak256(abi.encodePacked(seedModifier, i))) %\n                m;\n        }\n        return result;\n    }\n\n    /** @dev create a 2d array and fill with a single value */\n    function get2dArray(\n        uint256 m,\n        uint256 q,\n        int256 value\n    ) internal pure returns (int256[][] memory) {\n        /// Create a matrix of values with dimensions (m, q)\n        int256[][] memory rows = new int256[][](m);\n        for (uint256 i = 0; i < m; i++) {\n            int256[] memory row = new int256[](q);\n            for (uint256 j = 0; j < q; j++) {\n                row[j] = value;\n            }\n            rows[i] = row;\n        }\n        return rows;\n    }\n\n    /** @dev get the absolute of a number\n     */\n    function abs(int256 x) internal pure returns (int256) {\n        assembly {\n            if slt(x, 0) {\n                x := sub(0, x)\n            }\n        }\n        return x;\n    }\n\n    /** @dev get the square root of a number\n     */\n    function sqrt(int256 y) internal pure returns (int256 z) {\n        assembly {\n            if sgt(y, 3) {\n                z := y\n                let x := add(div(y, 2), 1)\n                for {\n\n                } slt(x, z) {\n\n                } {\n                    z := x\n                    x := div(add(div(y, x), x), 2)\n                }\n            }\n            if and(slt(y, 4), sgt(y, 0)) {\n                z := 1\n            }\n        }\n    }\n\n    /** @dev get the hypotenuse of a triangle given the length of 2 sides\n     */\n    function hypot(int256 x, int256 y) internal pure returns (int256) {\n        int256 sumsq;\n        assembly {\n            let xsq := mul(x, x)\n            let ysq := mul(y, y)\n            sumsq := add(xsq, ysq)\n        }\n\n        return sqrt(sumsq);\n    }\n\n    /** @dev addition between two vectors (size 3)\n     */\n    function vector3Add(int256[3] memory v1, int256[3] memory v2)\n        internal\n        pure\n        returns (int256[3] memory result)\n    {\n        assembly {\n            mstore(result, add(mload(v1), mload(v2)))\n            mstore(\n                add(result, 0x20),\n                add(mload(add(v1, 0x20)), mload(add(v2, 0x20)))\n            )\n            mstore(\n                add(result, 0x40),\n                add(mload(add(v1, 0x40)), mload(add(v2, 0x40)))\n            )\n        }\n    }\n\n    /** @dev subtraction between two vectors (size 3)\n     */\n    function vector3Sub(int256[3] memory v1, int256[3] memory v2)\n        internal\n        pure\n        returns (int256[3] memory result)\n    {\n        assembly {\n            mstore(result, sub(mload(v1), mload(v2)))\n            mstore(\n                add(result, 0x20),\n                sub(mload(add(v1, 0x20)), mload(add(v2, 0x20)))\n            )\n            mstore(\n                add(result, 0x40),\n                sub(mload(add(v1, 0x40)), mload(add(v2, 0x40)))\n            )\n        }\n    }\n\n    /** @dev multiply a vector (size 3) by a constant\n     */\n    function vector3MulScalar(int256[3] memory v, int256 a)\n        internal\n        pure\n        returns (int256[3] memory result)\n    {\n        assembly {\n            mstore(result, mul(mload(v), a))\n            mstore(add(result, 0x20), mul(mload(add(v, 0x20)), a))\n            mstore(add(result, 0x40), mul(mload(add(v, 0x40)), a))\n        }\n    }\n\n    /** @dev divide a vector (size 3) by a constant\n     */\n    function vector3DivScalar(int256[3] memory v, int256 a)\n        internal\n        pure\n        returns (int256[3] memory result)\n    {\n        assembly {\n            mstore(result, sdiv(mload(v), a))\n            mstore(add(result, 0x20), sdiv(mload(add(v, 0x20)), a))\n            mstore(add(result, 0x40), sdiv(mload(add(v, 0x40)), a))\n        }\n    }\n\n    /** @dev get the length of a vector (size 3)\n     */\n    function vector3Len(int256[3] memory v) internal pure returns (int256) {\n        int256 res;\n        assembly {\n            let x := mload(v)\n            let y := mload(add(v, 0x20))\n            let z := mload(add(v, 0x40))\n            res := add(add(mul(x, x), mul(y, y)), mul(z, z))\n        }\n        return sqrt(res);\n    }\n\n    /** @dev scale and then normalise a vector (size 3)\n     */\n    function vector3NormX(int256[3] memory v, int256 fidelity)\n        internal\n        pure\n        returns (int256[3] memory result)\n    {\n        int256 l = vector3Len(v);\n        assembly {\n            mstore(result, sdiv(mul(fidelity, mload(add(v, 0x40))), l))\n            mstore(\n                add(result, 0x20),\n                sdiv(mul(fidelity, mload(add(v, 0x20))), l)\n            )\n            mstore(add(result, 0x40), sdiv(mul(fidelity, mload(v)), l))\n        }\n    }\n\n    /** @dev get the dot-product of two vectors (size 3)\n     */\n    function vector3Dot(int256[3] memory v1, int256[3] memory v2)\n        internal\n        view\n        returns (int256 result)\n    {\n        assembly {\n            result := add(\n                add(\n                    mul(mload(v1), mload(v2)),\n                    mul(mload(add(v1, 0x20)), mload(add(v2, 0x20)))\n                ),\n                mul(mload(add(v1, 0x40)), mload(add(v2, 0x40)))\n            )\n        }\n    }\n\n    /** @dev get the cross product of two vectors (size 3)\n     */\n    function crossProduct(int256[3] memory v1, int256[3] memory v2)\n        internal\n        pure\n        returns (int256[3] memory result)\n    {\n        assembly {\n            mstore(\n                result,\n                sub(\n                    mul(mload(add(v1, 0x20)), mload(add(v2, 0x40))),\n                    mul(mload(add(v1, 0x40)), mload(add(v2, 0x20)))\n                )\n            )\n            mstore(\n                add(result, 0x20),\n                sub(\n                    mul(mload(add(v1, 0x40)), mload(v2)),\n                    mul(mload(v1), mload(add(v2, 0x40)))\n                )\n            )\n            mstore(\n                add(result, 0x40),\n                sub(\n                    mul(mload(v1), mload(add(v2, 0x20))),\n                    mul(mload(add(v1, 0x20)), mload(v2))\n                )\n            )\n        }\n    }\n\n    /** @dev linearly interpolate between two vectors (size 12)\n     */\n    function vector12Lerp(\n        int256[12] memory v1,\n        int256[12] memory v2,\n        int256 ir,\n        int256 scaleFactor\n    ) internal view returns (int256[12] memory result) {\n        int256[12] memory vd = vector12Sub(v2, v1);\n        // loop through all 12 items\n        assembly {\n            let ix\n            for {\n                let i := 0\n            } lt(i, 0xC) {\n                // (i < 12)\n                i := add(i, 1)\n            } {\n                /// get index of the next element\n                ix := mul(i, 0x20)\n\n                /// store into the result array\n                mstore(\n                    add(result, ix),\n                    add(\n                        // v1[i] + (ir * vd[i]) / 1e3\n                        mload(add(v1, ix)),\n                        sdiv(mul(ir, mload(add(vd, ix))), 1000)\n                    )\n                )\n            }\n        }\n    }\n\n    /** @dev subtraction between two vectors (size 12)\n     */\n    function vector12Sub(int256[12] memory v1, int256[12] memory v2)\n        internal\n        view\n        returns (int256[12] memory result)\n    {\n        // loop through all 12 items\n        assembly {\n            let ix\n            for {\n                let i := 0\n            } lt(i, 0xC) {\n                // (i < 12)\n                i := add(i, 1)\n            } {\n                /// get index of the next element\n                ix := mul(i, 0x20)\n                /// store into the result array\n                mstore(\n                    add(result, ix),\n                    sub(\n                        // v1[ix] - v2[ix]\n                        mload(add(v1, ix)),\n                        mload(add(v2, ix))\n                    )\n                )\n            }\n        }\n    }\n\n    /** @dev map a number from one range into another\n     */\n    function mapRangeToRange(\n        int256 num,\n        int256 inMin,\n        int256 inMax,\n        int256 outMin,\n        int256 outMax\n    ) internal pure returns (int256 res) {\n        assembly {\n            res := add(\n                sdiv(\n                    mul(sub(outMax, outMin), sub(num, inMin)),\n                    sub(inMax, inMin)\n                ),\n                outMin\n            )\n        }\n    }\n}\n"
    },
    "contracts/Trigonometry.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/**\n * @notice Solidity library offering basic trigonometry functions where inputs and outputs are\n * integers. Inputs are specified in radians scaled by 1e18, and similarly outputs are scaled by 1e18.\n *\n * This implementation is based off the Solidity trigonometry library written by Lefteris Karapetsas\n * which can be found here: https://github.com/Sikorkaio/sikorka/blob/e75c91925c914beaedf4841c0336a806f2b5f66d/contracts/trigonometry.sol\n *\n * Compared to Lefteris' implementation, this version makes the following changes:\n *   - Uses a 32 bits instead of 16 bits for improved accuracy\n *   - Updated for Solidity 0.8.x\n *   - Various gas optimizations\n *   - Change inputs/outputs to standard trig format (scaled by 1e18) instead of requiring the\n *     integer format used by the algorithm\n *\n * Lefertis' implementation is based off Dave Dribin's trigint C library\n *     http://www.dribin.org/dave/trigint/\n *\n * Which in turn is based from a now deleted article which can be found in the Wayback Machine:\n *     http://web.archive.org/web/20120301144605/http://www.dattalo.com/technical/software/pic/picsine.html\n */\n\npragma solidity ^0.8.0;\n\nlibrary Trigonometry {\n    // Table index into the trigonometric table\n    uint256 constant INDEX_WIDTH = 8;\n    // Interpolation between successive entries in the table\n    uint256 constant INTERP_WIDTH = 16;\n    uint256 constant INDEX_OFFSET = 28 - INDEX_WIDTH;\n    uint256 constant INTERP_OFFSET = INDEX_OFFSET - INTERP_WIDTH;\n    uint32 constant ANGLES_IN_CYCLE = 1073741824;\n    uint32 constant QUADRANT_HIGH_MASK = 536870912;\n    uint32 constant QUADRANT_LOW_MASK = 268435456;\n    uint256 constant SINE_TABLE_SIZE = 256;\n\n    // Pi as an 18 decimal value, which is plenty of accuracy: \"For JPL's highest accuracy calculations, which are for\n    // interplanetary navigation, we use 3.141592653589793: https://www.jpl.nasa.gov/edu/news/2016/3/16/how-many-decimals-of-pi-do-we-really-need/\n    uint256 constant PI = 3141592653589793238;\n    uint256 constant TWO_PI = 2 * PI;\n    uint256 constant PI_OVER_TWO = PI / 2;\n\n    // The constant sine lookup table was generated by generate_trigonometry.py. We must use a constant\n    // bytes array because constant arrays are not supported in Solidity. Each entry in the lookup\n    // table is 4 bytes. Since we're using 32-bit parameters for the lookup table, we get a table size\n    // of 2^(32/4) + 1 = 257, where the first and last entries are equivalent (hence the table size of\n    // 256 defined above)\n    uint8 constant entry_bytes = 4; // each entry in the lookup table is 4 bytes\n    uint256 constant entry_mask = ((1 << (8 * entry_bytes)) - 1); // mask used to cast bytes32 -> lookup table entry\n    bytes constant sin_table =\n        hex\"00_00_00_00_00_c9_0f_88_01_92_1d_20_02_5b_26_d7_03_24_2a_bf_03_ed_26_e6_04_b6_19_5d_05_7f_00_35_06_47_d9_7c_07_10_a3_45_07_d9_5b_9e_08_a2_00_9a_09_6a_90_49_0a_33_08_bc_0a_fb_68_05_0b_c3_ac_35_0c_8b_d3_5e_0d_53_db_92_0e_1b_c2_e4_0e_e3_87_66_0f_ab_27_2b_10_72_a0_48_11_39_f0_cf_12_01_16_d5_12_c8_10_6e_13_8e_db_b1_14_55_76_b1_15_1b_df_85_15_e2_14_44_16_a8_13_05_17_6d_d9_de_18_33_66_e8_18_f8_b8_3c_19_bd_cb_f3_1a_82_a0_25_1b_47_32_ef_1c_0b_82_6a_1c_cf_8c_b3_1d_93_4f_e5_1e_56_ca_1e_1f_19_f9_7b_1f_dc_dc_1b_20_9f_70_1c_21_61_b3_9f_22_23_a4_c5_22_e5_41_af_23_a6_88_7e_24_67_77_57_25_28_0c_5d_25_e8_45_b6_26_a8_21_85_27_67_9d_f4_28_26_b9_28_28_e5_71_4a_29_a3_c4_85_2a_61_b1_01_2b_1f_34_eb_2b_dc_4e_6f_2c_98_fb_ba_2d_55_3a_fb_2e_11_0a_62_2e_cc_68_1e_2f_87_52_62_30_41_c7_60_30_fb_c5_4d_31_b5_4a_5d_32_6e_54_c7_33_26_e2_c2_33_de_f2_87_34_96_82_4f_35_4d_90_56_36_04_1a_d9_36_ba_20_13_37_6f_9e_46_38_24_93_b0_38_d8_fe_93_39_8c_dd_32_3a_40_2d_d1_3a_f2_ee_b7_3b_a5_1e_29_3c_56_ba_70_3d_07_c1_d5_3d_b8_32_a5_3e_68_0b_2c_3f_17_49_b7_3f_c5_ec_97_40_73_f2_1d_41_21_58_9a_41_ce_1e_64_42_7a_41_d0_43_25_c1_35_43_d0_9a_ec_44_7a_cd_50_45_24_56_bc_45_cd_35_8f_46_75_68_27_47_1c_ec_e6_47_c3_c2_2e_48_69_e6_64_49_0f_57_ee_49_b4_15_33_4a_58_1c_9d_4a_fb_6c_97_4b_9e_03_8f_4c_3f_df_f3_4c_e1_00_34_4d_81_62_c3_4e_21_06_17_4e_bf_e8_a4_4f_5e_08_e2_4f_fb_65_4c_50_97_fc_5e_51_33_cc_94_51_ce_d4_6e_52_69_12_6e_53_02_85_17_53_9b_2a_ef_54_33_02_7d_54_ca_0a_4a_55_60_40_e2_55_f5_a4_d2_56_8a_34_a9_57_1d_ee_f9_57_b0_d2_55_58_42_dd_54_58_d4_0e_8c_59_64_64_97_59_f3_de_12_5a_82_79_99_5b_10_35_ce_5b_9d_11_53_5c_29_0a_cc_5c_b4_20_df_5d_3e_52_36_5d_c7_9d_7b_5e_50_01_5d_5e_d7_7c_89_5f_5e_0d_b2_5f_e3_b3_8d_60_68_6c_ce_60_ec_38_2f_61_6f_14_6b_61_f1_00_3e_62_71_fa_68_62_f2_01_ac_63_71_14_cc_63_ef_32_8f_64_6c_59_bf_64_e8_89_25_65_63_bf_91_65_dd_fb_d2_66_57_3c_bb_66_cf_81_1f_67_46_c7_d7_67_bd_0f_bc_68_32_57_aa_68_a6_9e_80_69_19_e3_1f_69_8c_24_6b_69_fd_61_4a_6a_6d_98_a3_6a_dc_c9_64_6b_4a_f2_78_6b_b8_12_d0_6c_24_29_5f_6c_8f_35_1b_6c_f9_34_fb_6d_62_27_f9_6d_ca_0d_14_6e_30_e3_49_6e_96_a9_9c_6e_fb_5f_11_6f_5f_02_b1_6f_c1_93_84_70_23_10_99_70_83_78_fe_70_e2_cb_c5_71_41_08_04_71_9e_2c_d1_71_fa_39_48_72_55_2c_84_72_af_05_a6_73_07_c3_cf_73_5f_66_25_73_b5_eb_d0_74_0b_53_fa_74_5f_9d_d0_74_b2_c8_83_75_04_d3_44_75_55_bd_4b_75_a5_85_ce_75_f4_2c_0a_76_41_af_3c_76_8e_0e_a5_76_d9_49_88_77_23_5f_2c_77_6c_4e_da_77_b4_17_df_77_fa_b9_88_78_40_33_28_78_84_84_13_78_c7_ab_a1_79_09_a9_2c_79_4a_7c_11_79_8a_23_b0_79_c8_9f_6d_7a_05_ee_ac_7a_42_10_d8_7a_7d_05_5a_7a_b6_cb_a3_7a_ef_63_23_7b_26_cb_4e_7b_5d_03_9d_7b_92_0b_88_7b_c5_e2_8f_7b_f8_88_2f_7c_29_fb_ed_7c_5a_3d_4f_7c_89_4b_dd_7c_b7_27_23_7c_e3_ce_b1_7d_0f_42_17_7d_39_80_eb_7d_62_8a_c5_7d_8a_5f_3f_7d_b0_fd_f7_7d_d6_66_8e_7d_fa_98_a7_7e_1d_93_e9_7e_3f_57_fe_7e_5f_e4_92_7e_7f_39_56_7e_9d_55_fb_7e_ba_3a_38_7e_d5_e5_c5_7e_f0_58_5f_7f_09_91_c3_7f_21_91_b3_7f_38_57_f5_7f_4d_e4_50_7f_62_36_8e_7f_75_4e_7f_7f_87_2b_f2_7f_97_ce_bc_7f_a7_36_b3_7f_b5_63_b2_7f_c2_55_95_7f_ce_0c_3d_7f_d8_87_8d_7f_e1_c7_6a_7f_e9_cb_bf_7f_f0_94_77_7f_f6_21_81_7f_fa_72_d0_7f_fd_88_59_7f_ff_62_15_7f_ff_ff_ff\";\n\n    /**\n     * @notice Return the sine of a value, specified in radians scaled by 1e18\n     * @dev This algorithm for converting sine only uses integer values, and it works by dividing the\n     * circle into 30 bit angles, i.e. there are 1,073,741,824 (2^30) angle units, instead of the\n     * standard 360 degrees (2pi radians). From there, we get an output in range -2,147,483,647 to\n     * 2,147,483,647, (which is the max value of an int32) which is then converted back to the standard\n     * range of -1 to 1, again scaled by 1e18\n     * @param _angle Angle to convert\n     * @return Result scaled by 1e18\n     */\n    function sin(uint256 _angle) internal pure returns (int256) {\n        unchecked {\n            // Convert angle from from arbitrary radian value (range of 0 to 2pi) to the algorithm's range\n            // of 0 to 1,073,741,824\n            _angle = (ANGLES_IN_CYCLE * (_angle % TWO_PI)) / TWO_PI;\n\n            // Apply a mask on an integer to extract a certain number of bits, where angle is the integer\n            // whose bits we want to get, the width is the width of the bits (in bits) we want to extract,\n            // and the offset is the offset of the bits (in bits) we want to extract. The result is an\n            // integer containing _width bits of _value starting at the offset bit\n            uint256 interp = (_angle >> INTERP_OFFSET) &\n                ((1 << INTERP_WIDTH) - 1);\n            uint256 index = (_angle >> INDEX_OFFSET) & ((1 << INDEX_WIDTH) - 1);\n\n            // The lookup table only contains data for one quadrant (since sin is symmetric around both\n            // axes), so here we figure out which quadrant we're in, then we lookup the values in the\n            // table then modify values accordingly\n            bool is_odd_quadrant = (_angle & QUADRANT_LOW_MASK) == 0;\n            bool is_negative_quadrant = (_angle & QUADRANT_HIGH_MASK) != 0;\n\n            if (!is_odd_quadrant) {\n                index = SINE_TABLE_SIZE - 1 - index;\n            }\n\n            bytes memory table = sin_table;\n            // We are looking for two consecutive indices in our lookup table\n            // Since EVM is left aligned, to read n bytes of data from idx i, we must read from `i * data_len` + `n`\n            // therefore, to read two entries of size entry_bytes `index * entry_bytes` + `entry_bytes * 2`\n            uint256 offset1_2 = (index + 2) * entry_bytes;\n\n            // This following snippet will function for any entry_bytes <= 15\n            uint256 x1_2;\n            assembly {\n                // mload will grab one word worth of bytes (32), as that is the minimum size in EVM\n                x1_2 := mload(add(table, offset1_2))\n            }\n\n            // We now read the last two numbers of size entry_bytes from x1_2\n            // in example: entry_bytes = 4; x1_2 = 0x00...12345678abcdefgh\n            // therefore: entry_mask = 0xFFFFFFFF\n\n            // 0x00...12345678abcdefgh >> 8*4 = 0x00...12345678\n            // 0x00...12345678 & 0xFFFFFFFF = 0x12345678\n            uint256 x1 = (x1_2 >> (8 * entry_bytes)) & entry_mask;\n            // 0x00...12345678abcdefgh & 0xFFFFFFFF = 0xabcdefgh\n            uint256 x2 = x1_2 & entry_mask;\n\n            // Approximate angle by interpolating in the table, accounting for the quadrant\n            uint256 approximation = ((x2 - x1) * interp) >> INTERP_WIDTH;\n            int256 sine = is_odd_quadrant\n                ? int256(x1) + int256(approximation)\n                : int256(x2) - int256(approximation);\n            if (is_negative_quadrant) {\n                sine *= -1;\n            }\n\n            // Bring result from the range of -2,147,483,647 through 2,147,483,647 to -1e18 through 1e18.\n            // This can never overflow because sine is bounded by the above values\n            return (sine * 1e18) / 2_147_483_647;\n        }\n    }\n\n    /**\n     * @notice Return the cosine of a value, specified in radians scaled by 1e18\n     * @dev This is identical to the sin() method, and just computes the value by delegating to the\n     * sin() method using the identity cos(x) = sin(x + pi/2)\n     * @dev Overflow when `angle + PI_OVER_TWO > type(uint256).max` is ok, results are still accurate\n     * @param _angle Angle to convert\n     * @return Result scaled by 1e18\n     */\n    function cos(uint256 _angle) internal pure returns (int256) {\n        unchecked {\n            return sin(_angle + PI_OVER_TWO);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts-exposed/Shackled.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../contracts/Shackled.sol\";\n\ncontract XShackled is Shackled {\n    constructor() {}\n\n    function xstoreSeedHash(uint256 tokenId) external {\n        return super.storeSeedHash(tokenId);\n    }\n\n    function x_transferOwnership(address newOwner) external {\n        return super._transferOwnership(newOwner);\n    }\n\n    function x_beforeTokenTransfer(address from,address to,uint256 tokenId) external {\n        return super._beforeTokenTransfer(from,to,tokenId);\n    }\n\n    function x_baseURI() external view returns (string memory) {\n        return super._baseURI();\n    }\n\n    function x_safeTransfer(address from,address to,uint256 tokenId,bytes calldata _data) external {\n        return super._safeTransfer(from,to,tokenId,_data);\n    }\n\n    function x_exists(uint256 tokenId) external view returns (bool) {\n        return super._exists(tokenId);\n    }\n\n    function x_isApprovedOrOwner(address spender,uint256 tokenId) external view returns (bool) {\n        return super._isApprovedOrOwner(spender,tokenId);\n    }\n\n    function x_safeMint(address to,uint256 tokenId) external {\n        return super._safeMint(to,tokenId);\n    }\n\n    function x_safeMint(address to,uint256 tokenId,bytes calldata _data) external {\n        return super._safeMint(to,tokenId,_data);\n    }\n\n    function x_mint(address to,uint256 tokenId) external {\n        return super._mint(to,tokenId);\n    }\n\n    function x_burn(uint256 tokenId) external {\n        return super._burn(tokenId);\n    }\n\n    function x_transfer(address from,address to,uint256 tokenId) external {\n        return super._transfer(from,to,tokenId);\n    }\n\n    function x_approve(address to,uint256 tokenId) external {\n        return super._approve(to,tokenId);\n    }\n\n    function x_setApprovalForAll(address owner,address operator,bool approved) external {\n        return super._setApprovalForAll(owner,operator,approved);\n    }\n\n    function x_msgSender() external view returns (address) {\n        return super._msgSender();\n    }\n\n    function x_msgData() external view returns (bytes memory) {\n        return super._msgData();\n    }\n}\n"
    },
    "contracts-exposed/ShackledCoords.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../contracts/ShackledCoords.sol\";\n\ncontract XShackledCoords {\n    constructor() {}\n\n    function xconvertToWorldSpaceWithModelTransform(int256[3][3][] calldata tris,int256 scale,int256[3] calldata position) external view returns (int256[3][] memory) {\n        return ShackledCoords.convertToWorldSpaceWithModelTransform(tris,scale,position);\n    }\n\n    function xbackfaceCulling(int256[3][3][] calldata trisWorldSpace,int256[3][3][] calldata trisCols) external view returns (int256[3][3][] memory, int256[3][3][] memory) {\n        return ShackledCoords.backfaceCulling(trisWorldSpace,trisCols);\n    }\n\n    function xconvertToCameraSpaceViaVertexShader(int256[3][] calldata vertsWorldSpace,int256 canvasDim,bool perspCamera) external view returns (int256[3][] memory) {\n        return ShackledCoords.convertToCameraSpaceViaVertexShader(vertsWorldSpace,canvasDim,perspCamera);\n    }\n\n    function xgetCameraMatrixOrth(int256 canvasDim) external pure returns (int256[4][4][2] memory) {\n        return ShackledCoords.getCameraMatrixOrth(canvasDim);\n    }\n\n    function xgetCameraMatrixPersp() external pure returns (int256[4][4][2] memory) {\n        return ShackledCoords.getCameraMatrixPersp();\n    }\n}\n"
    },
    "contracts-exposed/ShackledGenesis.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../contracts/ShackledGenesis.sol\";\n\ncontract XShackledGenesis {\n    constructor() {}\n\n    function xgenerateGenesisPiece(bytes32 tokenHash) external view returns (ShackledStructs.RenderParams memory, ShackledStructs.Metadata memory) {\n        return ShackledGenesis.generateGenesisPiece(tokenHash);\n    }\n\n    function xgenerateGeometryAndColors(bytes32 tokenHash,int256[3] calldata objPosition) external view returns (ShackledGenesis.FacesVertsCols memory, ColorUtils.ColScheme memory, GeomUtils.GeomSpec memory, GeomUtils.GeomVars memory) {\n        return ShackledGenesis.generateGeometryAndColors(tokenHash,objPosition);\n    }\n\n    function xcreate2dTris(bytes32 tokenHash,GeomUtils.GeomSpec calldata geomSpec) external view returns (int256[3][3][] memory, int256[] memory, int256[] memory) {\n        return ShackledGenesis.create2dTris(tokenHash,geomSpec);\n    }\n\n    function xprismify(bytes32 tokenHash,int256[3][3][] calldata tris,int256[] calldata zFronts,int256[] calldata zBacks) external view returns (GeomUtils.GeomVars memory) {\n        return ShackledGenesis.prismify(tokenHash,tris,zFronts,zBacks);\n    }\n\n    function xmakeFacesVertsCols(bytes32 tokenHash,int256[3][3][] calldata tris,GeomUtils.GeomVars calldata geomVars,ColorUtils.ColScheme calldata scheme,int256[3] calldata objPosition) external view returns (ShackledGenesis.FacesVertsCols memory) {\n        return ShackledGenesis.makeFacesVertsCols(tokenHash,tris,geomVars,scheme,objPosition);\n    }\n}\n\ncontract XColorUtils {\n    constructor() {}\n\n    function xgetColForPrism(bytes32 tokenHash,int256[3][3] calldata triFront,ColorUtils.SubScheme calldata subScheme,int256[3][2] calldata extents) external view returns (int256[3][6] memory) {\n        return ColorUtils.getColForPrism(tokenHash,triFront,subScheme,extents);\n    }\n\n    function xgetSchemeId(bytes32 tokenHash,int256[2][10] calldata weightings) external view returns (uint256) {\n        return ColorUtils.getSchemeId(tokenHash,weightings);\n    }\n\n    function xcopyColor(int256[3] calldata c) external view returns (int256[3] memory) {\n        return ColorUtils.copyColor(c);\n    }\n\n    function xgetScheme(bytes32 tokenHash,int256[3][3][] calldata tris) external view returns (ColorUtils.ColScheme memory) {\n        return ColorUtils.getScheme(tokenHash,tris);\n    }\n\n    function xhsv2rgb(int256 h,int256 s,int256 v) external view returns (int256[3] memory) {\n        return ColorUtils.hsv2rgb(h,s,v);\n    }\n\n    function xrgb2hsv(int256 r,int256 g,int256 b) external view returns (int256[3] memory) {\n        return ColorUtils.rgb2hsv(r,g,b);\n    }\n\n    function xgetJiggle(int256[3] calldata jiggle,bytes32 randomSeed,int256 seedModifier) external view returns (int256[3] memory) {\n        return ColorUtils.getJiggle(jiggle,randomSeed,seedModifier);\n    }\n\n    function xinArray(uint256[] calldata array,uint256 value) external view returns (bool) {\n        return ColorUtils.inArray(array,value);\n    }\n\n    function xapplyDirHelp(int256[3][3] calldata triFront,int256[3] calldata colA,int256[3] calldata colB,int256 dirCode,bool isInnerGradient,int256[3][2] calldata extents) external view returns (int256[3][3] memory) {\n        return ColorUtils.applyDirHelp(triFront,colA,colB,dirCode,isInnerGradient,extents);\n    }\n\n    function xgetOrderedPointIdxsInDir(int256[3][3] calldata tri,int256 dirCode) external view returns (uint256[3] memory) {\n        return ColorUtils.getOrderedPointIdxsInDir(tri,dirCode);\n    }\n\n    function xinterpColHelp(int256[3] calldata colA,int256[3] calldata colB,int256 low,int256 high,int256 val) external view returns (int256[3] memory) {\n        return ColorUtils.interpColHelp(colA,colB,low,high,val);\n    }\n\n    function xgetHighlightPrismIdxs(int256[3][3][] calldata tris,bytes32 tokenHash,uint256 nHighlights,int256 varCode,int256 selCode) external view returns (uint256[] memory) {\n        return ColorUtils.getHighlightPrismIdxs(tris,tokenHash,nHighlights,varCode,selCode);\n    }\n\n    function xgetSortedTrisIdxs(int256[3][3][] calldata tris,uint256 nHighlights,int256 varCode,int256 selCode) external view returns (uint256[] memory) {\n        return ColorUtils.getSortedTrisIdxs(tris,nHighlights,varCode,selCode);\n    }\n}\n\ncontract XGeomUtils {\n    constructor() {}\n\n    function xgenerateSpec(bytes32 tokenHash) external view returns (GeomUtils.GeomSpec memory) {\n        return GeomUtils.generateSpec(tokenHash);\n    }\n\n    function xmakeAdjacentTriangles(bytes32 tokenHash,uint256 attemptNum,uint256 refIdx,GeomUtils.TriVars calldata triVars,GeomUtils.GeomSpec calldata geomSpec,int256 overrideSideIdx,int256 overrideScale,int256 depth) external view returns (GeomUtils.TriVars memory) {\n        return GeomUtils.makeAdjacentTriangles(tokenHash,attemptNum,refIdx,triVars,geomSpec,overrideSideIdx,overrideScale,depth);\n    }\n\n    function xmakeVerticallyOppositeTriangles(bytes32 tokenHash,uint256 attemptNum,uint256 refIdx,GeomUtils.TriVars calldata triVars,GeomUtils.GeomSpec calldata geomSpec,int256 overrideSideIdx,int256 overrideScale,int256 depth) external view returns (GeomUtils.TriVars memory) {\n        return GeomUtils.makeVerticallyOppositeTriangles(tokenHash,attemptNum,refIdx,triVars,geomSpec,overrideSideIdx,overrideScale,depth);\n    }\n\n    function xmakeTriVertOpp(int256[3][3] calldata refTri,GeomUtils.GeomSpec calldata geomSpec,int256 sideIdx,int256 scale) external view returns (int256[3][3] memory) {\n        return GeomUtils.makeTriVertOpp(refTri,geomSpec,sideIdx,scale);\n    }\n\n    function xmakeTriAdjacent(bytes32 tokenHash,GeomUtils.GeomSpec calldata geomSpec,uint256 attemptNum,int256[3][3] calldata refTri,int256 sideIdx,int256 scale,int256 depth) external view returns (int256[3][3] memory) {\n        return GeomUtils.makeTriAdjacent(tokenHash,geomSpec,attemptNum,refTri,sideIdx,scale,depth);\n    }\n\n    function xmakeTri(int256[3] calldata centre,int256 radius,int256 angle) external view returns (int256[3][3] memory) {\n        return GeomUtils.makeTri(centre,radius,angle);\n    }\n\n    function xvector3RotateX(int256[3] calldata v,int256 deg) external view returns (int256[3] memory) {\n        return GeomUtils.vector3RotateX(v,deg);\n    }\n\n    function xvector3RotateY(int256[3] calldata v,int256 deg) external view returns (int256[3] memory) {\n        return GeomUtils.vector3RotateY(v,deg);\n    }\n\n    function xvector3RotateZ(int256[3] calldata v,int256 deg) external view returns (int256[3] memory) {\n        return GeomUtils.vector3RotateZ(v,deg);\n    }\n\n    function xtrigHelper(int256 deg) external view returns (int256, int256) {\n        return GeomUtils.trigHelper(deg);\n    }\n\n    function xgetCenterVec(int256[3][3] calldata tri) external view returns (int256[3] memory) {\n        return GeomUtils.getCenterVec(tri);\n    }\n\n    function xgetRadiusLen(int256[3][3] calldata tri) external view returns (int256) {\n        return GeomUtils.getRadiusLen(tri);\n    }\n\n    function xgetSideLen(int256[3][3] calldata tri) external view returns (int256) {\n        return GeomUtils.getSideLen(tri);\n    }\n\n    function xgetPerpLen(int256[3][3] calldata tri) external view returns (int256) {\n        return GeomUtils.getPerpLen(tri);\n    }\n\n    function xisTriPointingUp(int256[3][3] calldata tri) external view returns (bool) {\n        return GeomUtils.isTriPointingUp(tri);\n    }\n\n    function xareTrisClose(int256[3][3] calldata tri1,int256[3][3] calldata tri2) external view returns (bool) {\n        return GeomUtils.areTrisClose(tri1,tri2);\n    }\n\n    function xareTrisPointsOverlapping(int256[3][3] calldata tri1,int256[3][3] calldata tri2) external view returns (bool) {\n        return GeomUtils.areTrisPointsOverlapping(tri1,tri2);\n    }\n\n    function xisPointInTri(int256[3][3] calldata tri,int256[3] calldata p) external view returns (bool) {\n        return GeomUtils.isPointInTri(tri,p);\n    }\n\n    function xisTriOverlappingWithTris(int256[3][3] calldata tri,int256[3][3][] calldata tris,uint256 nextTriIdx) external view returns (bool) {\n        return GeomUtils.isTriOverlappingWithTris(tri,tris,nextTriIdx);\n    }\n\n    function xisPointCloseToLine(int256[3] calldata p,int256[3] calldata l1,int256[3] calldata l2) external view returns (bool) {\n        return GeomUtils.isPointCloseToLine(p,l1,l2);\n    }\n\n    function xisTrisPointsCloseToLines(int256[3][3] calldata tri,int256[3][3][] calldata tris,uint256 nextTriIdx) external view returns (bool) {\n        return GeomUtils.isTrisPointsCloseToLines(tri,tris,nextTriIdx);\n    }\n\n    function xisTriLegal(int256[3][3] calldata tri,int256[3][3][] calldata tris,uint256 nextTriIdx,int256 minTriRad) external view returns (bool) {\n        return GeomUtils.isTriLegal(tri,tris,nextTriIdx,minTriRad);\n    }\n\n    function xattemptToAddTri(int256[3][3] calldata tri,bytes32 tokenHash,GeomUtils.TriVars calldata triVars,GeomUtils.GeomSpec calldata geomSpec) external view returns (bool) {\n        return GeomUtils.attemptToAddTri(tri,tokenHash,triVars,geomSpec);\n    }\n\n    function xtriRotHelp(int256 axis,int256[3][3] calldata tri,int256 rot) external view returns (int256[3][3] memory) {\n        return GeomUtils.triRotHelp(axis,tri,rot);\n    }\n\n    function xtriBfHelp(int256 axis,int256[3][3][] calldata trisBack,int256[3][3][] calldata trisFront,int256 rot) external view returns (int256[3][3][] memory, int256[3][3][] memory) {\n        return GeomUtils.triBfHelp(axis,trisBack,trisFront,rot);\n    }\n\n    function xgetExtents(int256[3][3][] calldata tris) external view returns (int256[3][2] memory) {\n        return GeomUtils.getExtents(tris);\n    }\n\n    function xcalculateZ(int256[3][3] calldata tri,bytes32 tokenHash,uint256 nextTriIdx,GeomUtils.GeomSpec calldata geomSpec,bool front) external view returns (int256) {\n        return GeomUtils.calculateZ(tri,tokenHash,nextTriIdx,geomSpec,front);\n    }\n\n    function xgetSpecId(bytes32 tokenHash,int256[2][7] calldata weightings) external view returns (uint256) {\n        return GeomUtils.getSpecId(tokenHash,weightings);\n    }\n\n    function xrandN(bytes32 randomSeed,string calldata seedModifier,int256 min,int256 max) external view returns (int256) {\n        return GeomUtils.randN(randomSeed,seedModifier,min,max);\n    }\n\n    function xclipTrisToLength(int256[3][3][] calldata arr,uint256 desiredLen) external view returns (int256[3][3][] memory) {\n        return GeomUtils.clipTrisToLength(arr,desiredLen);\n    }\n\n    function xclipZsToLength(int256[] calldata arr,uint256 desiredLen) external view returns (int256[] memory) {\n        return GeomUtils.clipZsToLength(arr,desiredLen);\n    }\n\n    function xcopyTri(int256[3][3] calldata tri) external view returns (int256[3][3] memory) {\n        return GeomUtils.copyTri(tri);\n    }\n\n    function xcopyTris(int256[3][3][] calldata tris) external view returns (int256[3][3][] memory) {\n        return GeomUtils.copyTris(tris);\n    }\n}\n"
    },
    "contracts-exposed/ShackledMath.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../contracts/ShackledMath.sol\";\n\ncontract XShackledMath {\n    constructor() {}\n\n    function xmin(int256 a,int256 b) external pure returns (int256) {\n        return ShackledMath.min(a,b);\n    }\n\n    function xmax(int256 a,int256 b) external pure returns (int256) {\n        return ShackledMath.max(a,b);\n    }\n\n    function xmod(int256 n,int256 m) external pure returns (int256) {\n        return ShackledMath.mod(n,m);\n    }\n\n    function xrandomIdx(bytes32 seedModifier,uint256 n,uint256 m) external pure returns (uint256[] memory) {\n        return ShackledMath.randomIdx(seedModifier,n,m);\n    }\n\n    function xget2dArray(uint256 m,uint256 q,int256 value) external pure returns (int256[][] memory) {\n        return ShackledMath.get2dArray(m,q,value);\n    }\n\n    function xabs(int256 x) external pure returns (int256) {\n        return ShackledMath.abs(x);\n    }\n\n    function xsqrt(int256 y) external pure returns (int256) {\n        return ShackledMath.sqrt(y);\n    }\n\n    function xhypot(int256 x,int256 y) external pure returns (int256) {\n        return ShackledMath.hypot(x,y);\n    }\n\n    function xvector3Add(int256[3] calldata v1,int256[3] calldata v2) external pure returns (int256[3] memory) {\n        return ShackledMath.vector3Add(v1,v2);\n    }\n\n    function xvector3Sub(int256[3] calldata v1,int256[3] calldata v2) external pure returns (int256[3] memory) {\n        return ShackledMath.vector3Sub(v1,v2);\n    }\n\n    function xvector3MulScalar(int256[3] calldata v,int256 a) external pure returns (int256[3] memory) {\n        return ShackledMath.vector3MulScalar(v,a);\n    }\n\n    function xvector3DivScalar(int256[3] calldata v,int256 a) external pure returns (int256[3] memory) {\n        return ShackledMath.vector3DivScalar(v,a);\n    }\n\n    function xvector3Len(int256[3] calldata v) external pure returns (int256) {\n        return ShackledMath.vector3Len(v);\n    }\n\n    function xvector3NormX(int256[3] calldata v,int256 fidelity) external pure returns (int256[3] memory) {\n        return ShackledMath.vector3NormX(v,fidelity);\n    }\n\n    function xvector3Dot(int256[3] calldata v1,int256[3] calldata v2) external view returns (int256) {\n        return ShackledMath.vector3Dot(v1,v2);\n    }\n\n    function xcrossProduct(int256[3] calldata v1,int256[3] calldata v2) external pure returns (int256[3] memory) {\n        return ShackledMath.crossProduct(v1,v2);\n    }\n\n    function xvector12Lerp(int256[12] calldata v1,int256[12] calldata v2,int256 ir,int256 scaleFactor) external view returns (int256[12] memory) {\n        return ShackledMath.vector12Lerp(v1,v2,ir,scaleFactor);\n    }\n\n    function xvector12Sub(int256[12] calldata v1,int256[12] calldata v2) external view returns (int256[12] memory) {\n        return ShackledMath.vector12Sub(v1,v2);\n    }\n\n    function xmapRangeToRange(int256 num,int256 inMin,int256 inMax,int256 outMin,int256 outMax) external pure returns (int256) {\n        return ShackledMath.mapRangeToRange(num,inMin,inMax,outMin,outMax);\n    }\n}\n"
    },
    "contracts-exposed/ShackledRasteriser.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../contracts/ShackledRasteriser.sol\";\n\ncontract XShackledRasteriser {\n    constructor() {}\n\n    function xinitialiseFragments(int256[3][3][] calldata trisCameraSpace,int256[3][3][] calldata trisWorldSpace,int256[3][3][] calldata trisCols,int256 canvasDim) external view returns (int256[12][3][] memory) {\n        return ShackledRasteriser.initialiseFragments(trisCameraSpace,trisWorldSpace,trisCols,canvasDim);\n    }\n\n    function xrasterise(int256[12][3][] calldata trisFragments,int256 canvasDim,bool wireframe) external view returns (int256[12][] memory) {\n        return ShackledRasteriser.rasterise(trisFragments,canvasDim,wireframe);\n    }\n\n    function xrunBresenhamsAlgorithm(int256[12] calldata f1,int256[12] calldata f2,int256 canvasDim,int256[12][] calldata bresTriFragments,uint256 nextBresTriFragmentIx) external view returns (int256[12][] memory, uint256) {\n        return ShackledRasteriser.runBresenhamsAlgorithm(f1,f2,canvasDim,bresTriFragments,nextBresTriFragmentIx);\n    }\n\n    function xbresenhamsInner(ShackledRasteriser.BresenhamsVars calldata vars,int256 mag,int256[12] calldata fa,int256[12] calldata fb,int256 canvasDim,int256[12][] calldata bresTriFragments,uint256 nextBresTriFragmentIx) external view returns (int256[12][] memory, uint256) {\n        return ShackledRasteriser.bresenhamsInner(vars,mag,fa,fb,canvasDim,bresTriFragments,nextBresTriFragmentIx);\n    }\n\n    function xrunScanline(int256[12][] calldata bresTriFragments,int256[12][] calldata fragments,uint256 nextFragmentsIx,int256 canvasDim) external view returns (int256[12][] memory, uint256) {\n        return ShackledRasteriser.runScanline(bresTriFragments,fragments,nextFragmentsIx,canvasDim);\n    }\n\n    function xgetRowFragIndices(int256[12][] calldata bresTriFragments,int256 canvasDim) external view returns (int256[][] memory, uint256[] memory) {\n        return ShackledRasteriser.getRowFragIndices(bresTriFragments,canvasDim);\n    }\n\n    function xdepthTesting(int256[12][] calldata fragments,int256 canvasDim) external view returns (int256[12][] memory) {\n        return ShackledRasteriser.depthTesting(fragments,canvasDim);\n    }\n\n    function xlightScene(int256[12][] calldata fragments,ShackledStructs.LightingParams calldata lp) external view returns (int256[12][] memory) {\n        return ShackledRasteriser.lightScene(fragments,lp);\n    }\n\n    function xcalculateSpecular(int256 lightSpecPower,int256 hnDot,int256 fidelity,uint256 inverseShininess) external pure returns (int256) {\n        return ShackledRasteriser.calculateSpecular(lightSpecPower,hnDot,fidelity,inverseShininess);\n    }\n\n    function xgetBackground(int256 canvasDim,int256[3][2] calldata backgroundColor) external view returns (int256[5][] memory) {\n        return ShackledRasteriser.getBackground(canvasDim,backgroundColor);\n    }\n}\n"
    },
    "contracts-exposed/ShackledRenderer.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../contracts/ShackledRenderer.sol\";\n\ncontract XShackledRenderer {\n    constructor() {}\n\n    function xrender(ShackledStructs.RenderParams calldata renderParams,int256 canvasDim,bool returnSVG) external view returns (string memory) {\n        return ShackledRenderer.render(renderParams,canvasDim,returnSVG);\n    }\n\n    function xprepareGeometryForRender(ShackledStructs.RenderParams calldata renderParams,int256 canvasDim) external view returns (int256[12][3][] memory) {\n        return ShackledRenderer.prepareGeometryForRender(renderParams,canvasDim);\n    }\n}\n"
    },
    "contracts-exposed/ShackledStructs.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../contracts/ShackledStructs.sol\";\n\ncontract XShackledStructs {\n    constructor() {}\n}\n"
    },
    "contracts-exposed/ShackledUtils.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../contracts/ShackledUtils.sol\";\n\ncontract XShackledUtils {\n    constructor() {}\n\n    function xflattenTris(int256[3][3][] calldata tris) external pure returns (int256[3][] memory) {\n        return ShackledUtils.flattenTris(tris);\n    }\n\n    function xunflattenVertsToTris(int256[3][] calldata verts) external pure returns (int256[3][3][] memory) {\n        return ShackledUtils.unflattenVertsToTris(verts);\n    }\n\n    function xclipArray12ToLength(int256[12][] calldata arr,uint256 desiredLen) external pure returns (int256[12][] memory) {\n        return ShackledUtils.clipArray12ToLength(arr,desiredLen);\n    }\n\n    function xuint2str(uint256 _i) external pure returns (string memory) {\n        return ShackledUtils.uint2str(_i);\n    }\n\n    function xgetHex(uint256 _i) external pure returns (bytes memory) {\n        return ShackledUtils.getHex(_i);\n    }\n\n    function xgetSVGContainer(string calldata encodedBitmap,int256 canvasDim,uint256 outputHeight,uint256 outputWidth) external view returns (string memory) {\n        return ShackledUtils.getSVGContainer(encodedBitmap,canvasDim,outputHeight,outputWidth);\n    }\n\n    function xgetAttributes(ShackledStructs.Metadata calldata metadata) external pure returns (bytes memory) {\n        return ShackledUtils.getAttributes(metadata);\n    }\n\n    function xgetEncodedMetadata(string calldata image,ShackledStructs.Metadata calldata metadata,uint256 tokenId) external view returns (string memory) {\n        return ShackledUtils.getEncodedMetadata(image,metadata,tokenId);\n    }\n\n    function xgetEncodedBitmap(int256[12][] calldata fragments,int256[5][] calldata background,int256 canvasDim,bool invert) external view returns (string memory) {\n        return ShackledUtils.getEncodedBitmap(fragments,background,canvasDim,invert);\n    }\n\n    function xwriteFragmentsToBytesArray(int256[12][] calldata fragments,bytes calldata bytesArray,uint256 canvasDimUnsigned,bool invert) external pure returns (bytes memory) {\n        return ShackledUtils.writeFragmentsToBytesArray(fragments,bytesArray,canvasDimUnsigned,invert);\n    }\n\n    function xwriteBackgroundToBytesArray(int256[5][] calldata background,bytes calldata bytesArray,uint256 canvasDimUnsigned,bool invert) external pure returns (bytes memory) {\n        return ShackledUtils.writeBackgroundToBytesArray(background,bytesArray,canvasDimUnsigned,invert);\n    }\n}\n\ncontract XBase64 {\n    constructor() {}\n\n    function xencode(bytes calldata data) external view returns (string memory) {\n        return Base64.encode(data);\n    }\n}\n\ncontract XBytesUtils {\n    constructor() {}\n\n    function xchar(bytes1 b) external view returns (bytes1) {\n        return BytesUtils.char(b);\n    }\n\n    function xbytes32string(bytes32 b32) external view returns (string memory) {\n        return BytesUtils.bytes32string(b32);\n    }\n\n    function xhach(string calldata value) external view returns (string memory) {\n        return BytesUtils.hach(value);\n    }\n\n    function xMergeBytes(bytes calldata a,bytes calldata b) external pure returns (bytes memory) {\n        return BytesUtils.MergeBytes(a,b);\n    }\n}\n"
    },
    "contracts-exposed/Trigonometry.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../contracts/Trigonometry.sol\";\n\ncontract XTrigonometry {\n    constructor() {}\n\n    function xsin(uint256 _angle) external pure returns (int256) {\n        return Trigonometry.sin(_angle);\n    }\n\n    function xcos(uint256 _angle) external pure returns (int256) {\n        return Trigonometry.cos(_angle);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    },
    "libraries": {
      "contracts/ShackledGenesis.sol": {
        "ShackledGenesis": "0xf30168b5983ea80007bf973b501cdd30b535a7de"
      },
      "contracts/ShackledRenderer.sol": {
        "ShackledRenderer": "0x2221aab4a036dc5605c18c9cba4b947cf01995ce"
      }
    }
  }
}