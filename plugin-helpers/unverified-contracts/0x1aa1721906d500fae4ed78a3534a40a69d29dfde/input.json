{
  "language": "Solidity",
  "sources": {
    "/home/ubuntu/travala-nft-smart-contract/contracts/CardManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"./CardBase.sol\";\nimport \"./CardNft.sol\";\nimport \"./PriceConsumerV3.sol\";\n\ncontract CardManager is PriceConsumerV3, CardBase, ReentrancyGuard {\n  using SafeERC20 for IERC20;\n\n  // Receive the fund collected\n  address payable public _beneficiary;\n\n  uint256 public _totalAvaTokensCollected;\n  uint256 public _totalNativeTokensCollected;\n\n  // AVA token\n  IERC20 public immutable _avaToken;\n\n  // CardNft contract\n  CardNft public immutable _cardNft;\n\n  // \"decimals\" is 18 for AVA tokens\n  uint256 constant E18 = 10**18;\n\n  uint256 public _cardPriceUsdCent;\n  uint256 public _maxSupplyForSale = 900;\n\n  bool public _purchaseInAvaEnabled = false;\n\n  // Keep current number of minted cards\n  uint256 public _cardNumForSaleMinted;\n\n  uint256 public _giveBackToCommunityPercent = 0;\n  address payable public _communityPoolWallet;\n\n  uint256 public _discountWhenBuyInAvaPercent = 5;\n\n  // Update frequently by external background service\n  uint256 public _avaTokenPriceInUsdCent; // 300 == 3 USD (i.e. 1 AVA costs 3 USD)\n\n  // Max allowable cards per wallet address for private sale depending on smart level\n  mapping(address => uint256) public _maxAllowableCardsForPrivateSale;\n  bool public _privateSaleEnabled = true;\n  // Max allowable cards per wallet address for public sale\n  uint256 public _maxAllowableCardsForPublicSale = 1;\n  // Keep track of the number of minted cards per wallet address\n  mapping(address => uint256) public _cardNumPerWalletMinted;\n\n  event EventBuyInAva(\n    address buyer_,\n    uint256[] mintedTokenIdList_,\n    uint256 cardAmount_,\n    uint256 totalAvaTokensToPay_\n  );\n  event EventBuyInNative(\n    address buyer_,\n    uint256[] mintedTokenIdList_,\n    uint256 cardAmount_,\n    uint256 totalToPay_\n  );\n\n  event EventMintAfterPayment(\n    address buyer_,\n    address minter_,\n    uint256[] mintedTokenIdList_,\n    uint256 cardAmount_\n  );\n\n  event EventSetCardPriceUsdCent(uint256 cardPriceUsdCent_);\n  event EventSetPurchaseInAvaEnabled(bool purchaseInAvaEnabled_);\n  event EventSetMaxSupplyForSale(uint256 maxSupplyForSale_);\n  event EventSetGiveBackToCommunityPercent(uint256 giveBackToCommunityPercent_);\n  event EventSetCommunityPoolWallet(address communityPoolWallet_);\n  event EventSetDiscountWhenBuyInAvaPercent(\n    uint256 discountWhenBuyInAvaPercent_\n  );\n  event EventSetAvaTokenPriceInUsdCent(uint256 avaTokenPriceInUsdCent_);\n  event EventSetBeneficiary(address beneficiary_);\n  event EventSetPrivateSaleEnabled(bool privateSaleEnabled_);\n  event EventSetMaxAllowableCardsForPrivateSale(\n    address wallet_,\n    uint256 maxCards_\n  );\n  event EventBatchSetMaxAllowableCardsForPrivateSale(\n    uint256 walletListLength,\n    uint256 maxCardsListLength\n  );\n  event EventSetMaxAllowableCardsForPublicSale(\n    uint256 maxAllowableCardsForPublicSale_\n  );\n\n  constructor(\n    address avaTokenAddress_,\n    address cardNftAddress_,\n    address beneficiary_\n  ) {\n    require(\n      avaTokenAddress_ != address(0),\n      \"CardManager: Invalid avaTokenAddress_ address\"\n    );\n\n    require(\n      cardNftAddress_ != address(0),\n      \"CardManager: Invalid cardNftAddress_ address\"\n    );\n\n    require(\n      beneficiary_ != address(0),\n      \"CardManager: Invalid beneficiary_ address\"\n    );\n\n    _avaToken = IERC20(avaTokenAddress_);\n    _cardNft = CardNft(cardNftAddress_);\n    _beneficiary = payable(beneficiary_);\n  }\n\n  // Check if a wallet address can still buy depending on its number of minted cards\n  function checkIfCanBuy(address wallet_, uint256 cardAmount_)\n    public\n    view\n    returns (bool)\n  {\n    require(\n      (_cardNumForSaleMinted + cardAmount_) <= _maxSupplyForSale,\n      \"CardManager: Max supply for sale exceed\"\n    );\n\n    if (_privateSaleEnabled) {\n      require(\n        _maxAllowableCardsForPrivateSale[wallet_] > 0,\n        \"CardManager: Not whitelisted wallet for private sale\"\n      );\n\n      require(\n        (_cardNumPerWalletMinted[wallet_] + cardAmount_) <=\n          _maxAllowableCardsForPrivateSale[wallet_],\n        \"CardManager: max allowable cards per wallet for private sale exceed\"\n      );\n    } else {\n      require(\n        (_cardNumPerWalletMinted[wallet_] + cardAmount_) <=\n          _maxAllowableCardsForPublicSale,\n        \"CardManager: max allowable cards per wallet for public sale exceed\"\n      );\n    }\n\n    return true;\n  }\n\n  ////////// Start setter /////////\n\n  // Set basic info to start the card sale\n  function setCardSaleInfo(\n    uint256 cardPriceUsdCent_,\n    uint256 maxSupplyForSale_,\n    uint256 giveBackToCommunityPercent_,\n    uint256 avaTokenPriceInUsdCent_,\n    uint256 discountWhenBuyInAvaPercent_,\n    address communityPoolWallet_\n  ) external isOwner {\n    setCardPriceUsdCent(cardPriceUsdCent_);\n    setMaxSupplyForSale(maxSupplyForSale_);\n    setGiveBackToCommunityPercent(giveBackToCommunityPercent_);\n    setAvaTokenPriceInUsdCent(avaTokenPriceInUsdCent_);\n    setDiscountWhenBuyInAvaPercent(discountWhenBuyInAvaPercent_);\n    setCommunityPoolWallet(communityPoolWallet_);\n  }\n\n  function setCardPriceUsdCent(uint256 cardPriceUsdCent_) public isOwner {\n    require(cardPriceUsdCent_ > 0, \"CardManager: Invalid cardPriceUsdCent_\");\n\n    _cardPriceUsdCent = cardPriceUsdCent_;\n\n    emit EventSetCardPriceUsdCent(cardPriceUsdCent_);\n  }\n\n  function setPurchaseInAvaEnabled(bool purchaseInAvaEnabled_)\n    external\n    isOwner\n  {\n    _purchaseInAvaEnabled = purchaseInAvaEnabled_;\n\n    emit EventSetPurchaseInAvaEnabled(purchaseInAvaEnabled_);\n  }\n\n  function setMaxSupplyForSale(uint256 maxSupplyForSale_) public isOwner {\n    require(\n      maxSupplyForSale_ >= _cardNumForSaleMinted,\n      \"CardManager: Invalid maxSupplyForSale_\"\n    );\n\n    _maxSupplyForSale = maxSupplyForSale_;\n\n    emit EventSetMaxSupplyForSale(maxSupplyForSale_);\n  }\n\n  function setGiveBackToCommunityPercent(uint256 giveBackToCommunityPercent_)\n    public\n    isOwner\n  {\n    // giveBackToCommunityPercent_ can be zero\n    require(\n      giveBackToCommunityPercent_ <= 100,\n      \"CardManager: Invalid giveBackToCommunityPercent_\"\n    );\n\n    _giveBackToCommunityPercent = giveBackToCommunityPercent_;\n\n    emit EventSetGiveBackToCommunityPercent(giveBackToCommunityPercent_);\n  }\n\n  function setCommunityPoolWallet(address communityPoolWallet_) public isOwner {\n    // communityPoolWallet_ can be address(0)\n    _communityPoolWallet = payable(communityPoolWallet_);\n\n    emit EventSetCommunityPoolWallet(communityPoolWallet_);\n  }\n\n  function setDiscountWhenBuyInAvaPercent(uint256 discountWhenBuyInAvaPercent_)\n    public\n    isOwner\n  {\n    // discountWhenBuyInAvaPercent_ can be zero\n    require(\n      discountWhenBuyInAvaPercent_ <= 100,\n      \"CardManager: Invalid discountWhenBuyInAvaPercent_\"\n    );\n\n    _discountWhenBuyInAvaPercent = discountWhenBuyInAvaPercent_;\n\n    emit EventSetDiscountWhenBuyInAvaPercent(discountWhenBuyInAvaPercent_);\n  }\n\n  function setAvaTokenPriceInUsdCent(uint256 avaTokenPriceInUsdCent_)\n    public\n    isAuthorized\n  {\n    // avaTokenPriceInUsdCent_ can be zero\n    _avaTokenPriceInUsdCent = avaTokenPriceInUsdCent_;\n\n    emit EventSetAvaTokenPriceInUsdCent(avaTokenPriceInUsdCent_);\n  }\n\n  function setBeneficiary(address beneficiary_) external isOwner {\n    require(\n      beneficiary_ != address(0),\n      \"CardManager: Invalid beneficiary_ address\"\n    );\n    _beneficiary = payable(beneficiary_);\n\n    emit EventSetBeneficiary(beneficiary_);\n  }\n\n  function setPrivateSaleEnabled(bool privateSaleEnabled_) external isOwner {\n    _privateSaleEnabled = privateSaleEnabled_;\n\n    emit EventSetPrivateSaleEnabled(privateSaleEnabled_);\n  }\n\n  function setMaxAllowableCardsForPrivateSale(\n    address wallet_,\n    uint256 maxCards_\n  ) public isAuthorized {\n    require(wallet_ != address(0), \"CardManager: Invalid wallet_ address\");\n    _maxAllowableCardsForPrivateSale[wallet_] = maxCards_;\n\n    emit EventSetMaxAllowableCardsForPrivateSale(wallet_, maxCards_);\n  }\n\n  function batchSetMaxAllowableCardsForPrivateSale(\n    address[] memory walletList_,\n    uint256[] memory maxCardsList_\n  ) external isAuthorized {\n    require(\n      walletList_.length == maxCardsList_.length,\n      \"CardManager: walletList_ and maxCardsList_ do not have same length\"\n    );\n\n    for (uint256 i = 0; i < walletList_.length; i++) {\n      setMaxAllowableCardsForPrivateSale(walletList_[i], maxCardsList_[i]);\n    }\n\n    emit EventBatchSetMaxAllowableCardsForPrivateSale(\n      walletList_.length,\n      maxCardsList_.length\n    );\n  }\n\n  function setMaxAllowableCardsForPublicSale(\n    uint256 maxAllowableCardsForPublicSale_\n  ) external isOwner {\n    require(\n      maxAllowableCardsForPublicSale_ > 0,\n      \"CardManager: Invalid maxAllowableCardsForPublicSale_\"\n    );\n\n    _maxAllowableCardsForPublicSale = maxAllowableCardsForPublicSale_;\n\n    emit EventSetMaxAllowableCardsForPublicSale(\n      maxAllowableCardsForPublicSale_\n    );\n  }\n\n  ////////// End setter /////////\n\n  function getCardSaleInfo()\n    external\n    view\n    returns (\n      uint256,\n      uint256,\n      uint256,\n      uint256,\n      uint256,\n      address\n    )\n  {\n    return (\n      _cardPriceUsdCent,\n      _maxSupplyForSale,\n      _giveBackToCommunityPercent,\n      _avaTokenPriceInUsdCent,\n      _discountWhenBuyInAvaPercent,\n      _communityPoolWallet\n    );\n  }\n\n  // Get price of ETH or BNB\n  function getNativeCoinPriceInUsdCent() public view returns (uint256) {\n    uint256 nativeCoinPriceInUsdCent = uint256(getThePrice() / 10**6);\n    return nativeCoinPriceInUsdCent;\n  }\n\n  // Get card price in AVA tokens depending on the current price of AVA\n  function getCardPriceInAvaTokens() public view returns (uint256) {\n    uint256 cardPriceInAvaTokens = (_cardPriceUsdCent * E18) /\n      _avaTokenPriceInUsdCent;\n\n    return cardPriceInAvaTokens;\n  }\n\n  // Buy card in AVA tokens\n  function buyInAva(uint256 cardAmount_)\n    external\n    whenNotPaused\n    nonReentrant\n    returns (uint256[] memory)\n  {\n    require(_purchaseInAvaEnabled, \"CardManager: buy in AVA disabled\");\n\n    require(cardAmount_ > 0, \"CardManager: invalid cardAmount_\");\n\n    require(\n      _avaTokenPriceInUsdCent > 0,\n      \"CardManager: AVA token price not set\"\n    );\n\n    require(_cardPriceUsdCent > 0, \"CardManager: invalid card price\");\n\n    uint256 cardPriceInAvaTokens = getCardPriceInAvaTokens();\n    uint256 totalAvaTokensToPay = cardPriceInAvaTokens * cardAmount_;\n\n    if (_discountWhenBuyInAvaPercent > 0) {\n      totalAvaTokensToPay =\n        totalAvaTokensToPay -\n        ((totalAvaTokensToPay * _discountWhenBuyInAvaPercent) / 100);\n    }\n\n    // Check if user balance has enough tokens\n    require(\n      totalAvaTokensToPay <= _avaToken.balanceOf(_msgSender()),\n      \"CardManager: user balance does not have enough AVA tokens\"\n    );\n\n    // Check if can buy\n    checkIfCanBuy(_msgSender(), cardAmount_);\n\n    // Transfer tokens from user wallet to beneficiary or communityPool\n    uint256 giveBack = (totalAvaTokensToPay * _giveBackToCommunityPercent) /\n      100;\n    _avaToken.safeTransferFrom(\n      _msgSender(),\n      _beneficiary,\n      totalAvaTokensToPay - giveBack\n    );\n    if (giveBack > 0 && _communityPoolWallet != address(0)) {\n      _avaToken.safeTransferFrom(_msgSender(), _communityPoolWallet, giveBack);\n    }\n\n    _totalAvaTokensCollected += totalAvaTokensToPay;\n\n    _cardNumPerWalletMinted[_msgSender()] += cardAmount_;\n    _cardNumForSaleMinted += cardAmount_;\n\n    // Mint card\n    uint256[] memory mintedTokenIdList = new uint256[](cardAmount_);\n\n    if (cardAmount_ > 1) {\n      mintedTokenIdList = _cardNft.mintCardMany(_msgSender(), cardAmount_);\n    } else {\n      uint256 mintedTokenId = _cardNft.mintCard(_msgSender());\n      mintedTokenIdList[0] = mintedTokenId;\n    }\n\n    emit EventBuyInAva(\n      _msgSender(),\n      mintedTokenIdList,\n      cardAmount_,\n      totalAvaTokensToPay\n    );\n\n    return mintedTokenIdList;\n  }\n\n  function getCardPriceInNative() public view returns (uint256) {\n    uint256 nativeCoinPriceInUsdCent = getNativeCoinPriceInUsdCent();\n\n    uint256 cardPriceInNative = (_cardPriceUsdCent * E18) /\n      nativeCoinPriceInUsdCent;\n\n    return cardPriceInNative;\n  }\n\n  // Buy card in native coins (ETH or BNB)\n  function buyInNative(uint256 cardAmount_)\n    external\n    payable\n    whenNotPaused\n    nonReentrant\n    returns (uint256[] memory)\n  {\n    require(cardAmount_ > 0, \"CardManager: invalid cardAmount_\");\n\n    require(_cardPriceUsdCent > 0, \"CardManager: invalid card price\");\n\n    uint256 cardPriceInNative = getCardPriceInNative();\n    uint256 totalToPay = cardPriceInNative * cardAmount_;\n\n    // Check if user-transferred amount is enough\n    require(\n      msg.value >= totalToPay,\n      \"CardManager: user-transferred amount not enough\"\n    );\n\n    // Check if can buy\n    checkIfCanBuy(_msgSender(), cardAmount_);\n\n    // Transfer msg.value from user wallet to beneficiary\n    uint256 giveBack = (msg.value * _giveBackToCommunityPercent) / 100;\n    (bool success, ) = _beneficiary.call{ value: (msg.value - giveBack) }(\"\");\n    require(success, \"CardManager: ETH transfer to beneficiary failed\");\n\n    if (giveBack > 0 && _communityPoolWallet != address(0)) {\n      (bool success2, ) = _communityPoolWallet.call{ value: giveBack }(\"\");\n      require(\n        success2,\n        \"CardManager: ETH transfer to communityPoolWallet failed\"\n      );\n    }\n\n    _totalNativeTokensCollected += msg.value;\n\n    _cardNumPerWalletMinted[_msgSender()] += cardAmount_;\n    _cardNumForSaleMinted += cardAmount_;\n\n    // Mint card\n    uint256[] memory mintedTokenIdList = new uint256[](cardAmount_);\n\n    if (cardAmount_ > 1) {\n      mintedTokenIdList = _cardNft.mintCardMany(_msgSender(), cardAmount_);\n    } else {\n      uint256 mintedTokenId = _cardNft.mintCard(_msgSender());\n      mintedTokenIdList[0] = mintedTokenId;\n    }\n\n    emit EventBuyInNative(\n      _msgSender(),\n      mintedTokenIdList,\n      cardAmount_,\n      msg.value\n    );\n\n    return mintedTokenIdList;\n  }\n\n  // Mint card(s) after having verified user's payment (e.g. via internal wallet)\n  // Can only be called by authorized wallet managed by BE\n  function mintAfterPayment(address buyer_, uint256 cardAmount_)\n    external\n    whenNotPaused\n    nonReentrant\n    isAuthorized\n    returns (uint256[] memory)\n  {\n    require(cardAmount_ > 0, \"CardManager: invalid cardAmount_\");\n    require(buyer_ != address(0), \"CardManager: invalid buyer_\");\n\n    // Check if can buy\n    checkIfCanBuy(buyer_, cardAmount_);\n\n    _cardNumPerWalletMinted[buyer_] += cardAmount_;\n    _cardNumForSaleMinted += cardAmount_;\n\n    // Mint card\n    uint256[] memory mintedTokenIdList = new uint256[](cardAmount_);\n\n    if (cardAmount_ > 1) {\n      mintedTokenIdList = _cardNft.mintCardMany(buyer_, cardAmount_);\n    } else {\n      uint256 mintedTokenId = _cardNft.mintCard(buyer_);\n      mintedTokenIdList[0] = mintedTokenId;\n    }\n\n    emit EventMintAfterPayment(\n      buyer_,\n      _msgSender(),\n      mintedTokenIdList,\n      cardAmount_\n    );\n\n    return mintedTokenIdList;\n  }\n\n  // BNB price when running on BSC or ETH price when running on Ethereum\n  function getCurrentPrice() public view returns (int256) {\n    return getThePrice() / 10**8;\n  }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"./IERC721Enumerable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "/home/ubuntu/travala-nft-smart-contract/contracts/PriceConsumerV3.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nabstract contract PriceConsumerV3 {\n  AggregatorV3Interface public priceFeed;\n\n  int256 private constant fakePrice = 2000 * 10**8; // remember to multiply by 10 ** 8\n\n  // Price feed for ETH/USD on Ethereum and Matic\n  // Price feed for BNB/USD on BSC\n  constructor() {\n    if (block.chainid == 1) {\n      // Ethereum mainnet\n      priceFeed = AggregatorV3Interface(\n        0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419\n      );\n    } else if (block.chainid == 4) {\n      // Rinkeby\n      priceFeed = AggregatorV3Interface(\n        0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\n      );\n    } else if (block.chainid == 56) {\n      // BSC mainnet\n      priceFeed = AggregatorV3Interface(\n        0x0567F2323251f0Aab15c8dFb1967E4e8A7D42aeE\n      );\n    } else if (block.chainid == 97) {\n      // BSC testnet\n      priceFeed = AggregatorV3Interface(\n        0x2514895c72f50D8bd4B4F9b1110F0D6bD2c97526\n      );\n    } else {\n      // Unit-test\n    }\n  }\n\n  // The returned price must be divided by 10**8\n  function getThePrice() public view returns (int256) {\n    if (\n      block.chainid == 1 ||\n      block.chainid == 4 ||\n      block.chainid == 56 ||\n      block.chainid == 97\n    ) {\n      (, int256 price, , , ) = priceFeed.latestRoundData();\n      require(price > 0, \"PriceConsumerV3: invalid price returned\");\n      return price;\n    } else {\n      return fakePrice;\n    }\n  }\n}\n"
    },
    "/home/ubuntu/travala-nft-smart-contract/contracts/CardNft.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./CardBase.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\n\ncontract CardNft is ERC721Enumerable, CardBase {\n  // First tokenId begins from 1\n  // Also indicate the total number of minted tokens\n  uint256 public _tokenId;\n\n  uint256 public _burnCount; // count the number of burnt tokens\n\n  string public _baseTokenURI;\n\n  bool public _tokenTransferPaused;\n\n  event EventMintCard(\n    uint256 _tokenId,\n    address _tokenOwner,\n    uint256 _timestamp\n  );\n\n  event EventMintCardMany(\n    uint256[] _tokenIdList,\n    address _tokenOwner,\n    uint256 _timestamp\n  );\n\n  event EventAirdrop(uint256 receiverListLength_);\n\n  event EventBurnCard(address _tokenOwner, uint256 tokenId_);\n  event EventAdminBurnCard(address _adminAddress, uint256 tokenId_);\n\n  event EventSetTokenTransferPaused(bool tokenTransferPaused_);\n  event EventSetBaseURI(string baseURI);\n  event EventAdminTransferToken(uint256 tokenId_, address receiver_);\n\n  constructor(\n    string memory _name,\n    string memory _symbol,\n    string memory _baseTokenLink\n  ) ERC721(_name, _symbol) {\n    _baseTokenURI = _baseTokenLink;\n    _tokenTransferPaused = false;\n  }\n\n  // Apply pausable for token transfer\n  function _beforeTokenTransfer(\n    address from,\n    address to,\n    uint256 tokenId\n  ) internal virtual override {\n    super._beforeTokenTransfer(from, to, tokenId);\n\n    require(_tokenTransferPaused == false, \"CardNft: token transfer paused\");\n  }\n\n  function setTokenTransferPaused(bool tokenTransferPaused_) external isOwner {\n    _tokenTransferPaused = tokenTransferPaused_;\n\n    emit EventSetTokenTransferPaused(tokenTransferPaused_);\n  }\n\n  function _baseURI() internal view virtual override returns (string memory) {\n    return _baseTokenURI;\n  }\n\n  function setBaseURI(string memory baseURI) external isOwner {\n    _baseTokenURI = baseURI;\n\n    emit EventSetBaseURI(baseURI);\n  }\n\n  function tokenExists(uint256 tokenId_) external view returns (bool) {\n    return _exists(tokenId_);\n  }\n\n  // Return the tokenIds owned by a given user wallet address\n  function getTokenIdsOfUserAddress(address _userAddr)\n    external\n    view\n    returns (uint256[] memory)\n  {\n    uint256 tokenCount = balanceOf(_userAddr);\n\n    uint256[] memory tokenIds = new uint256[](tokenCount);\n    for (uint256 i = 0; i < tokenCount; i++) {\n      tokenIds[i] = tokenOfOwnerByIndex(_userAddr, i);\n    }\n    return tokenIds;\n  }\n\n  function burnCard(uint256 tokenId_) external whenNotPaused {\n    require(ownerOf(tokenId_) == _msgSender(), \"CardNft: Not token owner\");\n    _burn(tokenId_);\n    _burnCount += 1;\n    emit EventBurnCard(_msgSender(), tokenId_);\n  }\n\n  function adminBurnCard(uint256 tokenId_) external whenNotPaused isOwner {\n    _burn(tokenId_);\n    _burnCount += 1;\n    emit EventAdminBurnCard(_msgSender(), tokenId_);\n  }\n\n  function mintCard(address owner_)\n    external\n    whenNotPaused\n    isAuthorized\n    returns (uint256)\n  {\n    _tokenId = _tokenId + 1;\n    _safeMint(owner_, _tokenId, \"\");\n\n    emit EventMintCard(_tokenId, owner_, block.timestamp);\n\n    return _tokenId;\n  }\n\n  function mintCardMany(address owner_, uint256 cardAmount_)\n    external\n    whenNotPaused\n    isAuthorized\n    returns (uint256[] memory)\n  {\n    uint256[] memory tokenIds = new uint256[](cardAmount_);\n\n    for (uint256 i = 0; i < cardAmount_; i++) {\n      _tokenId = _tokenId + 1;\n      _safeMint(owner_, _tokenId, \"\");\n\n      tokenIds[i] = _tokenId;\n    }\n\n    emit EventMintCardMany(tokenIds, owner_, block.timestamp);\n\n    return tokenIds;\n  }\n\n  function airdrop(address[] calldata receiverList_)\n    external\n    whenNotPaused\n    isAuthorized\n  {\n    for (uint256 i = 0; i < receiverList_.length; i++) {\n      _tokenId = _tokenId + 1;\n      _safeMint(receiverList_[i], _tokenId, \"\");\n    }\n\n    emit EventAirdrop(receiverList_.length);\n  }\n\n  function adminTransferToken(uint256 tokenId_, address receiver_)\n    external\n    isOwner\n  {\n    require(_exists(tokenId_), \"CardNft: Token not exist\");\n\n    address tokenOwner = ownerOf(tokenId_);\n    _safeTransfer(tokenOwner, receiver_, tokenId_, \"\");\n\n    emit EventAdminTransferToken(tokenId_, receiver_);\n  }\n\n  function transfer(uint256 tokenId_, address receiver_) external {\n    require(ownerOf(tokenId_) == _msgSender(), \"CardNft: Not token owner\");\n\n    _safeTransfer(_msgSender(), receiver_, tokenId_, \"\");\n  }\n}\n"
    },
    "/home/ubuntu/travala-nft-smart-contract/contracts/CardBase.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nabstract contract CardBase is Ownable, Pausable {\n  // List of _authorizedAddressList addresses\n  mapping(address => bool) internal _authorizedAddressList;\n\n  event EventGrantAuthorized(address auth_);\n  event EventRevokeAuthorized(address auth_);\n\n  modifier isOwner() {\n    require(_msgSender() == owner(), \"CardBase: not owner\");\n    _;\n  }\n\n  modifier isAuthorized() {\n    require(\n      _msgSender() == owner() || _authorizedAddressList[_msgSender()] == true,\n      \"CardBase: unauthorized\"\n    );\n    _;\n  }\n\n  function grantAuthorized(address auth_) external isOwner {\n    require(auth_ != address(0), \"CardBase: invalid auth_ address \");\n\n    _authorizedAddressList[auth_] = true;\n\n    emit EventGrantAuthorized(auth_);\n  }\n\n  function revokeAuthorized(address auth_) external isOwner {\n    require(auth_ != address(0), \"CardBase: invalid auth_ address \");\n\n    _authorizedAddressList[auth_] = false;\n\n    emit EventRevokeAuthorized(auth_);\n  }\n\n  function pause() external isOwner {\n    _pause();\n  }\n\n  function unpause() external isOwner {\n    _unpause();\n  }\n}\n"
    }
  },
  "settings": {
    "remappings": [],
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "london",
    "libraries": {},
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}